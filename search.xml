<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Golang学习之路—容器（数组、切片、映射）</title>
      <link href="2020/10/12/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E5%AE%B9%E5%99%A8%EF%BC%88%E6%95%B0%E7%BB%84%E3%80%81%E5%88%87%E7%89%87%E3%80%81%E6%98%A0%E5%B0%84%EF%BC%89/"/>
      <url>2020/10/12/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E5%AE%B9%E5%99%A8%EF%BC%88%E6%95%B0%E7%BB%84%E3%80%81%E5%88%87%E7%89%87%E3%80%81%E6%98%A0%E5%B0%84%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数组（Array）"><a href="#一、数组（Array）" class="headerlink" title="一、数组（Array）"></a>一、数组（Array）</h2><ul><li>数组是由特定类型元素组成的有序序列，Go的数组长度在声明后是固定的，不能改变<strong>，</strong></li><li>数组的长度也是数组类型的一部份，<code>[3]int</code> 与 <code>[4]int</code> 是不同的类型。</li></ul><h5 id="0x00-数组声明"><a href="#0x00-数组声明" class="headerlink" title="0x00 数组声明"></a>0x00 数组声明</h5><blockquote><p>var  arrayName  [len]T </p></blockquote><ul><li><code>len</code>为数组长度，<code>T</code>为元素类型。</li></ul><h5 id="0x01-数组初始化"><a href="#0x01-数组初始化" class="headerlink" title="0x01 数组初始化"></a>0x01 数组初始化</h5><ul><li><p>第一种</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> test <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>      <span class="token comment" spellcheck="true">//[0 0 0]。默认元素都被初始化为0。</span><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//与上面相同。</span><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span></code></pre></li><li><p>第二种：索引赋值</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> test <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>test<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span></code></pre></li><li><p>第三种：自动确定长度，推荐使用。</p><pre class=" language-go"><code class="language-go">test <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//长度使用 … 时，会根据后面的初始化的元素个数确定长度。</span>test <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//映射赋值，下标为5的元素值为5，下标为9的元素值为1，数组长度为10。</span></code></pre></li></ul><h5 id="0x02-数组操作"><a href="#0x02-数组操作" class="headerlink" title="0x02 数组操作"></a>0x02 数组操作</h5><ul><li><p><strong>遍历数组</strong></p><pre class=" language-go"><code class="language-go">test <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> test <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//i为下标，v为值</span><span class="token punctuation">}</span></code></pre></li><li><p><strong><code>cap()</code>与<code>len()</code></strong></p><ul><li><code>len()</code> 函数可以获取数组和切片的元素个数，即数组长度；<code>cap()</code>函数可以获取数组和切片的容量。</li><li>在数组中由于长度固定不可变，因此<code>len()</code>和<code>cap()</code>的输出永远相同。</li></ul></li><li><p><strong>数组是值类型，赋值和传参会复制整个数组。</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>        arr2 <span class="token operator">:=</span> arr1        arr1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1 2 5 4]</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1 2 3 4]</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>多维数组</strong></p><pre class=" language-go"><code class="language-go">test <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//长度为4，类型为 [2]int 的二维数组</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> test<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="二、切片-slice"><a href="#二、切片-slice" class="headerlink" title="二、切片(slice)"></a>二、切片(slice)</h2><ul><li><p>切片是引用类型，切片不定长。</p></li><li><p>切片（slice）本质上是对一个数组的连续片段的引用。</p></li></ul><h5 id="0x00-切片的本质"><a href="#0x00-切片的本质" class="headerlink" title="0x00 切片的本质"></a>0x00 切片的本质</h5><blockquote><p>本质上是一个对底层数组的引用，切片的结构包含：指针（底层数组首个被引用元素地址）、切片的长度、切片的容量。</p></blockquote><p><img src="/2020/10/12/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E5%AE%B9%E5%99%A8%EF%BC%88%E6%95%B0%E7%BB%84%E3%80%81%E5%88%87%E7%89%87%E3%80%81%E6%98%A0%E5%B0%84%EF%BC%89/image-20201012170533122.png" alt="image-20201012170533122"></p><h5 id="0x01-切片声明及初始化"><a href="#0x01-切片声明及初始化" class="headerlink" title="0x01 切片声明及初始化"></a>0x01 切片声明及初始化</h5><ul><li><p>第一种</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> s1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>s1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>s2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">}</span></code></pre><ul><li>本质上先分别生成两个数组<code>[3]int{1,2,3}</code>、<code>[3]string{&quot;a&quot;,&quot;b&quot;,&quot;c&quot;}</code>，然后让s1、s2切片分别对其引用。</li></ul></li><li><p>第二种：直接引用数组片段。</p><pre class=" language-go"><code class="language-go">arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token keyword">var</span> s3 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>s3 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">//[3 4 5 6 7]</span>s4 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">//[2 3 4]</span></code></pre></li><li><p>第三种：使用make函数构造切片。</p><ul><li><p><code>make( []T, size, cap )</code>        //T为元素的类型；size为切片的长度；cap为容量，但是不影响后续增加且可省略。</p><pre class=" language-go"><code class="language-go">a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//[0 0] 分配两个元素长度</span>b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[0 0 0] 分配两个元素长度，但内部实际分配的10个空间，只是实际用3个。</span></code></pre></li><li><p>使用make函数生成的切片一定发生了内存分配，内存分配一定会进行初始化（用对应零值），即永远不会为nil。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v、%d、%d"</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 0 0]、3、10</span>    <span class="token keyword">var</span> s2 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//[0 0 0 0 0]。make会进行内存分配，内存分配会使用零值初始化</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        s1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 0 0 0 0 0 1 2 3 4]</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h5 id="0x03-切片的长度（len）与容量（cap）"><a href="#0x03-切片的长度（len）与容量（cap）" class="headerlink" title="0x03 切片的长度（len）与容量（cap）"></a>0x03 切片的长度（len）与容量（cap）</h5><ul><li>切片的长度可用<code>len()</code>函数，长度即元素个数。</li><li>切片的容量用<code>cap()</code>函数,容量是切片引用的底层的数组从第一个引用元素到数组最后一个元素（注：不是引用的最后一个元素）的个数。</li></ul><p><img src="/2020/10/12/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E2%80%94%E5%AE%B9%E5%99%A8%EF%BC%88%E6%95%B0%E7%BB%84%E3%80%81%E5%88%87%E7%89%87%E3%80%81%E6%98%A0%E5%B0%84%EF%BC%89/image-20201012173540197.png" alt="image-20201012173540197"></p><ul><li><p>代码示例</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 代码示例1：</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>    s3 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">//[3 4 5 6 7]</span>    s4 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//[2 3 4]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//5 5</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//3 6。s4是从arr数组的第2个元素开始引用，因此容量为 [2:],共6个。</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="0x04-切片特性"><a href="#0x04-切片特性" class="headerlink" title="0x04 切片特性"></a>0x04 切片特性</h5><ul><li><p>切片是对底层数组的引用，因此底层数组值发生改变时，引用的值也会改变。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 代码示例1：</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>    s3 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">//[3 4 5 6 7]</span>    s4 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//[2 3 4]</span>    arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3333333</span> <span class="token comment" spellcheck="true">//改变底层数组的值</span>    <span class="token comment" spellcheck="true">//切片也发生了改变</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//[3333333 4 5 6 7]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//[2 3333333 4]</span><span class="token punctuation">}</span></code></pre></li><li><p>修改切片的值，实际上是改变底层数组的值。所以所有的引用都会发生改变。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 代码示例1：</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    s2 <span class="token operator">:=</span> s1    s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//实际上是改变底层数组</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1 0]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1 0]</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 代码示例2：</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>    s3 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//[3 4 5 6 7]</span>    s4 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//[2 3 4]</span>    s4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">111</span> <span class="token comment" spellcheck="true">//本质上是改变了底层数组arr[3]的值</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1 2 111 4 5 6 7]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[111 4 5 6 7]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[2 111 4]</span><span class="token punctuation">}</span></code></pre></li><li><p>切片是引用类型，所以赋值是引用。<code>copy()</code>是拷贝，拷贝了底层数组。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 代码示例：</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>    s1 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    s2 <span class="token operator">:=</span> s1     <span class="token comment" spellcheck="true">//赋值</span>    s3 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token function">copy</span><span class="token punctuation">(</span>s3<span class="token punctuation">,</span> s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//copy</span>    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1111</span> <span class="token comment" spellcheck="true">//修改原数组</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1111 2 3]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1111 2 3]，切片赋值是引用，所以底层数组改变也被改变了。</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1 2 3]，copy的没有因原数组改变而改变，因为copy的是底层数组。</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="0x05-切片操作"><a href="#0x05-切片操作" class="headerlink" title="0x05 切片操作"></a>0x05 切片操作</h5><ul><li><p><strong>元素追加：<code>append()</code></strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//基本操作</span>test <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>            test <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//后面追加一个元素</span>test <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//后面追加两个元素</span>test <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//后面追加三个元素，切片会被解包，…是解包符。</span>test <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> test<span class="token operator">...</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//前面追加一个元素</span>test <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>test <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> test<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//中间插入元素3,中间插入只能采用间接的方式。</span></code></pre><ul><li><p>当切片的容量还足够时，<code>append()</code>是修改底层数组。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>    s1 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//[0 1 2]</span>    s1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1 2 5]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//[0 1 2 5 4],本质是底层数组被修改</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>    s1 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//[0 1 2]</span>    s2 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//[3 4]</span>    s1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1 2 5]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1 2 5 4],本质是底层数组被修改</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[5 4]</span><span class="token punctuation">}</span></code></pre></li><li><p>在切片的容量不足时，切片会进行扩容，即生成一个新的底层数组。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>    s1 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//5 5</span>    s1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//6 10。进行了扩容，容量为原来的2倍</span>    arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4444</span> <span class="token comment" spellcheck="true">//修改原数组，[0 1 2 3 4444]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 1 2 3 4 5]。原数组的修改不再影响切片，因为此时切片引用的不再是原数组。</span><span class="token punctuation">}</span></code></pre></li><li><p>切片只能是数组的连续片段进行引用，不能断开。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>    s1 <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[0,1,4]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[0 1 4 4]，底层数组被修改覆盖</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>几点总结：</strong></p><ol><li>每个切片会指向一个底层数组，这个数组能容纳一定数量的元素。当底层数组不能容纳新增的元素时，切片就会自动按照一定的策略进行“扩容”（前一次容量的2倍），此时该切片指向的底层数组就会更换，即产生新的底层数组，因此当发生扩容时，切片的地址也会改变（新的底层数组地址改变，切片指向的地址自然跟随新数组改变）。</li><li>append（）函数的返回值是更新后的切片，用返回值赋值给切片变量实现更改切片的操作，之所以要用返回的切片对原切片进行更新，而不像Python中列表那样的原处修改，是因为更新的切片地址、容量可能发生改变了（扩容产生了新数组）。</li><li>在前面追加元素都会发生切片地址改变，因此开销要比在后面追加大。</li></ol></li></ul></li><li><p><strong>切片元素删除</strong></p><ul><li>要从切片a中删除索引为index的元素，操作方法是 <code>a = append(a[:index], a[index+1:]...)</code></li></ul></li><li><p><strong>遍历切片</strong></p><pre class=" language-go"><code class="language-go">test <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"Aqua"</span><span class="token punctuation">,</span> <span class="token string">"Mikasa"</span><span class="token punctuation">,</span> <span class="token string">"Yuihama"</span><span class="token punctuation">,</span> <span class="token string">"Touka"</span><span class="token punctuation">,</span> <span class="token string">"Tosaki"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> test <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Index：%d ; Value：%s \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>切片排序：</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    s2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">}</span>    sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[0 1 2 4 5 6 7 8]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[a b c d]</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="0x06-多维切片"><a href="#0x06-多维切片" class="headerlink" title="0x06 多维切片"></a>0x06 多维切片</h5><pre class=" language-go"><code class="language-go">test <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"Aqua"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"Mikasa"</span><span class="token punctuation">,</span> <span class="token string">"Yuihama"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Tosaki"</span><span class="token punctuation">)</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> test<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="三、映射（Map）"><a href="#三、映射（Map）" class="headerlink" title="三、映射（Map）"></a>三、映射（Map）</h2><ul><li>Go语言的<code>map</code>是一种以键值对方式存储的无序集合数据结构，类似于Python中的字典。</li><li>Go语言的<code>map</code>是引用类型，不需要指明长度，是可以动态增长的。</li><li>未显式初始化的<code>map</code>，默认使用零值nil进行初始化。</li></ul><h5 id="0x00-map声明及初始化"><a href="#0x00-map声明及初始化" class="headerlink" title="0x00 map声明及初始化"></a>0x00 map声明及初始化</h5><blockquote><p>var test map[KeyType]ValueType</p></blockquote><ul><li>key 可以是<code>string</code>、<code>int</code>、<code>float</code>。数组、切片和结构体不能作为 key，但是指针和接口类型可以；</li><li>value可以是任意类型。</li></ul><pre class=" language-go"><code class="language-go">test <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">"mikasa"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Aqua"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Yuigahama"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//声明并初始化</span>test <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//不显式初始化时，使用nil进行初始化。</span>test <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//使用make函数构造map，分配内存。</span>test<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Mikasa"</span>               <span class="token comment" spellcheck="true">//新增一个元素</span>test<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Yuigahama"</span>test <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>，<span class="token punctuation">[</span><span class="token builtin">cap</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//map值为切片类型,cap为容量大小，不是必需的。</span>test<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"Mikasa"</span><span class="token punctuation">}</span>test<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"Yuigahama"</span><span class="token punctuation">}</span></code></pre><h5 id="0x01-映射特性"><a href="#0x01-映射特性" class="headerlink" title="0x01 映射特性"></a>0x01 映射特性</h5><ul><li><p>将一个<code>map</code>赋值给另一个变量，与切片一样，是引用，它们的元素都引用于同一对象。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    m1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>    m2 <span class="token operator">:=</span> m1    m1<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">22</span>    <span class="token comment" spellcheck="true">//改变m1</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//map[a:1 b:22 c:3 d:4]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//map[a:1 b:22 c:3 d:4]，m1改变导致m2也改变</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="0x02-映射操作"><a href="#0x02-映射操作" class="headerlink" title="0x02 映射操作"></a>0x02 映射操作</h5><ul><li><p>遍历map</p><pre class=" language-go"><code class="language-go">test <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"Mikasa"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"Yuigahama"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">"Toka"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">"Tosaki"</span><span class="token punctuation">}</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> test <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> test<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//test[k]与v都可得到值。</span><span class="token punctuation">}</span></code></pre></li><li><p>删除map中某个键值对：<code>delete(map,key)</code></p><pre class=" language-go"><code class="language-go">test <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"Mikasa"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"Yuigahama"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">"Toka"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">"Tosaki"</span><span class="token punctuation">}</span><span class="token function">delete</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//删除test中key为1的键值对。</span></code></pre></li><li><p>判断key是否存在</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    m1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>    value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m1<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"key doesnt exist"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="0x03-sync-Map"><a href="#0x03-sync-Map" class="headerlink" title="0x03 sync.Map"></a>0x03 sync.Map</h5><ul><li><p>在并发情况下，同时对一个map进行读写会造成线程不安全，Go会检测到并报错。</p></li><li><p><code>sync.Map</code>是一种线程安全的map,但是与原生的map有很大不同：</p><ul><li>无须初始化，直接声明即可。</li><li><code>sync.Map</code> 不能使用 map 的方式进行取值和设置等操作，而是使用 <code>sync.Map</code> 的方法进行调用：<ul><li>Store   表示存储</li><li>Load    表示获取</li><li>Delete  表示删除</li></ul></li></ul></li><li><p>使用 Range 配合一个回调函数进行遍历操作，通过回调函数返回内部遍历出来的值。</p></li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> info sync<span class="token punctuation">.</span>Map    info<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Mikasa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//存储键值</span>    info<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    info<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">)</span>    info<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span>    value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> info<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//取值</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No key"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    info<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//删除</span>    <span class="token comment" spellcheck="true">//遍历键值</span>    info<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="四、注意事项总结"><a href="#四、注意事项总结" class="headerlink" title="四、注意事项总结"></a>四、注意事项总结</h2><h5 id="0x00-引用类型要分配内存才可使用"><a href="#0x00-引用类型要分配内存才可使用" class="headerlink" title="0x00 引用类型要分配内存才可使用"></a>0x00 引用类型要分配内存才可使用</h5><ul><li><p>下面的代码会引发<code>panic</code>,在Go语言中对于引用类型的变量，我们在使用的时候不仅要声明它，还要为它分配内存空间，否则我们的值就没办法存储。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        s1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>        m1 <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token punctuation">)</span>    s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>      <span class="token comment" spellcheck="true">//error: index out of range</span>    m1<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">//panic: assignment to entry in nil map</span><span class="token punctuation">}</span></code></pre><ul><li><p><strong>引用类型分配内存的两种方式</strong></p><ul><li><p>声明同时初始化会发生内存分配。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span>    m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">"Aqua"</span><span class="token punctuation">}</span>    s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>    m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Mikasa"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 2]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//map[0:Aqua 1:Mikasa]</span><span class="token punctuation">}</span></code></pre></li><li><p>若不想在声明时进行初始化，则需要使用<code>make()</code>函数分配内存，会使用对应的0值进行初始化。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0 0 0 0]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//map[]</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p>值类型声明即可使用，因为值类型在声明的时候已经默认分配好了内存空间。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> test <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">int</span>    test<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[0 2 0 0]</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BlueCMS功能点实现代码逻辑</title>
      <link href="2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/"/>
      <url>2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<h2 id="新闻列表"><a href="#新闻列表" class="headerlink" title="新闻列表"></a>新闻列表</h2><p>如下图，首页上的新闻列表。</p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/image-20200923095406406.png" alt="image-20200923095406406" style="zoom:50%;"><p><strong>实现逻辑</strong></p><blockquote><p>从存放新闻的数据库表中获取数据，上图不同的框注的部分实际只是在进行SQL查询时，语句过滤的条件不同而已。之后将查询到的所有新闻数据传给模板语言，模板语言循环传入的数据并渲染显示内容（文章URL、文章标题）。</p></blockquote><p>每篇文章一般会使用不同的<code>id</code>参数标识。形如：<code>news.php?id=1</code></p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/image-20200923105348921.png" alt="image-20200923105348921" style="zoom:50%;"><p>存放新闻的数据表:</p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/image-20200923100515760.png" alt="image-20200923100515760" style="zoom: 40%;"><p>查询数据并传给模板语言：</p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/image-20200923100758860.png" alt="image-20200923100758860" style="zoom:50%;"><p>模板循环数据进行渲染：</p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/image-20200923101019763.png" alt="image-20200923101019763" style="zoom: 50%;"><h5 id="文章分类页"><a href="#文章分类页" class="headerlink" title="文章分类页"></a><strong>文章分类页</strong></h5><p>文章分类页同理，只不过是根据文章表的<code>cid</code>字段，即分类字段进行过滤查询结果。</p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/image-20200923111410133.png" alt="image-20200923111410133" style="zoom:40%;"><h2 id="导航条"><a href="#导航条" class="headerlink" title="导航条"></a>导航条</h2><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/image-20200923112411381.png" alt="image-20200923112411381" style="zoom:50%;"><p><strong>实现逻辑</strong></p><blockquote><p>将导航条各个菜单项的信息存储到数据库的一个表中，在显示页面时将其从数据库中读出传给模板引擎进行渲染。</p></blockquote><p>存放菜单项的数据表：</p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/image-20200923113839727.png" alt="image-20200923113839727" style="zoom:50%;"><p>从数据库中查询：</p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/Untitled.png" alt="img" style="zoom:40%;"><p>传到页面进行渲染显示：</p><img src="/2020/09/23/BlueCMS%E5%8A%9F%E8%83%BD%E7%82%B9%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91/Untitled.png" alt="Untitled.png (1699×376)" style="zoom:40%;">]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BlueCMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码审计入门实战—BlueCMS</title>
      <link href="2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/"/>
      <url>2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这算是自己的第一个代码审计实战，无数次想开始代码审计之旅，但最终都不了了之，原因是一直没有找到合适自己的审计方法，严格来说应该是自己的基础能力不足以支撑自己的想法……</p><p>众所周知，代码审计的思路大致可以分为<code>通读全文代码</code>、<code>审计功能点</code>、<code>追踪数据流/追溯变量</code>、<code>寻找危险函数/变量</code>等。</p><p>在自己看来后两种方式是不太适合新手一开始就去采用的方法，因为感觉上并不能让自己对全局有很好的认识和掌握，这两种方法给自己感觉更多像是在很熟悉代码审计后投机取巧的方式。</p><p>可能是由于自己个性的原因，不喜欢”蒙在鼓里”的感觉，学习什么东西都想要弄清楚，自己心情才会感觉到通透，不准确的描述这种感觉：应该是一种凡事想要先了解大致全貌才能静下心去研究个点细节，这可能是浮躁性格导致的吧。因此初学阶段，自己其实一直想采用的方法是通读全文代码，但是该方法实际是需要建立在具备强大的开发能力的基础上的。准确来说，对自己而言不错的开发能力应该是语言的基础+开发的思维，语言的基础这点不用多说，实际上我觉得也不用一定要达到精通的地步，能大概知道代码的意思就行。而我觉得最重要的应该的开发的思维，不确定这样描述准不准确，但我觉得它包含例如设计模式、某个功能实现的思路等方方面面。</p><p>最近，又想重新开始学习代码审计，因为那种让自己感觉到不”通透”的，不仅只有代码审计而已，一直以来黑盒渗透测试就让自己很难受，因此实际上想学习代码审计就是为了解决这份不通透感。既然前面说的几种方法感觉都不太适合自己，一番总结思考后，感觉可以从审计功能点开始入门，不用通读全文但可以知道常见的一些功能后面的代码逻辑。</p><p>由于重复了“开始到放弃”很多次，这次总算是下定决心了，所以总结反思一下之前的失败的原因和自己的一些想法，算是为重新开始做个分界点，也为以后回顾此时此刻的想法是否是正解留个参考点。</p><p>以上。</p><h4 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h4><blockquote><p>PhpStudy集成环境 (PHP + MySQL + Xdebug )</p><p>PhpStorm</p><p>BlueCMS_v1.6_sp1 </p></blockquote><h2 id="新闻显示"><a href="#新闻显示" class="headerlink" title="新闻显示"></a>新闻显示</h2><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200923105348921.png" alt="image-20200923105348921" style="zoom:50%;"><h5 id="SQL注入审计—结果为不存在漏洞"><a href="#SQL注入审计—结果为不存在漏洞" class="headerlink" title="SQL注入审计—结果为不存在漏洞"></a>SQL注入审计—结果为不存在漏洞</h5><p>新闻的内容页由<code>news.php</code>处理，每篇新闻由不同的文章<code>id</code>标识，根据不同的<code>id</code>从存放文章的数据表中查询获取数据，每篇新闻的URL形如：<code>news.php?id=x</code>。</p><p>审计<code>news.php</code>代码实现，由于会对获取的<code>id</code>参数使用<code>intval()</code>函数进行了处理，因此无法进行SQL注入。</p><pre class=" language-php"><code class="language-php"> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">//获取文章id，可以看到对获取的ID使用intval()进行了处理，因此无法进行SQL注入。</span> <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span> <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">is_cached</span><span class="token punctuation">(</span><span class="token string">'news_list.htm'</span><span class="token punctuation">,</span> <span class="token variable">$cache_id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">//根据文章ID进行数据库查询</span>        <span class="token variable">$news</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getone</span><span class="token punctuation">(</span><span class="token string">"SELECT id, title, color, author, source, pub_date, content, click, comment FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'article'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token string">" WHERE id = "</span><span class="token punctuation">.</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将查询到的文章数据传给模板进行渲染</span>        <span class="token function">template_assign</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'news'</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'comment_list'</span><span class="token punctuation">,</span> <span class="token string">'user_name'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$news</span><span class="token punctuation">,</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$comment_lsit</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'user_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h6 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a><strong>Tips</strong></h6><blockquote><ol><li><code>news.php?id=1</code>与<code>news.php?id=1abc</code>返回页面一样，则很可能是使用了类似<code>intval()</code>函数将参数值转换为了整型。</li></ol></blockquote><h2 id="前台用户登录"><a href="#前台用户登录" class="headerlink" title="前台用户登录"></a>前台用户登录</h2><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200923115547239.png" alt="image-20200923115547239" style="zoom:50%;"><h5 id="SQL注入审计—结果为存在SQL盲注（宽字符注入绕过转义）"><a href="#SQL注入审计—结果为存在SQL盲注（宽字符注入绕过转义）" class="headerlink" title="SQL注入审计—结果为存在SQL盲注（宽字符注入绕过转义）"></a>SQL注入审计—结果为存在SQL盲注（宽字符注入绕过转义）</h5><p>根据表单信息可以看到，由<code>user.php</code>文件负责进行登录验证，<code>act</code>为<code>index_login</code>（BlueCMS使用<code>act</code>参数来控制流程逻辑）。</p><p><strong>代码流程</strong></p><p>在对<code>user.php</code>文件进行审计之前，先大致分析一下前台登录时的代码流程。</p><p>首先会在<code>user.php</code>文件顶部看到包含了三个文件：</p><pre class=" language-php"><code class="language-php"> <span class="token keyword">require_once</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/include/common.inc.php'</span><span class="token punctuation">;</span> <span class="token keyword">require_once</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/include/filter.inc.php'</span><span class="token punctuation">;</span> <span class="token keyword">require_once</span> <span class="token constant">BLUE_ROOT</span><span class="token punctuation">.</span><span class="token string">'include/upload.class.php'</span><span class="token punctuation">;</span></code></pre><p>通过查看<code>common.inc.php</code>文件，发现其会对参数进行统一的转义过滤，例如<code>&#39;</code>、<code>&quot;</code>等特殊字符都会被添加<code>\</code>进行转义。</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//若没开启魔术引号，则使用下列函数对参数进行过滤。</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">get_magic_quotes_gpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$_POST</span> <span class="token operator">=</span> <span class="token function">deep_addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$_GET</span> <span class="token operator">=</span> <span class="token function">deep_addslashes</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$_COOKIES</span> <span class="token operator">=</span> <span class="token function">deep_addslashes</span><span class="token punctuation">(</span><span class="token variable">$_COOKIES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$_REQUEST</span> <span class="token operator">=</span> <span class="token function">deep_addslashes</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接着查看<code>filter.inc.php</code>文件，发现其也是一个用于过滤参数的，但是逻辑比较简单，只是根据配置文件的配置过滤替换特定的字符。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token keyword">as</span> <span class="token variable">$k1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        $<span class="token variable">$k1</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$k1</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对GET、POST提交的所有参数使用filter函数进行处理。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>filter函数逻辑简单，就是根据配置文件中有无针对特定字符进行过滤的配置而进行匹配替换为<span class="token operator">*</span><span class="token operator">*</span>。故省略<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>接下来，会根据<code>act</code>参数值的不同进入到不同的逻辑代码块中，前台登录时<code>act=index_login</code>。</p><pre class=" language-php"><code class="language-php"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token variable">$act</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'act'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'act'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">'default'</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$act</span> <span class="token operator">==</span> <span class="token string">'index_login'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取用户名和密码参数值，并做去除两边空白处理。</span>     <span class="token variable">$user_name</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'user_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'user_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>     <span class="token variable">$pwd</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>     <span class="token variable">$remember</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'remember'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'remember'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user_name</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'用户名不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$pwd</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'密码不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//SQL宽字符注入 + 盲注</span>    <span class="token comment" spellcheck="true">// http://bluecms.com/user.php?act=index_login&amp;user_name=admin%af' or sleep(0)%23 &amp;pwd=123</span>    <span class="token comment" spellcheck="true">//使用用户名到admin数据表中进行查询，确定用户是否属于管理员组。</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getone</span><span class="token punctuation">(</span><span class="token string">"SELECT COUNT(*) AS num FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" WHERE admin_name='$user_name'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'系统用户组不能从前台登录'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//用户名密码校验</span>    <span class="token variable">$w</span> <span class="token operator">=</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$user_name</span><span class="token punctuation">,</span> <span class="token variable">$pwd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$w</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token variable">$w</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'您输入的用户名和密码不正确'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$w</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">update_user_info</span><span class="token punctuation">(</span><span class="token variable">$user_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$remember</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'BLUE[user_id]'</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">172800</span><span class="token punctuation">,</span> <span class="token variable">$cookiepath</span><span class="token punctuation">,</span> <span class="token variable">$cookiedomain</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'BLUE[user_name]'</span><span class="token punctuation">,</span> <span class="token variable">$user_name</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">172800</span><span class="token punctuation">,</span> <span class="token variable">$cookiepath</span><span class="token punctuation">,</span> <span class="token variable">$cookiedomain</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'BLUE[user_pwd]'</span><span class="token punctuation">,</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$pwd</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$_CFG</span><span class="token punctuation">[</span><span class="token string">'cookie_hash'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">172800</span><span class="token punctuation">,</span> <span class="token variable">$cookiepath</span><span class="token punctuation">,</span> <span class="token variable">$cookiedomain</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'欢迎您 '</span><span class="token punctuation">.</span><span class="token variable">$user_name</span><span class="token punctuation">.</span><span class="token string">' 回来，现在将转到会员中心'</span><span class="token punctuation">,</span> <span class="token string">'user.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>分析以上代码，可以看到登录验证使用函数<code>login()</code>，该函数在<code>user.func.php</code>文件中定义，该文件在<code>common.inc.php</code>文件中被包含导入。</p><pre class=" language-php"><code class="language-php"> <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$user_name</span><span class="token punctuation">,</span><span class="token variable">$pwd</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">global</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//http://bluecms.com/user.php?act=index_login&amp;user_name=adm%af%27%20or%20sleep(10)%23%20&amp;pwd=123</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getone</span><span class="token punctuation">(</span><span class="token string">"SELECT COUNT(*) AS num FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" WHERE user_name='$user_name'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT COUNT(*) AS num FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" WHERE user_name='$user_name' and pwd=md5('$pwd')"</span><span class="token punctuation">;</span>         <span class="token variable">$user_num</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getone</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user_num</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p><strong>漏洞审计</strong></p><p>梳理好流程后，开始进行漏洞审计，通过前面的分析知道，提交的参数存在特殊字符的话都会被<code>addslashes()</code>函数进行转义处理，对于<code>字符型</code>的SQL语句我们在构造注入语句时就无法进行闭合。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200923152624634.png" alt="image-20200923152624634" style="zoom:50%;"><p>要进行SQL注入的话，就得必须绕过转义，可以考虑是否存在宽字节注入漏洞。</p><p>数据库连接代码在<code>mysql.class.php</code>中，核心代码如下，可以看到关键语句<code>SET NAMES gbk</code>，因此基本确定存在宽字符注入。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">mysql</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$linkid</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$dbhost</span><span class="token punctuation">,</span> <span class="token variable">$dbuser</span><span class="token punctuation">,</span> <span class="token variable">$dbpw</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$dbcharset</span> <span class="token operator">=</span> <span class="token string">'gbk'</span><span class="token punctuation">,</span> <span class="token variable">$connect</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">mysql</span><span class="token punctuation">(</span><span class="token variable">$dbhost</span><span class="token punctuation">,</span> <span class="token variable">$dbuser</span><span class="token punctuation">,</span> <span class="token variable">$dbpw</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">,</span> <span class="token variable">$dbcharset</span><span class="token punctuation">,</span> <span class="token variable">$connect</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">mysql</span><span class="token punctuation">(</span><span class="token variable">$dbhost</span><span class="token punctuation">,</span> <span class="token variable">$dbuser</span><span class="token punctuation">,</span> <span class="token variable">$dbpw</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$dbcharset</span> <span class="token operator">=</span> <span class="token string">'gbk'</span><span class="token punctuation">,</span> <span class="token variable">$connect</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$connect</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'mysql_pconnect'</span> <span class="token punctuation">:</span> <span class="token string">'mysql_connect'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">linkid</span> <span class="token operator">=</span> @<span class="token variable">$func</span><span class="token punctuation">(</span><span class="token variable">$dbhost</span><span class="token punctuation">,</span> <span class="token variable">$dbuser</span><span class="token punctuation">,</span> <span class="token variable">$dbpw</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dbshow</span><span class="token punctuation">(</span><span class="token string">'Can not connect to Mysql!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dbversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token string">'4.1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">mysql_query</span><span class="token punctuation">(</span> <span class="token string">"SET NAMES gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dbversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token string">'5.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string">"SET sql_mode = ''"</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">linkid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token variable">$dbname</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">linkid</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dbshow</span><span class="token punctuation">(</span><span class="token string">"Can't select MySQL database($dbname)!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>漏洞验证</strong></p><p>前面我们分析代码执行流程逻辑时，可以发现存在三次数据库查询，分别是下面的查询语句，可以任选其一进行注入。</p><pre class=" language-php"><code class="language-php"><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getone</span><span class="token punctuation">(</span><span class="token string">"SELECT COUNT(*) AS num FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" WHERE admin_name='$user_name'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getone</span><span class="token punctuation">(</span><span class="token string">"SELECT COUNT(*) AS num FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" WHERE user_name='$user_name'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT COUNT(*) AS num FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" WHERE user_name='$user_name' and pwd=md5('$pwd')"</span><span class="token punctuation">;</span></code></pre><p>构造注入Payloa：</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//由于程序使用$_REQUEST获取参数，因此可以用GET、POST。</span><span class="token comment" spellcheck="true">// %23是#进行URLencode的值，在URL中使用#必须要编码，否则会被当做锚点。不使用 --+ 是因为程序使用trim()函数对参数进行了处理。</span>user<span class="token punctuation">.</span>php<span class="token operator">?</span>act<span class="token operator">=</span>index_login<span class="token operator">&amp;</span>user_name<span class="token operator">=</span>admin<span class="token operator">%</span>af' <span class="token keyword">or</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span> <span class="token operator">&amp;</span>pwd<span class="token operator">=</span><span class="token number">123</span></code></pre><p>SQLMAP：<code>--tamper=&quot;unmagicquotes&quot;</code>用于进行宽字符注入，绕过转义。</p><pre><code>python .\sqlmap.py -u &quot;http://bluecms.com/user.php?act=index_login&amp;user_name=admin&amp;pwd=123&quot; --tamper=&quot;unmagicquotes&quot; --level 3 --dbs --batch  </code></pre><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200923161537266.png" alt="image-20200923161537266" style="zoom:40%;"><p>实际上，该CMS存在大量SQL宽字符注入，而不仅仅是此处。</p><h5 id="动态变量导致变量覆盖"><a href="#动态变量导致变量覆盖" class="headerlink" title="动态变量导致变量覆盖"></a>动态变量导致变量覆盖</h5><p>上一节我们分析到<code>user.php</code>文件在顶部会先包含几个文件，在分析<code>filter.inc.php</code>文件时，无意间发现存在一个由于采用动态变量<code>$$</code>形式，导致变量覆盖，但是比较鸡肋，只会把任意变量的值覆盖为<code>null</code>。</p><p>代码如下</p><pre class=" language-php"><code class="language-php"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token keyword">as</span> <span class="token variable">$k1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        $<span class="token variable">$k1</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$k1</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//动态变量导致变量覆盖，但只能将变量的值变null</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$_CFG</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token keyword">as</span> <span class="token variable">$k1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$k1</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_CFG</span><span class="token punctuation">[</span><span class="token string">'replace_word'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$new_v</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$_CFG</span><span class="token punctuation">[</span><span class="token string">'replace_word'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'**'</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$new_v</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//$new_v只会为null。</span><span class="token punctuation">}</span></code></pre><p><strong>漏洞验证</strong></p><p>为了验证效果，在源码中新增一个<code>test</code>变量进行测试，下图为正常情况。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200923171859885.png" alt="image-20200923171859885" style="zoom:40%;"><p>接着传入<code>test</code>参数，由于经过<code>filter.inc.php</code>文件中的代码处理，发生了变量覆盖，<code>test</code>变量的值已被覆盖为<code>null</code>。可以尝试传入<code>_GET</code>、<code>_POST</code>等参数进行覆盖。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200923172255376.png" alt="image-20200923172255376" style="zoom:40%;"><p>由于只能把变量的值覆盖为<code>null</code>，暂未找到利用的方法。</p><h2 id="新用户注册"><a href="#新用户注册" class="headerlink" title="新用户注册"></a>新用户注册</h2><p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924091950908.png" alt="image-20200924091950908" style="zoom:35%;"><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924091916203.png" alt="image-20200924091916203" style="zoom: 40%;"></p><p>新用户注册功能依旧由<code>user.php</code>文件负责处理，提交注册请求时<code>act</code>为<code>do_reg</code>。</p><p>对参数的过滤处理部分依然同上小节所述，不再赘述。实际上可认为只会对参数使用<code>addslashes()</code>函数进行处理。</p><h5 id="SQL注入审计—结果为存在SQL宽字符-盲注"><a href="#SQL注入审计—结果为存在SQL宽字符-盲注" class="headerlink" title="SQL注入审计—结果为存在SQL宽字符+盲注"></a>SQL注入审计—结果为存在SQL宽字符+盲注</h5><p>第一处在校验用户名是否存在时，会发送Ajax请求。</p><p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924094256346.png" alt="image-20200924094256346" style="zoom:40%;"><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924094412540.png" alt="image-20200924094412540" style="zoom: 40%;"></p><p>Ajax请求如下图，依然是由<code>user.php</code>文件处理，<code>act</code>为<code>check_user_name</code>。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924094744465.png" alt="image-20200924094744465" style="zoom: 50%;"><p>后台校验代码</p><p><code>user.php</code></p><pre class=" language-php"><code class="language-php"><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$act</span> <span class="token operator">==</span> <span class="token string">'check_user_name'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token variable">$user_name</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'user_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'user_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check_user_name</span><span class="token punctuation">(</span><span class="token variable">$user_name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"&lt;span style='color:red'>该用户名已存在&lt;/span>"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"&lt;span style='color:#006CCE'>该用户名可以使用&lt;/span>"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><code>user.func.php</code></p><pre class=" language-php"><code class="language-php"> <span class="token keyword">function</span> <span class="token function">check_user_name</span><span class="token punctuation">(</span><span class="token variable">$user_name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">global</span> <span class="token variable">$db</span><span class="token punctuation">;</span>     <span class="token variable">$user1</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getone</span><span class="token punctuation">(</span><span class="token string">"SELECT count(*) AS num FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" WHERE user_name ='$user_name'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$user2</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getone</span><span class="token punctuation">(</span><span class="token string">"SELECT count(*) AS num FROM "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" WHERE admin_name ='$user_name'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user1</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token variable">$user2</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>在<code>act=do_reg</code>时的逻辑中会再对用户名进行校验，同样有SQL查询，且存在注入，不再赘述。</p><h5 id="XSS审计—Email字段存在存储型XSS"><a href="#XSS审计—Email字段存在存储型XSS" class="headerlink" title="XSS审计—Email字段存在存储型XSS"></a>XSS审计—Email字段存在存储型XSS</h5><p>分析下列处理注册的代码，发现对<code>$user_name</code>和<code>$email</code>参数均没有进行XSS过滤处理，对<code>$user_name</code>的长度进行了限制，因此不好进行利用，但<code>$email</code>字段是没有任何限制的，存在存储型的XSS。</p><pre class=" language-php"><code class="language-php"> <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$act</span> <span class="token operator">==</span> <span class="token string">'do_reg'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$user_name</span>         <span class="token operator">=</span>    <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'user_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'user_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$pwd</span>               <span class="token operator">=</span>     <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$pwd1</span>                <span class="token operator">=</span>     <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pwd1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pwd1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$email</span>             <span class="token operator">=</span>     <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//XSS，可打管理员后台</span>    <span class="token variable">$safecode</span>          <span class="token operator">=</span>     <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'safecode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'safecode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$from</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$from</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$from</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">'user.php'</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//限制用户名长度在4到16个字符长度。</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$user_name</span><span class="token punctuation">)</span> <span class="token markup">&lt; 4 || strlen($user_name) ></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'用户名字符长度不符'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" (user_id, user_name, pwd, email, reg_time, last_login_time) VALUES ('', '$user_name', md5('$pwd'), '$email', '$timestamp', '$timestamp')"</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略部分代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'last_reg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$timestamp</span><span class="token punctuation">;</span>        <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'恭喜您注册成功,现在将转向...'</span><span class="token punctuation">,</span> <span class="token variable">$from</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>实际上在用户登录后的个人中心，也可以对<code>Email</code>进行修改，同样也没有进行编码过滤，存在漏洞。</p><p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924101413947.png" alt="image-20200924101413947" style="zoom:40%;"><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924102701952.png" alt="image-20200924102701952" style="zoom:40%;"></p><p><strong>漏洞验证与利用</strong></p><p>经过查看程序的各个页面，发现管理员后台有个<code>会员管理—&gt;会员列表</code>功能，会将<code>Email</code>显示在页面，因此该漏洞可打管理员后台。</p><p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924102001257.png" alt="image-20200924102001257" style="zoom:40%;"><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924101920131.png" alt="image-20200924101920131" style="zoom:40%;"></p><h2 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h2><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924104108312.png" alt="image-20200924104108312" style="zoom: 50%;"><p>个人中心修改个人资料功能依旧由<code>user.php</code>文件负责处理，提交注册请求时<code>act</code>为<code>edit_user_info</code>。</p><h5 id="XSS审计—大量输入点存在存储型XSS"><a href="#XSS审计—大量输入点存在存储型XSS" class="headerlink" title="XSS审计—大量输入点存在存储型XSS"></a>XSS审计—大量输入点存在存储型XSS</h5><p>个人资料的信息输入项中，只有<code>地址</code>信息项使用<code>htmlspecialchars()</code>进行了实体化编码，其它均未进行编码或过滤：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$act</span> <span class="token operator">==</span> <span class="token string">'edit_user_info'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$sex</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token variable">$msn</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'msn'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'msn'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$qq</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'qq'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'qq'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$mobile_phone</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'mobile_phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'mobile_phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$office_phone</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'office_phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'office_phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$home_phone</span>   <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'home_phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'home_phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//仅地址参数进行了转义。</span></code></pre><p>虽然很多信息项没有进行转义过滤，但是可以发现，在有一些信息项插入的Payload被截断了，同时未发现有对信息项长度进行限制的代码。实际是因为数据库对表的字段长度进行了限制。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924105816536.png" alt="image-20200924105816536" style="zoom:40%;"><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924110821674.png" alt="image-20200924110821674" style="zoom:50%;"><h5 id="任意文件上传审计—不存在"><a href="#任意文件上传审计—不存在" class="headerlink" title="任意文件上传审计—不存在"></a>任意文件上传审计—不存在</h5><p>审计点在头像上传处，参数名为<code>face_pic2</code></p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924111513958.png" alt="image-20200924111513958" style="zoom:50%;"><p>接下来看处理头像上传的代码，一共进行了两次过滤，第一次是对<code>content-type</code>进行过滤，可修改绕过。但是第二次采用了白名单后缀过滤方式，且重新生成了文件名，因此无法绕过。只能配合文件包含来进行利用。</p><p><code>user.php</code></p><pre class=" language-php"><code class="language-php"><span class="token variable">$image</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$act</span> <span class="token operator">==</span> <span class="token string">'edit_user_info'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    。。。。。。    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'face_pic2'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'face_pic2'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$face_pic</span> <span class="token operator">=</span> <span class="token variable">$image</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">img_upload</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'face_pic2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'face_pic'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//处理文件上传的核心代码</span>    <span class="token punctuation">}</span>    <span class="token variable">$face_pic</span> <span class="token operator">=</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$face_pic</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">''</span> <span class="token punctuation">:</span> <span class="token variable">$face_pic</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"UPDATE "</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" SET birthday = '$birthday', sex = '$sex', face_pic = '$face_pic', email = '$email', msn = '$msn', qq = '$qq',"</span> <span class="token punctuation">.</span>            <span class="token string">" mobile_phone = '$mobile_phone', office_phone = '$office_phone', home_phone = '$home_phone', address='$address' WHERE user_id = "</span><span class="token punctuation">.</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'更新个人资料成功'</span><span class="token punctuation">,</span> <span class="token string">'user.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p><code>upload.class.php</code></p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">upload</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$allow_image_type</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'image/jpeg'</span><span class="token punctuation">,</span> <span class="token string">'image/gif'</span><span class="token punctuation">,</span> <span class="token string">'image/png'</span><span class="token punctuation">,</span> <span class="token string">'image/pjpeg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token variable">$extension_name_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'jpg'</span><span class="token punctuation">,</span> <span class="token string">'gif'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">,</span> <span class="token string">'pjpeg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 上传图片     */</span>    <span class="token keyword">function</span> <span class="token function">img_upload</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$imgname</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token constant">BLUE_ROOT</span><span class="token punctuation">.</span><span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token constant">UPLOAD</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"Ym"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token constant">BLUE_ROOT</span><span class="token punctuation">.</span><span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token constant">UPLOAD</span><span class="token punctuation">.</span><span class="token variable">$dir</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">allow_image_type</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//第一次过滤，可以修改content-type绕过</span>            <span class="token keyword">echo</span> <span class="token string">'&lt;font style="color:red;">不允许的图片类型&lt;/font>'</span><span class="token punctuation">;</span>            exit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$imgname</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//get_type()进行了白名单后缀名过滤并返回后缀。</span>            <span class="token comment" spellcheck="true">// 白名单后缀 + 修改文件名。无法绕过。</span>            <span class="token variable">$imgname</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">create_tempname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'.'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_type</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">'&lt;font style="color:#ff0000;">上传过程中创建目录失败&lt;/font>'</span><span class="token punctuation">;</span>                exit<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$imgname</span> <span class="token operator">=</span> <span class="token variable">$dir</span> <span class="token punctuation">.</span> <span class="token variable">$imgname</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">uploading</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$imgname</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token constant">BLUE_ROOT</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$imgname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'&lt;font style="color:red;">上传图片失败&lt;/font>'</span><span class="token punctuation">;</span>            exit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">get_type</span><span class="token punctuation">(</span><span class="token variable">$filepath</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$pos</span> <span class="token operator">=</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$filepath</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$pos</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$extension_name</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$filepath</span><span class="token punctuation">,</span><span class="token variable">$pos</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$extension_name</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">extension_name_arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//第二次过滤，白名单后缀名。</span>            <span class="token keyword">echo</span> <span class="token string">'&lt;font style="color:red;">您上传的文件不符合要求,请重试&lt;/font>'</span><span class="token punctuation">;</span>            exit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$extension_name</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//后缀名若在白名单中则返回后缀名。</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建一个文件名，生成随机文件名     */</span>    <span class="token keyword">function</span> <span class="token function">create_tempname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="任意文件删除审计—存在"><a href="#任意文件删除审计—存在" class="headerlink" title="任意文件删除审计—存在"></a>任意文件删除审计—存在</h5><p>在审计上一节的文件上传时，看到一段代码像是存在任意文件删除，故进行审计验证，确定确实存在。</p><p>经过分析逻辑，发现该代码的作用时用于用户删除原头像文件。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924115431454.png" alt="image-20200924115431454" style="zoom:40%;"><p>代码如下，当<code>face_pic1</code>变量为空时（即用户清空了头像输出框的值，即删除头像），就会把头像文件进行删除。</p><pre class=" language-php"><code class="language-php"> <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$act</span> <span class="token operator">==</span> <span class="token string">'edit_user_info'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    。。。。。。    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'face_pic1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'face_pic1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//') != false &amp;&amp; strpos($_POST['face_pic1'], 'https://') != false){</span>           <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'只支持本站相对路径地址'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>           <span class="token variable">$face_pic</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'face_pic1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">BLUE_ROOT</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'face_pic3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token constant">BLUE_ROOT</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'face_pic3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//任意文件删除</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>漏洞验证</strong></p><p>我们可以只传<code>face_pic3</code>参数的值，实现任意文件删除。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924120311908.png" alt="image-20200924120311908" style="zoom:50%;"><h2 id="个人中心—充值"><a href="#个人中心—充值" class="headerlink" title="个人中心—充值"></a>个人中心—充值</h2><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924144412692.png" alt="image-20200924144412692" style="zoom:50%;"><h5 id="文件包含审计—存在"><a href="#文件包含审计—存在" class="headerlink" title="文件包含审计—存在"></a>文件包含审计—存在</h5><p>充值功能依然由<code>user.php</code>处理，<code>act</code>为<code>pay</code>时代码逻辑如下，可以看到代码直接将传入的<code>pay</code>参数拼接到<code>include</code>文件包含函数中。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$act</span> <span class="token operator">==</span> <span class="token string">'pay'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">include</span> <span class="token string">'data/pay.cache.php'</span><span class="token punctuation">;</span>     <span class="token variable">$price</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pay'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token string">'对不起，您没有选择支付方式'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">include</span> <span class="token string">'include/payment/'</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pay'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"/index.php"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//文件包含，直接将pay参数的值拼接。</span> <span class="token punctuation">}</span></code></pre><p><strong>漏洞利用</strong></p><p>需要注意到，文件包含时<code>/index.php</code>后缀是被固定了的，因此在进行利用之前，我们需要将其进行截断。</p><p>利用<code>Windows的路径不能超过256个字符</code>的特性，我们可以用多个<code>.</code>将后面的<code>/index.php</code>截断掉。（Window10截断失败，有机会再试其它。）</p><p>解决完截断后缀的问题，接下来要考虑的是要包含的文件，在前面审计头像上传时，说到由于过滤不能直接利用需要配合文件包含漏洞来利用，此时就可以用上了。</p><p>首先在头像上传的地方上传包含PHP代码的<code>jpg</code>文件。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924151703931.png" alt="image-20200924151703931" style="zoom:40%;"><p>从下图中可以看到上传文件成功，由于不是真的图片文件，所以不能显示，同时也能获取到文件的URL，本例是<code>data/upload/face_pic/16009318533.jpg</code>。</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924151831672.png" alt="image-20200924151831672" style="zoom:40%;"><p>进行文件包含</p><img src="/2020/09/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E2%80%94BlueCMS/image-20200924162111274.png" alt="image-20200924162111274" style="zoom:50%;"><p>这套程序存在大量漏洞，未完待续。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP代码审计 </tag>
            
            <tag> BlueCMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + GitPage博客搭建</title>
      <link href="2020/09/20/build-blog/"/>
      <url>2020/09/20/build-blog/</url>
      
        <content type="html"><![CDATA[<h4 id="前备环境"><a href="#前备环境" class="headerlink" title="前备环境"></a>前备环境</h4><ul><li>Git</li><li>Node.js</li></ul><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><blockquote><p><code>npm install -g hexo-cli</code></p></blockquote><h4 id="初始化Blog"><a href="#初始化Blog" class="headerlink" title="初始化Blog"></a>初始化Blog</h4><blockquote><p><code>hexo init  Myblog</code>       #会在当前目录下生成Myblog目录，即博客目录。</p></blockquote><h4 id="安装依赖模块"><a href="#安装依赖模块" class="headerlink" title="安装依赖模块"></a>安装依赖模块</h4><blockquote><p><code>cd Myblog</code></p><p><code>npm install</code>     #根据Myblog目录下的package.json安装所需的模块。如hexo-server等。</p></blockquote><p>目录、文件结构说明：</p><blockquote><p>Myblog</p><p>​        I— node_modules            # 存放模块的目录。</p><p>​        |— scaffolds                       # 文章、页面模板。</p><p>​        |— source                           # 存放文章的目录。</p><p>​        |— themes                          # 存放Hexo主题的目录。</p><p>​        |— .gitignore                      </p><p>​        |— _config.yml                   #Hexo主配置文件，如网站Title、主题等配置。</p><p>​        |— package.json                #依赖说明文件。</p><p>​        |__ package-lock.json</p></blockquote><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><p>主题在Hexo主配置文件<code> _config.yml</code>中的<code>theme</code>配置项中设置。</p><blockquote><p><code>cd Myblog/themes/</code></p><p>git clone <a href="https://github.com/blinkfox/hexo-theme-matery.git" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery.git</a></p></blockquote><h4 id="额外插件"><a href="#额外插件" class="headerlink" title="额外插件"></a>额外插件</h4><p><strong>a.代码高亮</strong></p><blockquote><p><code>npm i -S hexo-prism-plugin</code></p></blockquote><p>修改Hexo主配置文件<code> _config.yml</code>：</p><pre><code>highlight:     #关闭hexo自带的代码高亮  enable: falseprism_plugin:    #新增这部分配置以启用prism高亮插件。  mode: &#39;preprocess&#39;    # realtime/preprocess  theme: &#39;tomorrow&#39;  line_number: false    # default false  custom_css:</code></pre><p><strong>b.字数统计</strong></p><blockquote><p><code>npm i --save hexo-wordcount</code></p></blockquote><p>在主题的配置文件<code> _config.yml</code>中启用字数统计：</p><pre><code>postInfo:  wordCount: true      # 文章字数统计  totalCount: true      # 站点总文章字数</code></pre><p><strong>c.搜索插件</strong></p><blockquote><p><code>npm install hexo-generator-search --save</code></p></blockquote><p>在Hexo的主配置文件<code> _config.yml</code>中新增以下内容：</p><pre><code>search:  path: search.xml  field: post</code></pre><h4 id="新增分类、关于我等页面"><a href="#新增分类、关于我等页面" class="headerlink" title="新增分类、关于我等页面"></a>新增分类、关于我等页面</h4><p>具体页面配置，见<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">主题说明</a>。</p><blockquote><p>hexo new page “categories”</p><p>hexo new page “tags”</p><p>hexo new page “about”</p></blockquote><h4 id="部署到GitPages"><a href="#部署到GitPages" class="headerlink" title="部署到GitPages"></a>部署到GitPages</h4><p>安装将博客到部署到Git的插件</p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><p>配置Git信息</p><blockquote><p>git config –global user.email “<a href="mailto:&#x79;&#111;&#117;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#x6d;">&#x79;&#111;&#117;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#x6d;</a>“<br>git config –global user.name “a4ua”</p></blockquote><p>在Hexo的主配置文件中配置：</p><pre><code>deploy:  type: &#39;git&#39;  repo:  https://github.com/a4ua/a4ua.github.io</code></pre><p>部署命令</p><blockquote><p>hexo  d</p></blockquote><h4 id="评论系统Valine"><a href="#评论系统Valine" class="headerlink" title="评论系统Valine"></a>评论系统Valine</h4><p><code>hexo-theme-matery</code>主题自带了Valine评论系统，在主题配置文件中启用即可</p><pre><code>valine:  enable: true  appId:   appKey: </code></pre><p>appID和appKey需要去注册，<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">注册连接</a>。</p><p>注册账户登录后创建应用，在设置=&gt;应用Keys即可看到。</p><img src="/2020/09/20/build-blog/image-20200922222556328.png" alt="image-20200922222556328" style="zoom:67%;"><p>评论在存储=&gt;Comment处管理。</p><img src="/2020/09/20/build-blog/image-20200922222831657.png" alt="image-20200922222831657" style="zoom:67%;"><h4 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h4><p>到Github上的博客仓库的<code>settings</code>，进入并找到<code>Custom Domain</code>，输入框填入自己的域名即可。</p><img src="/2020/09/20/build-blog/image-20200922210232252.png" alt="image-20200922210232252" style="zoom:67%;"><p>然后在<code>source</code>目录下创建一个文件，名称为<code>CNAME</code>，文件无后缀。文件的内容写入域名，如：<code>a4ua.com</code>,作用是避免每次部署博客时，上一步在Github仓库设置的自定义域名会被重置。</p><h4 id="Hexo文章本地图片"><a href="#Hexo文章本地图片" class="headerlink" title="Hexo文章本地图片"></a>Hexo文章本地图片</h4><p>参考连接：</p><p><a href="https://www.jianshu.com/p/f72aaad7b852" target="_blank" rel="noopener">https://www.jianshu.com/p/f72aaad7b852</a></p><h4 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h4><p>启动本地Hexo服务器</p><blockquote><p>cd Myblog</p><p>hexo  s     #服务器默认监听在<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a></p></blockquote><p>创建新的文章</p><blockquote><p>hexo new  “title”    #根据scaffolds\post.md模板生成文章。</p></blockquote><p>渲染</p><blockquote><p>hexo g        #渲染会生成一个public文件夹，里面存放渲染好的博客文件。</p></blockquote><p>部署</p><blockquote><p>hexo d     #将博客部署到GitPage，实质是上传public文件夹到github对应仓库。</p></blockquote><p>清理缓存</p><blockquote><p>hexo clean</p></blockquote><h4 id="解决代码中-乱码问题"><a href="#解决代码中-乱码问题" class="headerlink" title="解决代码中{}乱码问题"></a>解决代码中<code>{}</code>乱码问题</h4><blockquote><p>npm i <a href="mailto:&#x68;&#101;&#x78;&#111;&#64;&#x34;&#46;&#49;&#46;&#x31;">&#x68;&#101;&#x78;&#111;&#64;&#x34;&#46;&#49;&#46;&#x31;</a>    #安装低版本hexo</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
